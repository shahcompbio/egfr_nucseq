---
title: "EGFR InferCNV assign malignant cells"
author: "Matthew Zatzman"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true
    code-tools: true
    code-link: true
    toc: true
execute:
  cache: false
---

```{r setup}
#| output: false
library(tidyverse)
library(ggthemes)
library(dittoSeq)
library(patchwork)
library(glue)
library(ggplotify)
library(ggh4x)
devtools::load_all("~/work/repos/scatools")
library(yaml)
library(bsub)
library(here)
```

Load yaml with assignments

```{r}
tumor_info <- read_yaml(here("cnv", "infercnv", "infercnv_manual_annotation_filled.yaml"))
```

Load clustered sces

```{r}
sce_list_f <- dir(here("cnv", "infercnv", "objects"), pattern = "*_clustered_sce.rds", recursive = TRUE, full.names = T)

sce_list <- lapply(sce_list_f, readRDS)

names(sce_list) <- lapply(sce_list, FUN = function(sc) {
  unique(sc$sample_id)
})
```

Loop over and assign malignant clones, recluster where necessary

```{r}
# infercnv_meta <- vector(mode = "list")

for (i in seq_along(sce_list)) {
  sc <- sce_list[[i]]
  pid <- unique(sc$sample_id)

  message(glue("{i} of {length(sce_list)}: {pid}"))

  sc$is_tumor_cell <- FALSE
  sc$is_tumor_cell_confidence <- NA


  tumor_clusters <- tumor_info[[pid]]$tumor_cluster
  confidence <- tumor_info[[pid]]$confidence


  if (!"NA" %in% tumor_clusters) {
    sc[, sc$clusters_patient %in% tumor_clusters]$is_tumor_cell <- TRUE

    for (j in seq_along(tumor_clusters)) {
      sc[, sc$clusters_patient == tumor_clusters[j]]$is_tumor_cell_confidence <- confidence[j]
    }
  }

  sce_list[[pid]] <- sc
}
```

Prepare for dataset merge

```{r}
# Get and fill all column names
common_bins <- Reduce(intersect, lapply(sce_list, rownames))

all_cols <- Reduce(union, lapply(sce_list, FUN = function(x) colnames(colData(x))))

sce_list <- lapply(sce_list, FUN = function(x) {
  missing_cols <- setdiff(all_cols, colnames(colData(x)))
  if (length(missing_cols) >= 1) {
    colData(x)[, missing_cols] <- NA
  }

  metadata(x) <- list()
  reducedDims(x) <- list()
  return(x[common_bins, ])
})

sce <- do.call("cbind", sce_list)
```



Load cell annos and merge on

```{r}
cell_anno <- readRDS(here("data", "objects", "02_cell_annotations.rds"))@meta.data[, c("cell_id", "RNA_cluster_labels", "RNA_cluster_labels_coarse")]

colData(sce)[, c("RNA_cluster_labels", "RNA_cluster_labels_coarse")] <- cell_anno[match(colnames(sce), cell_anno$cell_id), c("RNA_cluster_labels", "RNA_cluster_labels_coarse")]
```

Refine calls to only consider epithelial cells as tumor cells

```{r, fig.width=11, fig.height=5}
colData(sce) %>%
  as.data.frame() %>%
  dplyr::filter(is_tumor_cell == T) %>%
  dplyr::filter(!is.na(RNA_cluster_labels_coarse)) %>%
  dplyr::filter(!RNA_cluster_labels_coarse %in% c("B-Cell", "T-Cell", "Myeloid", "Mast Cell")) %>%
  ggplot(aes(x = sample_id)) +
  geom_bar(aes(fill = RNA_cluster_labels_coarse), position = "fill") +
  guides(x = guide_axis(angle = 90)) +
  scale_fill_ptol()
```


```{r}
sce$is_tumor_cell[sce$RNA_cluster_labels_coarse != "Epithelial"] <- FALSE
sce$is_tumor_cell_confidence[sce$is_tumor_cell == FALSE] <- "non-tumor"
```


# Save out

```{r}
colData(sce) %>%
  as.data.frame() %>%
  select(cell_id, sample_id, patient, cnv_score2, clusters_patient, is_tumor_cell, is_tumor_cell_confidence) %>%
  write.table(gzfile(here("results", paste0(Sys.Date(), "-egfr_infercnv_results.txt.gz"))), quote = F, sep = "\t", row.names = F, col.names = TRUE)
```

# Subset for tumor cells and recluster

```{r}
tumor <- sce[, sce$is_tumor_cell == TRUE]

sce_list <- lapply(gtools::mixedsort(unique(tumor$patient)), function(x) {
  sc <- tumor[, colData(tumor)$patient == x]
})
names(sce_list) <- gtools::mixedsort(unique(tumor$patient))
```

```{r}
# segments <- read.table("/work/shah/users/salehis/projects/egfr/data/mskimpact_segments.seg", header = T, sep = "\t")
segments <- read.table(here("impact", "segments_hg19.seg"), header = T, sep = "\t")


segments$sample_id <- janitor::make_clean_names(segments$dmp_pid, case = "all_caps", allow_dupes = TRUE)
# segments$chrom <- paste0("chr", segments$chrom)

segments <- split(segments, segments$sample_id)
```


```{r}
overwrite <- F
pt_size <- 1
alpha <- 1

for (i in seq_along(sce_list)) {
  sc <- sce_list[[i]]

  pid <- unique(sc$patient)

  patient_id <- janitor::make_clean_names(unique(sc$individual), case = "all_caps", allow_dupes = TRUE)

  outdir <- here("cnv", "infercnv", glue("objects/{pid}"))

  plotdir <- here("cnv", "infercnv", "plots")

  dir.create(outdir, showWarnings = FALSE, recursive = TRUE)

  pid_segments <- segments[which(grepl(patient_id, names(segments)))]

  if (length(pid_segments) == 0) {
    logger::log_info("No segment data")
    pid_segments <- NULL
  }

  final_out <- file.path(outdir, glue("{pid}_clustered_tumor_sce.rds"))
  if (file.exists(final_out) & !overwrite) {
    message("Already done")
  } else {
    bsub_chunk(
      name = glue("{pid}_inferpp_tumor"),
      enforce = TRUE,
      image = TRUE,
      working_dir = outdir,
      temp_dir = outdir,
      output_dir = outdir,
      hours = 2,
      memory = 16,
      cores = 4,
      code = {
        devtools::load_all("~/repos/scatools")
        sc <- cluster_seurat(sc, assay_name = "counts", algorithm = "leiden", umap.metric = "euclidean", annoy.metric = "euclidean", resolution = 1, suffix = "_tumor")

        if (!is.null(pid_segments)) {
          logger::log_info("Processing IMPACT segment data")

          means <- lapply(seq_along(pid_segments), FUN = function(j) {
            sample_id <- names(pid_segments)[j]
            segs <- pid_segments[[j]]

            segs[[sample_id]] <- segs$seg.mean

            y <- makeGRangesFromDataFrame(segs, keep.extra.columns = T)

            mcols(integrate_segments(rowRanges(sc), y, granges_signal_colname = sample_id, drop_na = FALSE))[[sample_id]]
          })

          names(means) <- names(pid_segments)
          means <- as.data.frame(means)


          mcols(rowRanges(sc)) <- cbind(mcols(rowRanges(sc)), means)
        }

        sc$clusters_tumor <- fct_infreq(sc$clusters_tumor)

        p1 <- dittoDimPlot(sc, var = "clusters_tumor", size = pt_size, opacity = alpha, reduction.use = "UMAP_tumor", do.label = T)

        ht <- cnaHeatmap(sc, assay_name = "counts", clone_name = "clusters_tumor", col_fun = logr_col_fun(breaks = c(-0.05, -0.01, 0.01, 0.05), colors = c("blue", "white", "white", "red")), log2 = T, col_clones = dittoColors(), legend_name = "log2ratio", bulk_cn_col = names(pid_segments)[1])

        clone_ht <- cloneCnaHeatmap(sc, assay_name = "counts", clone_name = "clusters_tumor", col_fun = logr_col_fun(breaks = c(-0.05, -0.01, 0.01, 0.05), colors = c("blue", "white", "white", "red")), log2 = T, col_clones = dittoColors(), legend_name = "log2ratio", bulk_cn_col = names(pid_segments)[1])

        # If we have impact segments, correlate each pseudobulked clusters copy number with those segments
        if (!is.null(pid_segments)) {
          df <- get_assay_dat(pseudo_groups(sc, assay_name = "counts", group_var = "clusters_tumor"), assay_names = "counts")
          df$log2_counts <- log2(df$counts)

          impact_corplots <- lapply(names(pid_segments), FUN = function(s) {
            ggplot(df, aes(x = df[["log2_counts"]], y = df[[s]])) +
              geom_point() +
              geom_hline(yintercept = 0, linetype = "dashed") +
              geom_vline(xintercept = 0, linetype = "dashed") +
              geom_smooth(method = "lm") +
              ggpubr::stat_cor() +
              facet_wrap(~id) +
              theme_bw() +
              labs(x = "infercnv", y = "IMPACT", title = s)
          })

          df_long <- df %>%
            pivot_longer(cols = gsub("-", ".", names(pid_segments))) %>%
            mutate(chr = gsub("chr", "", seqnames))
          df_long$chr <- factor(df_long$chr, levels = chr_reorder(unique(df_long$chr)))

          impact_cn_plot <- ggplot(df_long) +
            facet_grid(as.formula(paste("name", "~", "chr")), scales = "free_x", space = "free_x") +
            theme_bw() +
            theme(
              panel.spacing.x = unit(0, "lines"),
              panel.border = element_rect(fill = NA),
              panel.grid = element_blank(),
              axis.text.x = element_blank(),
              axis.ticks.x = element_blank()
            ) +
            geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
            geom_segment(aes_string(x = "start", xend = "end", y = "value", yend = "value"), linewidth = 1)
        } else {
          impact_cn_plot <- impact_corplots <- NULL
        }



        umap_plot <- wrap_plots(list(p1), ncol = 1) +
          plot_annotation(
            title = glue("Patient: {unique(sc$individual)} - {unique(sc$patient)}"),
            subtitle = glue("Site: {unique(sc$site_of_tissue)}\nProcedure: {unique(sc$procedure_type)}\nTreatment: {unique(sc$treatment_at_time_of_sample)}")
          )

        pdf(file = glue("{plotdir}/{pid}_infercnv_tumor.pdf"), width = 14, height = 8)
        plot(umap_plot)
        try(plot(ht))
        plot(clone_ht)
        if (!is.null(impact_corplots)) {
          lapply(impact_corplots, plot)
          impact_cn_plot
        }
        dev.off()

        saveRDS(sc, file = final_out)
      }
    )
  }
}
```

