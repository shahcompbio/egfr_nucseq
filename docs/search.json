[{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Load objects","title":null,"text":"","code":"sce_ti <- readRDS(here(\"paper_data\", \"slingshot_sce_v2.rds\")) srt_ti <- readRDS(here(\"paper_data\", \"egfr_histo.rds\")) sce_gam <- readRDS(here(\"paper_data\", \"sce_gam_v2.rds\"))  srt_ti$time_point <- fct_relevel(srt_ti$time_point, \"TN\", \"MRD\", \"PD\")  pseudo.paths <- slingPseudotime(sce_ti) # Taking the rowMeans just gives us a single pseudo-time for all cells. Cells # in segments that are shared across paths have similar pseudo-time values in # all paths anyway, so taking the rowMeans is not particularly controversial. sce_ti$pseudotime <- rowMeans(pseudo.paths, na.rm = TRUE) srt_ti$pseudotime <- sce_ti$pseudotime srt_ti$pseudotime_scaled <- standardize(srt_ti$pseudotime)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Curves","title":null,"text":"","code":"embedded <- embedCurves(sce_ti, \"PCA_GENES\") embedded <- slingCurves(embedded)  ti_curves <- purrr::map(embedded, .f = function(l) {   as.data.frame(l$s[l$ord, ]) })  curves_df <- purrr::map(seq_along(ti_curves), .f = function(i) {   df <- ti_curves[[i]]   df$lineage <- i   return(df) }) %>%   list_rbind() curves_df$lineage <- factor(curves_df$lineage, levels = c(1, 2), labels = c(\"LUSC\", \"SCLC\")) trim_v <- c(0, 1)  srt_ti$LUAD_s <- standardize(srt_ti$LUAD, trim = trim_v) srt_ti$LUSC_s <- standardize(srt_ti$LUSC, trim = trim_v) srt_ti$SCLC_s <- standardize(srt_ti$SCLC, trim = trim_v) srt_ti$MAPK_s <- standardize(srt_ti$REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES, trim = trim_v)  p_list <- FeaturePlot(srt_ti, features = c(\"histotime\", \"LUAD_s\", \"LUSC_s\", \"SCLC_s\", \"MAPK_s\"), reduction = \"histo\", raster = F, order = T, combine = F, pt.size = 0.1) %>%   purrr::map(., .f = function(p) {     p +       scale_color_viridis_c(option = \"inferno\", breaks = c(0, 1), labels = c(0, 1)) +       NoAxes() +       guides(color = guide_colorbar(keywidth = 0.4, keyheight = 3))   })  names(p_list) <- c(\"Histotime\", \"LUAD\", \"LUSC\", \"SCLC\", \"Nuclear MAPK (Reactome)\")  p_list$Histotime <- p_list$Histotime +   ggnewscale::new_scale_color() +   geom_path(arrow = arrow(angle = 30, length = unit(0.4, \"lines\"), ends = \"last\", type = \"closed\"), data = curves_df, aes(group = lineage, x = pcagenes_1, y = pcagenes_2), linewidth = 2, alpha = 1, color = \"black\", show.legend = F) +   geom_path(arrow = arrow(angle = 30, length = unit(0.4, \"lines\"), ends = \"last\", type = \"closed\"), data = curves_df, aes(color = lineage, x = pcagenes_1, y = pcagenes_2), linewidth = 1, alpha = 1) +   scale_color_manual(values = colors$histology_predominant_short, name = \"Lineage\") +   guides(color = guide_legend(position = \"inside\", override.aes = list(linewidth = 1, geom = \"line\"))) +   theme(legend.position.inside = c(0.8, 0.5))   p_list <- purrr::map(names(p_list), .f = function(nm) {   p <- p_list[[nm]] +     ggtitle(nm)   ggrastr::rasterise(p, layers = \"Point\", dpi = 300) }) names(p_list) <- c(\"Histotime\", \"LUAD\", \"LUSC\", \"SCLC\", \"Nuclear MAPK (Reactome)\")   layout <- c(   area(t = 2, b = 3, l = 1, r = 2),   area(t = 1, b = 2, l = 3, r = 4),   area(t = 3, b = 4, l = 3, r = 4),   area(t = 1, b = 2, l = 5, r = 6),   area(t = 3, b = 4, l = 5, r = 6) )  pcomb <- wrap_plots(p_list, design = layout)  size_scale <- 1.4  ggsave(pcomb, file = here(\"plots\", \"psuedotime_traj.pdf\"), width = 12 / size_scale, height = 8 / size_scale) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Lineage Genes","title":null,"text":"","code":"# A full version ysmooth_df_full <- predictSmooth(models = sce_gam, gene = rownames(sce_gam), nPoints = 100, tidy = TRUE) %>%   mutate(log_counts = log1p(yhat)) %>%   mutate(lineage = factor(lineage, levels = c(1, 2), labels = c(\"LUSC\", \"SCLC\"))) %>%   group_by(gene, lineage) %>%   mutate(     pseudotime_rank = 1:n(),     time_scaled = standardize(pseudotime_rank)   ) %>%   ungroup() %>%   group_by(gene) %>%   mutate(     log_counts_scaled = scale(log_counts)[, 1],     log_counts_standardized = standardize(log_counts)   ) %>%   ungroup() pls <- map(names(markers$epi_markers_final), .f = function(ct) {   glist <- markers$epi_markers_final[[ct]]    ysmooth_df_full %>%     dplyr::filter(gene %in% glist) %>%     ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +     labs(y = \"Expression\", x = \"Psuedotime\", linetype = \"Lineage\", title = ct, color = NULL) +     geom_line(linewidth = 1) +     scale_color_nejm() +     guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +     scale_x_continuous(breaks = c(0, 1)) +     theme(       panel.border = element_rect(fill = NA, color = \"black\"),       strip.background = element_blank(),       axis.line = element_blank(),       plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)     ) +     facet_grid(. ~ lineage, scales = \"free_y\") }) names(pls) <- names(markers$epi_markers_final)  pcomb <- wrap_plots(pls, ncol = 3) ggsave(pcomb, file = here(\"plots\", \"histotime_all_epi_types.pdf\"), width = 14, height = 10) pcomb luad_loss_genes <- c(\"SFTPB\", \"SFTPC\", \"SFTPD\", \"ETV5\") # luad loss  p_luad_loss <- ysmooth_df_full %>%   group_by(gene) %>%   mutate(log_counts_standardized = standardize(log_counts)) %>%   dplyr::filter(gene %in% luad_loss_genes) %>%   ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +   geom_line(linewidth = 1) +   labs(y = \"Expression\", color = \"AT2 Markers\", x = \"Psuedotime\", linetype = \"Lineage\") +   scale_color_nejm() +   guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +   scale_x_continuous(breaks = c(0, 1)) +   theme(     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     axis.line = element_blank()   ) +   facet_grid(. ~ lineage, scales = \"free_y\")  lusc_gain_genes <- c(\"TP63\", \"KRT5\", \"KRT15\", \"KRT17\")  p_lusc_gain <- ysmooth_df_full %>%   dplyr::filter(gene %in% lusc_gain_genes) %>%   mutate(gene = fct_relevel(gene, lusc_gain_genes)) %>%   ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +   geom_line(linewidth = 1) +   labs(y = \"Expression\", color = \"Basal Markers\", x = \"Psuedotime\", linetype = \"Lineage\") +   scale_color_nejm() +   guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +   scale_x_continuous(breaks = c(0, 1)) +   facet_grid(. ~ lineage)  sclc_gain_genes <- c(\"ASCL1\", \"NCAM1\", \"NEUROD1\", \"SYP\") # SCLC  p_sclc_gain <- ysmooth_df_full %>%   dplyr::filter(gene %in% sclc_gain_genes) %>%   ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +   geom_line(linewidth = 1) +   labs(y = \"Expression\", color = \"NE Markers\", x = \"Psuedotime\", linetype = \"Lineage\") +   scale_color_nejm() +   scale_linetype_manual(values = c(\"solid\", \"dotted\")) +   guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +   scale_x_continuous(breaks = c(0, 1)) +   facet_grid(. ~ lineage)  pcomb <- (p_luad_loss) + (p_lusc_gain + theme(strip.text.x = element_blank())) + (p_sclc_gain + theme(strip.text.x = element_blank())) + plot_layout(ncol = 1, axes = \"collect\", axis_titles = \"collect\") &   theme(     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     axis.line = element_blank(), plot.margin = margin(0.8, 0.5, 0.8, 0.5, \"mm\"),     legend.margin = margin()   ) &   guides(color = guide_legend(keyheight = 0.5, keywidth = 0.5)) &   scale_y_continuous(breaks = c(0, 1), labels = c(0, 1)) &   labs(x = \"Histotime\", y = \"Scaled Expression\") ggsave(pcomb, file = here(\"plots\", \"histotime_example_genes.pdf\"), width = 3.75, height = 3.5) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"All epi markers","title":null,"text":"","code":"pls <- map(names(markers$epi_markers_final), .f = function(ct) {   glist <- markers$epi_markers_final[[ct]]    ysmooth_df_full %>%     dplyr::filter(gene %in% glist) %>%     ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +     labs(y = \"Expression\", x = \"Psuedotime\", linetype = \"Lineage\", title = ct, color = NULL) +     geom_line(linewidth = 1) +     scale_color_nejm() +     guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +     scale_x_continuous(breaks = c(0, 1)) +     theme(       panel.border = element_rect(fill = NA, color = \"black\"),       strip.background = element_blank(),       axis.line = element_blank(),       plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)     ) +     facet_grid(. ~ lineage, scales = \"free_y\") }) names(pls) <- names(markers$epi_markers_final)  pcomb <- wrap_plots(pls, ncol = 3) ggsave(pcomb, file = here(\"plots\", \"histotime_all_epi_types.pdf\"), width = 14, height = 10) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Select genes","title":null,"text":"","code":"luad_loss_genes <- c(\"SFTPB\", \"SFTPC\", \"SFTPD\", \"ETV5\") # luad loss  p_luad_loss <- ysmooth_df_full %>%   group_by(gene) %>%   mutate(log_counts_standardized = standardize(log_counts)) %>%   dplyr::filter(gene %in% luad_loss_genes) %>%   ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +   geom_line(linewidth = 1) +   labs(y = \"Expression\", color = \"AT2 Markers\", x = \"Psuedotime\", linetype = \"Lineage\") +   scale_color_nejm() +   guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +   scale_x_continuous(breaks = c(0, 1)) +   theme(     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     axis.line = element_blank()   ) +   facet_grid(. ~ lineage, scales = \"free_y\")  lusc_gain_genes <- c(\"TP63\", \"KRT5\", \"KRT15\", \"KRT17\")  p_lusc_gain <- ysmooth_df_full %>%   dplyr::filter(gene %in% lusc_gain_genes) %>%   mutate(gene = fct_relevel(gene, lusc_gain_genes)) %>%   ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +   geom_line(linewidth = 1) +   labs(y = \"Expression\", color = \"Basal Markers\", x = \"Psuedotime\", linetype = \"Lineage\") +   scale_color_nejm() +   guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +   scale_x_continuous(breaks = c(0, 1)) +   facet_grid(. ~ lineage)  sclc_gain_genes <- c(\"ASCL1\", \"NCAM1\", \"NEUROD1\", \"SYP\") # SCLC  p_sclc_gain <- ysmooth_df_full %>%   dplyr::filter(gene %in% sclc_gain_genes) %>%   ggplot(aes(x = time_scaled, y = log_counts_standardized, color = gene, group = gene)) +   geom_line(linewidth = 1) +   labs(y = \"Expression\", color = \"NE Markers\", x = \"Psuedotime\", linetype = \"Lineage\") +   scale_color_nejm() +   scale_linetype_manual(values = c(\"solid\", \"dotted\")) +   guides(linetype = guide_legend(override.aes = list(linewidth = 1))) +   scale_x_continuous(breaks = c(0, 1)) +   facet_grid(. ~ lineage)  pcomb <- (p_luad_loss) + (p_lusc_gain + theme(strip.text.x = element_blank())) + (p_sclc_gain + theme(strip.text.x = element_blank())) + plot_layout(ncol = 1, axes = \"collect\", axis_titles = \"collect\") &   theme(     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     axis.line = element_blank(), plot.margin = margin(0.8, 0.5, 0.8, 0.5, \"mm\"),     legend.margin = margin()   ) &   guides(color = guide_legend(keyheight = 0.5, keywidth = 0.5)) &   scale_y_continuous(breaks = c(0, 1), labels = c(0, 1)) &   labs(x = \"Histotime\", y = \"Scaled Expression\") ggsave(pcomb, file = here(\"plots\", \"histotime_example_genes.pdf\"), width = 3.75, height = 3.5) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Cancer cell states over pseudotime","title":null,"text":"Quantify proportions","code":"p1 <- srt_ti@meta.data %>%   ggplot(aes(x = standardize(pseudotime), y = fct_reorder(cell_type_epi, -pseudotime, median))) +   # geom_violin(scale = \"width\") +   ggrastr::rasterize(geom_quasirandom(aes(color = cell_type_epi), size = 0.1, alpha = 0.5, show.legend = F), dpi = 1000) +   geom_pointrange(     pch = 21,     stat = \"summary\", fatten = 2, color = \"black\", fill = \"white\", stroke = 0.5,     fun.min = function(z) {       quantile(z, 0.25)     },     fun.max = function(z) {       quantile(z, 0.75)     },     fun = median, position = position_dodge(width = 0.8)   ) +   guides(x = guide_axis(cap = \"upper\")) +   scale_color_manual(values = colors$cell_type_epi) +   scale_x_continuous(breaks = c(0, 1)) +   labs(x = \"Histotime\", y = \"Epithelial cell state\") +   theme(plot.margin = margin(1, 0, 1, 1, \"mm\"))  # Distribution over the branches p2 <- srt_ti@meta.data %>%   ggplot(aes(y = fct_reorder(cell_type_epi, -pseudotime_scaled, median))) +   geom_bar(aes(fill = lineage_assignment), position = \"fill\") +   labs(fill = \"Branch\", x = \"Prop.\", y = NULL) +   scale_x_continuous(expand = c(0, 0), breaks = c(0, 1)) +   guides(     x = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4, override.aes = list(color = NULL))   ) +   scale_fill_manual(values = colors$histology_predominant_short) +   theme(     axis.text.y = element_blank(),     axis.line.y = element_blank(),     axis.ticks.y = element_blank(),     plot.margin = margin(1, 1, 1, 0, \"mm\")   )   pcomb <- p1 + p2 + plot_layout(nrow = 1, widths = c(1, 0.4)) ggsave(pcomb, file = here(\"plots\", \"histotime_epi_types_dotviolin_wprop.pdf\"), width = 3.75, height = 3.25) pcomb df <- srt_ti@meta.data %>%   add_count(cell_type_epi, lineage_assignment, name = \"numer\") %>%   add_count(cell_type_epi, name = \"denom\") %>%   mutate(prop = numer / denom) %>%   distinct(cell_type_epi, lineage_assignment, numer, denom, prop) %>%   arrange(cell_type_epi, lineage_assignment) %>%   mutate(prop = round(prop, digits = 3)) knitr::kable(df)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Ucell score within lineages","title":null,"text":"Load pathways","code":"meta_programs_df <- read.table(file = \"https://raw.githubusercontent.com/mjz1/meta_programs_tirosh/refs/heads/main/tirosh_mp_patched.txt\", header = T, sep = \"\\t\")  meta_programs <- split(meta_programs_df, meta_programs_df$cell_type)  meta_programs <- map(meta_programs, .f = function(x) {   res <- split(x, x$meta_program)   map(res, .f = function(y) y$Gene) })  names(meta_programs) <- janitor::make_clean_names(names(meta_programs))  pathways_v2 <- read.table(here(\"paper_data\", \"egfr_pathways.txt\"), header = T, sep = \"\\t\")   all_paths <- c(meta_programs$malignant, split(pathways_v2$Gene, pathways_v2$pathway)) if (!file.exists(here(\"paper_data\", \"ucell_scores_histotime.txt\"))) {   library(UCell)   library(BiocParallel)   mat_full <- predictSmooth(models = sce_gam, gene = rownames(sce_gam), nPoints = 100, tidy = FALSE)    ranks <- StoreRankings_UCell(matrix = mat_full, BPPARAM = MulticoreParam(workers = 16, progressbar = T))    histo_scores <- ScoreSignatures_UCell(precalc.ranks = ranks, features = all_paths, name = \"\", BPPARAM = MulticoreParam(workers = 16, progressbar = T))    ucell_df <- histo_scores %>%     as.data.frame() %>%     rownames_to_column(\"id\") %>%     separate(id, into = c(\"lineage_no\", \"pseudotime_rank\")) %>%     mutate(pseudotime = as.numeric(pseudotime_rank) / 100) %>%     mutate(lineage = factor(lineage_no, levels = c(\"lineage1\", \"lineage2\"), labels = c(\"LUSC\", \"SCLC\"))) %>%     pivot_longer(cols = colnames(histo_scores), names_to = \"features.plot\", values_to = \"Score\") %>%     mutate(features.plot = fct_recode(       features.plot,       \"LUAD\" = \"LUAD_GIRARD\",       \"LUSC\" = \"LUSC_GIRARD\",       \"SCLC\" = \"SCLC_CCLE\"     ))    write.table(ucell_df, file = here(\"paper_data\", \"ucell_scores_histotime.txt\"), col.names = T, row.names = F, quote = F, sep = \"\\t\") } else {   ucell_df <- read.table(file = here(\"paper_data\", \"ucell_scores_histotime.txt\"), header = T, sep = \"\\t\") } emt_paths <- grep(\"emt|HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\", ignore.case = T, unique(ucell_df$features.plot), value = T) myc_paths <- c(grep(\"myc\", ignore.case = T, unique(ucell_df$features.plot), value = T)) stemness <- c(\"WONG_EMBRYONIC_STEM_CELL_CORE\", \"BENPORATH_PRC2_TARGETS\") metabolic_paths <- c(\"HALLMARK_GLYCOLYSIS\", \"HALLMARK_OXIDATIVE_PHOSPHORYLATION\", \"HALLMARK_MTORC1_SIGNALING\") histological_malignant <- c(\"LUAD\", \"LUSC\", \"SCLC\") histological <- c(\"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_1_CELL\", \"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_2_CELL\", \"alveolar\", \"TRAVAGLINI_LUNG_BASAL_CELL\", \"TRAVAGLINI_LUNG_CILIATED_CELL\", \"TRAVAGLINI_LUNG_CLUB_CELL\", \"TRAVAGLINI_LUNG_NEUROENDOCRINE_CELL\", \"TRAVAGLINI_LUNG_PROLIFERATING_BASAL_CELL\", \"TRAVAGLINI_LUNG_PROXIMAL_BASAL_CELL\") cell_cycle <- c(grep(\"cycle\", unique(ucell_df$features.plot), ignore.case = T, value = T)) mapk <- c(\"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\", \"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_SIGNALING_BY_EGFR\")   pth_list <- list(   \"EMT\" = emt_paths,   \"MYC\" = myc_paths,   \"Stem\" = stemness,   \"Metabolic\" = metabolic_paths,   \"Lung Cancer\" = histological_malignant,   \"Histological\" = histological,   \"Cell Cycle\" = cell_cycle,   \"MAPK\" = mapk )  pth_cat_df <- enframe(pth_list, name = \"Category\", value = \"features.plot\") %>%   unnest(cols = \"features.plot\")  pth_df <- ucell_df %>%   filter(features.plot %in% unlist(pth_list)) %>%   left_join(pth_cat_df) %>%   filter(!grepl(\"TGFB\", features.plot)) %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i\" ~ \"EMT (I)\",     features.plot == \"emt_ii\" ~ \"EMT (II)\",     features.plot == \"emt_iii\" ~ \"EMT (III)\",     features.plot == \"emt_iv\" ~ \"EMT (IV)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich\" ~ \"HMG Rich\",     features.plot == \"myc\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   )) %>%   mutate(     pathway_source = case_when(       features.plot %in% names(meta_programs$malignant) ~ \"Malignant Metaprograms\",       grepl(\"^TRAVAGLINI\", features.plot) ~ \"Travaglini\",       grepl(\"^HALLMARK_\", features.plot) ~ \"Hallmark Pathways\",       # features.plot %in% c(\"S.Score\", \"G2M.Score\") ~ \"Seurat\",       .default = \"Curated\"     )   ) %>%   # Remove extra myc pathways since they all show the same thing   filter(     !(grepl(\"MYC\", features.plot, ignore.case = T) & pathway_source == \"Curated\")   ) %>%   arrange(desc(pathway_source), desc(pathway))  # constructive::construct(unique(pth_df$pathway)) pth_cat_order <- c(   \"Histological\", \"Lung Cancer\", \"MAPK\", \"EMT\", \"MYC\",   \"Stem\", \"Metabolic\", \"Cell Cycle\" )  pth_order <- c(   \"G1S\", \"G2M\", \"G2M Score\", \"HMG Rich\", \"S Score\",   \"EMT (I)\", \"EMT (II)\", \"EMT (III)\", \"EMT (IV)\", \"EMT\",   \"LUAD\", \"LUSC\", \"SCLC\",   \"AT1 Cell\", \"AT2 Cell\", \"Alveolar Signature\", \"Basal Cell\", \"Proximal Basal Cell\",   \"Proliferating Basal Cell\", \"Club Cell\", \"Ciliated Cell\",   \"Neuroendocrine Cell\", \"MYC\", \"MYC Targets V1\", \"MYC Targets V2\",   \"Glycolysis\", \"OxPhos\", \"MTORC1\", \"Embryonic Stem Cell (Wong)\",   \"PRC2 Targets (Ben-Porath)\",   \"MAPK (KEGG)\", \"MAPK (Biocarta)\", \"Nuclear MAPK (Reactome)\", \"MAPK (Reactome)\", \"EGFR (Reactome)\" )  pth_df <- pth_df %>%   mutate(     pathway = fct_relevel(pathway, rev(pth_order)),     Category = fct_relevel(Category, pth_cat_order)   ) p1 <- pth_df %>%   ggplot(aes(x = \"Pathway Source\", y = pathway)) +   geom_tile(aes(fill = pathway_source), color = \"black\") +   scale_fill_pander() +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line.x = element_blank(),     axis.text.x = element_blank(),     axis.ticks.x = element_blank(),     axis.line.y = element_blank(), legend.position = \"left\", strip.background = element_blank(), strip.text = element_blank()   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 2)   ) +   facet_grid(Category ~ ., scales = \"free\", space = \"free\") +   labs(y = NULL, x = NULL, fill = \"Pathway Source\")   p2 <- pth_df %>%   group_by(pathway) %>%   mutate(Score_scaled = scale(Score)[, 1]) %>%   ggplot(aes(x = pseudotime, y = pathway)) +   geom_tile(aes(fill = Score_scaled)) +   facet_grid(Category ~ lineage, scales = \"free\", space = \"free\") +   scale_fill_viridis_c(option = \"inferno\", limits = c(-2, 2), oob = scales::squish) +   # scale_fill_gradient2(low = scales::muted(\"blue\"), high = scales::muted(\"red\"), limits = c(-1, 2), oob = scales::squish,   # labels = c(-1, 0, 1, 2), breaks = c(-1, 0, 1, 2)) +   theme(     axis.text.x = element_blank(),     axis.ticks = element_blank(), axis.line = element_blank(),     strip.background = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     legend.position = \"bottom\",     strip.text.y = element_text(hjust = 0, angle = 0)   ) +   scale_x_continuous(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(x = \"Histotime\", y = NULL, fill = \"Expression\") +   guides(fill = guide_colorbar(keywidth = 3, keyheight = 0.4)) # ggsave(p1, file = here(\"plots\", \"histotime_signature_heatplot.pdf\"), width = 5, height = 6)   sig_heatplot <-   free(     (p1 +       theme(plot.margin = margin(l = 0.25, r = 1, unit = \"mm\"))),     type = \"space\", side = \"b\"   ) +     free(       (p2 +         theme(plot.margin = margin(r = 0.25, unit = \"mm\"), axis.text.y = element_blank(), axis.ticks.y = element_blank())),       type = \"label\", side = \"b\"     ) +     plot_layout(guides = \"collect\", ncol = 2, widths = c(0.03, 1)) +     plot_annotation(theme = theme(legend.position = \"bottom\")) &     theme(       panel.spacing = unit(1, \"mm\"),       panel.border = element_rect(fill = NA, color = \"black\", linewidth = 0.5),       legend.box.margin = margin(), legend.title.position = \"top\", legend.title = element_text(hjust = 0.5)     ) &     coord_cartesian(clip = \"off\") ggsave(sig_heatplot, file = here(\"plots\", \"histotime_signature_heatmap.pdf\"), width = 5, height = 6) sig_heatplot"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Select pathways","title":null,"text":"","code":"emt_paths <- grep(\"emt|HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\", ignore.case = T, unique(ucell_df$features.plot), value = T) myc_paths <- c(grep(\"myc\", ignore.case = T, unique(ucell_df$features.plot), value = T)) stemness <- c(\"WONG_EMBRYONIC_STEM_CELL_CORE\", \"BENPORATH_PRC2_TARGETS\") metabolic_paths <- c(\"HALLMARK_GLYCOLYSIS\", \"HALLMARK_OXIDATIVE_PHOSPHORYLATION\", \"HALLMARK_MTORC1_SIGNALING\") histological_malignant <- c(\"LUAD\", \"LUSC\", \"SCLC\") histological <- c(\"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_1_CELL\", \"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_2_CELL\", \"alveolar\", \"TRAVAGLINI_LUNG_BASAL_CELL\", \"TRAVAGLINI_LUNG_CILIATED_CELL\", \"TRAVAGLINI_LUNG_CLUB_CELL\", \"TRAVAGLINI_LUNG_NEUROENDOCRINE_CELL\", \"TRAVAGLINI_LUNG_PROLIFERATING_BASAL_CELL\", \"TRAVAGLINI_LUNG_PROXIMAL_BASAL_CELL\") cell_cycle <- c(grep(\"cycle\", unique(ucell_df$features.plot), ignore.case = T, value = T)) mapk <- c(\"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\", \"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_SIGNALING_BY_EGFR\")   pth_list <- list(   \"EMT\" = emt_paths,   \"MYC\" = myc_paths,   \"Stem\" = stemness,   \"Metabolic\" = metabolic_paths,   \"Lung Cancer\" = histological_malignant,   \"Histological\" = histological,   \"Cell Cycle\" = cell_cycle,   \"MAPK\" = mapk )  pth_cat_df <- enframe(pth_list, name = \"Category\", value = \"features.plot\") %>%   unnest(cols = \"features.plot\")  pth_df <- ucell_df %>%   filter(features.plot %in% unlist(pth_list)) %>%   left_join(pth_cat_df) %>%   filter(!grepl(\"TGFB\", features.plot)) %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i\" ~ \"EMT (I)\",     features.plot == \"emt_ii\" ~ \"EMT (II)\",     features.plot == \"emt_iii\" ~ \"EMT (III)\",     features.plot == \"emt_iv\" ~ \"EMT (IV)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich\" ~ \"HMG Rich\",     features.plot == \"myc\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   )) %>%   mutate(     pathway_source = case_when(       features.plot %in% names(meta_programs$malignant) ~ \"Malignant Metaprograms\",       grepl(\"^TRAVAGLINI\", features.plot) ~ \"Travaglini\",       grepl(\"^HALLMARK_\", features.plot) ~ \"Hallmark Pathways\",       # features.plot %in% c(\"S.Score\", \"G2M.Score\") ~ \"Seurat\",       .default = \"Curated\"     )   ) %>%   # Remove extra myc pathways since they all show the same thing   filter(     !(grepl(\"MYC\", features.plot, ignore.case = T) & pathway_source == \"Curated\")   ) %>%   arrange(desc(pathway_source), desc(pathway))  # constructive::construct(unique(pth_df$pathway)) pth_cat_order <- c(   \"Histological\", \"Lung Cancer\", \"MAPK\", \"EMT\", \"MYC\",   \"Stem\", \"Metabolic\", \"Cell Cycle\" )  pth_order <- c(   \"G1S\", \"G2M\", \"G2M Score\", \"HMG Rich\", \"S Score\",   \"EMT (I)\", \"EMT (II)\", \"EMT (III)\", \"EMT (IV)\", \"EMT\",   \"LUAD\", \"LUSC\", \"SCLC\",   \"AT1 Cell\", \"AT2 Cell\", \"Alveolar Signature\", \"Basal Cell\", \"Proximal Basal Cell\",   \"Proliferating Basal Cell\", \"Club Cell\", \"Ciliated Cell\",   \"Neuroendocrine Cell\", \"MYC\", \"MYC Targets V1\", \"MYC Targets V2\",   \"Glycolysis\", \"OxPhos\", \"MTORC1\", \"Embryonic Stem Cell (Wong)\",   \"PRC2 Targets (Ben-Porath)\",   \"MAPK (KEGG)\", \"MAPK (Biocarta)\", \"Nuclear MAPK (Reactome)\", \"MAPK (Reactome)\", \"EGFR (Reactome)\" )  pth_df <- pth_df %>%   mutate(     pathway = fct_relevel(pathway, rev(pth_order)),     Category = fct_relevel(Category, pth_cat_order)   ) p1 <- pth_df %>%   ggplot(aes(x = \"Pathway Source\", y = pathway)) +   geom_tile(aes(fill = pathway_source), color = \"black\") +   scale_fill_pander() +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line.x = element_blank(),     axis.text.x = element_blank(),     axis.ticks.x = element_blank(),     axis.line.y = element_blank(), legend.position = \"left\", strip.background = element_blank(), strip.text = element_blank()   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 2)   ) +   facet_grid(Category ~ ., scales = \"free\", space = \"free\") +   labs(y = NULL, x = NULL, fill = \"Pathway Source\")   p2 <- pth_df %>%   group_by(pathway) %>%   mutate(Score_scaled = scale(Score)[, 1]) %>%   ggplot(aes(x = pseudotime, y = pathway)) +   geom_tile(aes(fill = Score_scaled)) +   facet_grid(Category ~ lineage, scales = \"free\", space = \"free\") +   scale_fill_viridis_c(option = \"inferno\", limits = c(-2, 2), oob = scales::squish) +   # scale_fill_gradient2(low = scales::muted(\"blue\"), high = scales::muted(\"red\"), limits = c(-1, 2), oob = scales::squish,   # labels = c(-1, 0, 1, 2), breaks = c(-1, 0, 1, 2)) +   theme(     axis.text.x = element_blank(),     axis.ticks = element_blank(), axis.line = element_blank(),     strip.background = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     legend.position = \"bottom\",     strip.text.y = element_text(hjust = 0, angle = 0)   ) +   scale_x_continuous(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(x = \"Histotime\", y = NULL, fill = \"Expression\") +   guides(fill = guide_colorbar(keywidth = 3, keyheight = 0.4)) # ggsave(p1, file = here(\"plots\", \"histotime_signature_heatplot.pdf\"), width = 5, height = 6)   sig_heatplot <-   free(     (p1 +       theme(plot.margin = margin(l = 0.25, r = 1, unit = \"mm\"))),     type = \"space\", side = \"b\"   ) +     free(       (p2 +         theme(plot.margin = margin(r = 0.25, unit = \"mm\"), axis.text.y = element_blank(), axis.ticks.y = element_blank())),       type = \"label\", side = \"b\"     ) +     plot_layout(guides = \"collect\", ncol = 2, widths = c(0.03, 1)) +     plot_annotation(theme = theme(legend.position = \"bottom\")) &     theme(       panel.spacing = unit(1, \"mm\"),       panel.border = element_rect(fill = NA, color = \"black\", linewidth = 0.5),       legend.box.margin = margin(), legend.title.position = \"top\", legend.title = element_text(hjust = 0.5)     ) &     coord_cartesian(clip = \"off\") ggsave(sig_heatplot, file = here(\"plots\", \"histotime_signature_heatmap.pdf\"), width = 5, height = 6) sig_heatplot"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Histoviolins","title":null,"text":"Weights cells lineage along psuedotime  rescale within core luad branch approximate luad dedifferentiation score.  Overlap branches?","code":"srt_ti <- AddMetaData(srt_ti, slingCurveWeights(sce_ti)) srt_ti$lineage_probability <- srt_ti$Lineage2 - srt_ti$Lineage1 srt_ti$lineage_sum <- srt_ti$Lineage2 + srt_ti$Lineage1  srt_ti$lineage_probability2 <- srt_ti$lineage_probability * srt_ti$histotime srt_ti$lin_leaning <- abs(srt_ti$lineage_probability2) > 0.05  srt_ti$lineage_lean_05 <- srt_ti@meta.data %>%   mutate(lineage_lean = case_when(     abs(lineage_probability2) <= 0.05 ~ \"LUAD\",     lineage_probability2 > 0 ~ \"SCLC\",     lineage_probability2 < 0 ~ \"LUSC\",     .default = \"ERROR\"   )) %>%   pull(lineage_lean)  srt_ti$lineage_lean_20 <- srt_ti@meta.data %>%   mutate(lineage_lean = case_when(     abs(lineage_probability2) <= 0.2 ~ \"LUAD\",     lineage_probability2 > 0 ~ \"SCLC\",     lineage_probability2 < 0 ~ \"LUSC\",     .default = \"ERROR\"   )) %>%   pull(lineage_lean) p_lineage_prop <- srt_ti@meta.data %>%   add_count(sample_id, name = \"denom\") %>%   add_count(sample_id, lineage_lean_20, name = \"numer\") %>%   mutate(prop = numer / denom) %>%   # filter(n >= 20) %>%   distinct(sample_id, time_point, lineage_lean_20, prop, numer, denom, histology_predominant_short) %>%   # mutate(time_point = fct_recode(time_point, \"PD\" = \"Progression\")) %>%   # left_join(sample_meta) %>%   complete(lineage_lean_20, nesting(sample_id, time_point, histology_predominant_short), fill = list(prop = 0)) %>%   mutate(histology_predominant_short = fct_relevel(histology_predominant_short, \"LUAD\", \"LUSC\", \"SCLC\", \"Poorly Diff.\")) %>%   arrange((histology_predominant_short)) %>%   ggplot(aes(x = time_point, y = prop)) +   see::geom_jitter2(aes(color = histology_predominant_short), alpha = 0.8, width = 0.35) +   facet_nested(. ~ lineage_lean_20, scales = \"free\", space = \"free\", switch = \"x\") +   scale_color_manual(values = colors$histology_predominant_short) +   ggpubr::geom_pwc(tip.length = 0, symnum.args = symnum.args, label = \"p.adj.signif\", p.adjust.method = \"BH\", label.size = 3) +   scale_y_continuous(breaks = seq(0, 1, by = 0.25), expand = expansion(mult = c(0.05, 0.1))) +   guides(     x = guide_axis(cap = \"both\"),     y = guide_axis(cap = \"both\")   ) +   labs(color = \"Clinical Histology\") +   theme(     strip.background.x = element_part_rect(side = \"t\", fill = NA), strip.placement = \"outside\",     axis.title.y = element_text(hjust = 0.3)   ) +   labs(x = NULL, y = \"Proportion\\nCommitted\\n(>20%)\") # ggsave(p_lineage_prop, file = here(\"plots\", \"lineage_prop_jitter_v2.pdf\"), width = 6, height = 2.5) p_lineage_prop m <- p_lineage_prop$data %>%   pivot_wider(id_cols = \"sample_id\", names_from = lineage_lean_20, values_from = prop) %>%   column_to_rownames(\"sample_id\") %>%   as.matrix()  scrna_histo <- apply(m, MARGIN = 1, FUN = function(x) {   colnames(m)[which(x == max(x))] }) %>%   enframe(name = \"sample_id\", value = \"scrna_histology\")  srt_ti$scrna_histo <- scrna_histo$scrna_histology[match(srt_ti$sample_id, scrna_histo$sample_id)] # quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))  srt_ti@meta.data %>%   filter(lineage_assignment == \"LUAD\") %>%   ggplot(aes(x = pseudotime_scaled)) +   geom_histogram(bins = 50) +   geom_vline(xintercept = quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))) srt_ti@meta.data %>%   ggplot(aes(x = lineage_assignment, y = pseudotime_scaled, fill = lineage_assignment)) +   geom_violin() +   scale_fill_manual(values = colors$histology_predominant_short) +   geom_hline(yintercept = quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))) srt_ti$luad_dediff <- srt_ti$pseudotime_scaled cuts <- quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))  srt_ti$luad_dediff[srt_ti$luad_dediff < cuts[1]] <- cuts[1] srt_ti$luad_dediff[srt_ti$luad_dediff > cuts[2]] <- cuts[2]  srt_ti$luad_dediff <- standardize(srt_ti$luad_dediff) p_linprob_dediff <- srt_ti@meta.data %>%   arrange(desc(abs(luad_dediff))) %>%   # filter(lineage_assignment == \"LUAD\") %>%   ggplot(aes(x = fct_reorder(sample_id, (lineage_probability2), mean), y = luad_dediff)) +   geom_quasirandom(size = 0.01, bandwidth = 3, aes(color = luad_dediff)) +   guides(     x = guide_axis(angle = 90),     color = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_color_viridis_c(option = \"inferno\", breaks = c(0, 0.5, 1)) +   labs(x = \"Sample ID\", y = \"Dediff.\\nScore \", color = \"Dediff.\\nScore\") +   theme(     strip.background = element_blank(),     axis.line = element_blank(),     panel.border = element_rect(linewidth = 1, fill = NA, color = \"black\")   )  p_linprob_dediff <- ggrastr::rasterise(p_linprob_dediff, layers = \"Point\", dpi = 300) p_linprob_dediff # Of the possibly committed cells how much go each way in each sample p_linprob_vln <- srt_ti@meta.data %>%   arrange(desc(abs(lineage_probability2))) %>%   ggplot(aes(x = fct_reorder(sample_id, (lineage_probability2), mean), y = lineage_probability2)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\", alpha = 1) +   geom_quasirandom(size = 0.01, bandwidth = 2, aes(color = lineage_probability2)) +   guides(     x = guide_axis(angle = 90),     color = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1), labels = c(\"LUSC\", \"LUAD\", \"SCLC\")) +   # scale_color_viridis_c(option = \"turbo\", breaks = c(-1, 1), labels = c(\"LUSC\", \"SCLC\")) +   scale_color_gradient2(high = colors$histology_predominant_short[[\"SCLC\"]], low = colors$histology_predominant_short[[\"LUSC\"]], mid = colors$histology_predominant_short[[\"LUAD\"]], breaks = c(-1, -0.5, 0, 0.5, 1), limits = c(-1, 1), labels = c(\"LUSC\", \"\", \"LUAD\", \"\", \"SCLC\")) +   # colorspace::scale_color_continuous_divergingx(palette = \"roma\", breaks = c(-1, -0.5, 0, 0.5, 1), labels = c(\"LUSC\", \"\", \"LUAD\", \"\", \"SCLC\")) +   theme(     strip.background = element_blank(),     axis.line = element_blank(),     panel.border = element_rect(linewidth = 1, fill = NA, color = \"black\")   ) +   labs(x = \"Sample ID\", y = \"Lineage\\nCommitment\", color = \"Lineage\")  p_linprob_vln <- ggrastr::rasterise(p_linprob_vln, layers = \"Point\", dpi = 300) p_linprob_vln tb_pad <- 0.25  library(ggnewscale)  samp_order <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   mutate(sample_id = fct_reorder(sample_id, lineage_probability2, mean)) %>%   pull(sample_id) %>%   levels()  anno_df <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   distinct(sample_id, mapk_alt, tp53mut, rb1mut, site_of_tissue_simple, histology_predominant_short, scrna_histology, stage_of_tissue_simple, time_point, has_impact) %>%   mutate(site_of_tissue_simple = factor(site_of_tissue_simple, levels = names(colors$site_of_tissue_simple))) %>%   mutate(has_impact = as.logical(has_impact)) anno_df$tp53mut[!anno_df$has_impact] <- \"NA\" anno_df$mapk_alt[anno_df$time_point %in% c(\"TN\", \"MRD\")] <- \"NA\" anno_df$rb1mut[!anno_df$has_impact] <- \"NA\" anno_df$mapk_alt[anno_df$sample_id == \"PD20\"] <- \"Unknown\"  p_anno <- anno_df %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_tile(aes(y = \"Clinical Histology\", fill = histology_predominant_short), color = \"black\") +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant_short,     guide = guide_legend(order = 1, keywidth = 0.4, keyheight = 0.5, ncol = 2, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"scRNA Histology\", fill = scrna_histology), color = \"black\") +   scale_fill_manual(     name = \"scRNA Histology\", values = colors$histology_predominant_short,     guide = guide_legend(order = 2, keywidth = 0.4, keyheight = 0.5, ncol = 1, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"Tumor Stage\", fill = stage_of_tissue_simple), color = \"black\") +   scale_fill_viridis_d(     name = \"Tumor Stage\",     guide = guide_legend(order = 3, keywidth = 0.4, keyheight = 0.5, ncol = 2, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"Tissue Site\", fill = site_of_tissue_simple), color = \"black\") +   scale_fill_manual(     name = \"Tissue Site\",     values = colors$site_of_tissue_simple,     guide = guide_legend(order = 4, keywidth = 0.4, keyheight = 0.5, ncol = 2, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"TP53mut\", fill = tp53mut), color = \"black\") +   scale_fill_manual(     name = \"Alterations\",     values = c(\"TRUE\" = \"black\", \"FALSE\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"TRUE\", \"FALSE\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\"),     guide = guide_legend(order = 5, keywidth = 0.4, keyheight = 0.1, ncol = 1, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"RB1mut\", fill = rb1mut), color = \"black\", show.legend = F) +   scale_fill_manual(     values = c(\"TRUE\" = \"black\", \"FALSE\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"TRUE\", \"FALSE\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\"),     guide = \"none\"   ) +   new_scale_fill() +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), color = \"black\", show.legend = F) +   scale_fill_manual(     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"TRUE\", \"FALSE\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\"),     guide = \"none\"   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   theme_minimal() +   theme(panel.background = element_blank(), panel.grid = element_blank()) +   # guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, ncol = 2)) +   theme(strip.text = element_blank(), legend.title = element_text(hjust = 0.5), axis.text.y = element_text(size = 8)) +   labs(fill = \"Tissue Site\", y = NULL) +   scale_y_discrete(limits = rev(c(     \"Clinical Histology\",     \"scRNA Histology\",     \"Tumor Stage\",     \"Tissue Site\",     \"TP53mut\",     \"RB1mut\",     \"MAPKalt\"   )))  p_prop05 <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = lineage_lean_05), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Proportion\\nLeaning\\n(>5%)\", x = NULL, fill = \"Lineage\") +   scale_y_continuous(expand = c(0, 0)) +   theme(     strip.text = element_blank(),     axis.text.x = element_blank(),     axis.line.x = element_blank(),     axis.ticks.x = element_blank(),     axis.title.y = element_text(angle = 0, vjust = 0.5)   ) +   scale_y_continuous(breaks = c(0, 0.5, 1))  p_branch_prop <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = fct_relevel(lineage_assignment, names(colors$histology_predominant_short))), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Proportion\\n(In branch)\", x = NULL, fill = \"Lineage\") +   scale_y_continuous(expand = c(0, 0)) +   theme(     strip.text = element_blank(),     axis.text.x = element_blank(),     axis.line.x = element_blank(),     axis.ticks.x = element_blank(),     axis.title.y = element_text(angle = 0, vjust = 0.5)   ) +   scale_y_continuous(breaks = c(0, 0.5, 1))  lean_prop <- 0.01  p_lean <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   mutate(lineage_lean = case_when(     abs(lineage_probability2) <= lean_prop ~ \"LUAD\",     lineage_probability2 > 0 ~ \"SCLC\",     lineage_probability2 < 0 ~ \"LUSC\",     .default = \"ERROR\"   )) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = lineage_lean), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = glue(\"Proportion\\nLeaning\"), x = NULL, fill = \"Lineage\")    p_prop20 <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = lineage_lean_20), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Proportion\\nCommitted\\n(>20%)\", x = NULL, fill = \"Lineage\")  p_epi_type_prop <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = cell_type_epi), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$cell_type_epi) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Epithelial Type\\nProportion\", x = NULL, fill = \"Epithelial Type\")  p_prop <- free(p_branch_prop, type = \"label\", side = \"l\") + free(p_lean, type = \"label\", side = \"l\") +   free(p_epi_type_prop, type = \"label\", side = \"l\") +   plot_layout(ncol = 1, guides = \"collect\") &   theme(     strip.text = element_blank(),     axis.text.x = element_blank(),     axis.line.x = element_blank(),     axis.ticks.x = element_blank(),     axis.title.y = element_text(angle = 0, vjust = 0.5, size = 8),     axis.text.y = element_text(size = 8)   ) &   scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1))  pcomb <-   free((p_linprob_vln + labs(x = NULL) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), plot.margin = margin(t = tb_pad, b = 0, unit = \"lines\"))), type = \"label\", side = \"l\") +   free((p_linprob_dediff + labs(x = NULL) + theme(strip.text = element_blank(), strip.background = element_blank(), axis.lines = element_blank(), strip.clip = \"off\", panel.border = element_rect(fill = NA), axis.text.x = element_blank(), axis.ticks.x = element_blank(), plot.margin = margin(t = tb_pad, b = 0, unit = \"lines\"))), type = \"label\", side = \"l\") +   free((p_prop + theme(plot.margin = margin())), type = \"label\", side = \"l\") + (p_anno + labs(x = \"Sample ID\") + theme(plot.margin = margin(t = 0, b = tb_pad, unit = \"lines\")) + guides(x = guide_axis(angle = 90))) + plot_layout(ncol = 1, heights = c(1, 1, 1.3, 0.6)) ggsave(pcomb, file = here(\"plots\", \"lineage_prob_dotviolin_anno.pdf\"), width = 11, height = 8) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Histotime weights","title":null,"text":"Weights cells lineage along psuedotime","code":"srt_ti <- AddMetaData(srt_ti, slingCurveWeights(sce_ti)) srt_ti$lineage_probability <- srt_ti$Lineage2 - srt_ti$Lineage1 srt_ti$lineage_sum <- srt_ti$Lineage2 + srt_ti$Lineage1  srt_ti$lineage_probability2 <- srt_ti$lineage_probability * srt_ti$histotime"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Leaning cell assignment","title":null,"text":"","code":"srt_ti$lin_leaning <- abs(srt_ti$lineage_probability2) > 0.05  srt_ti$lineage_lean_05 <- srt_ti@meta.data %>%   mutate(lineage_lean = case_when(     abs(lineage_probability2) <= 0.05 ~ \"LUAD\",     lineage_probability2 > 0 ~ \"SCLC\",     lineage_probability2 < 0 ~ \"LUSC\",     .default = \"ERROR\"   )) %>%   pull(lineage_lean)  srt_ti$lineage_lean_20 <- srt_ti@meta.data %>%   mutate(lineage_lean = case_when(     abs(lineage_probability2) <= 0.2 ~ \"LUAD\",     lineage_probability2 > 0 ~ \"SCLC\",     lineage_probability2 < 0 ~ \"LUSC\",     .default = \"ERROR\"   )) %>%   pull(lineage_lean)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Proportion plot summarized","title":null,"text":"","code":"p_lineage_prop <- srt_ti@meta.data %>%   add_count(sample_id, name = \"denom\") %>%   add_count(sample_id, lineage_lean_20, name = \"numer\") %>%   mutate(prop = numer / denom) %>%   # filter(n >= 20) %>%   distinct(sample_id, time_point, lineage_lean_20, prop, numer, denom, histology_predominant_short) %>%   # mutate(time_point = fct_recode(time_point, \"PD\" = \"Progression\")) %>%   # left_join(sample_meta) %>%   complete(lineage_lean_20, nesting(sample_id, time_point, histology_predominant_short), fill = list(prop = 0)) %>%   mutate(histology_predominant_short = fct_relevel(histology_predominant_short, \"LUAD\", \"LUSC\", \"SCLC\", \"Poorly Diff.\")) %>%   arrange((histology_predominant_short)) %>%   ggplot(aes(x = time_point, y = prop)) +   see::geom_jitter2(aes(color = histology_predominant_short), alpha = 0.8, width = 0.35) +   facet_nested(. ~ lineage_lean_20, scales = \"free\", space = \"free\", switch = \"x\") +   scale_color_manual(values = colors$histology_predominant_short) +   ggpubr::geom_pwc(tip.length = 0, symnum.args = symnum.args, label = \"p.adj.signif\", p.adjust.method = \"BH\", label.size = 3) +   scale_y_continuous(breaks = seq(0, 1, by = 0.25), expand = expansion(mult = c(0.05, 0.1))) +   guides(     x = guide_axis(cap = \"both\"),     y = guide_axis(cap = \"both\")   ) +   labs(color = \"Clinical Histology\") +   theme(     strip.background.x = element_part_rect(side = \"t\", fill = NA), strip.placement = \"outside\",     axis.title.y = element_text(hjust = 0.3)   ) +   labs(x = NULL, y = \"Proportion\\nCommitted\\n(>20%)\") # ggsave(p_lineage_prop, file = here(\"plots\", \"lineage_prop_jitter_v2.pdf\"), width = 6, height = 2.5) p_lineage_prop m <- p_lineage_prop$data %>%   pivot_wider(id_cols = \"sample_id\", names_from = lineage_lean_20, values_from = prop) %>%   column_to_rownames(\"sample_id\") %>%   as.matrix()  scrna_histo <- apply(m, MARGIN = 1, FUN = function(x) {   colnames(m)[which(x == max(x))] }) %>%   enframe(name = \"sample_id\", value = \"scrna_histology\")  srt_ti$scrna_histo <- scrna_histo$scrna_histology[match(srt_ti$sample_id, scrna_histo$sample_id)]"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Dedifferentiation score","title":null,"text":"rescale within core luad branch approximate luad dedifferentiation score.  Overlap branches?","code":"# quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))  srt_ti@meta.data %>%   filter(lineage_assignment == \"LUAD\") %>%   ggplot(aes(x = pseudotime_scaled)) +   geom_histogram(bins = 50) +   geom_vline(xintercept = quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))) srt_ti@meta.data %>%   ggplot(aes(x = lineage_assignment, y = pseudotime_scaled, fill = lineage_assignment)) +   geom_violin() +   scale_fill_manual(values = colors$histology_predominant_short) +   geom_hline(yintercept = quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))) srt_ti$luad_dediff <- srt_ti$pseudotime_scaled cuts <- quantile(srt_ti@meta.data[srt_ti$lineage_assignment == \"LUAD\", ]$pseudotime_scaled, prob = c(0.05, 0.99))  srt_ti$luad_dediff[srt_ti$luad_dediff < cuts[1]] <- cuts[1] srt_ti$luad_dediff[srt_ti$luad_dediff > cuts[2]] <- cuts[2]  srt_ti$luad_dediff <- standardize(srt_ti$luad_dediff) p_linprob_dediff <- srt_ti@meta.data %>%   arrange(desc(abs(luad_dediff))) %>%   # filter(lineage_assignment == \"LUAD\") %>%   ggplot(aes(x = fct_reorder(sample_id, (lineage_probability2), mean), y = luad_dediff)) +   geom_quasirandom(size = 0.01, bandwidth = 3, aes(color = luad_dediff)) +   guides(     x = guide_axis(angle = 90),     color = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_color_viridis_c(option = \"inferno\", breaks = c(0, 0.5, 1)) +   labs(x = \"Sample ID\", y = \"Dediff.\\nScore \", color = \"Dediff.\\nScore\") +   theme(     strip.background = element_blank(),     axis.line = element_blank(),     panel.border = element_rect(linewidth = 1, fill = NA, color = \"black\")   )  p_linprob_dediff <- ggrastr::rasterise(p_linprob_dediff, layers = \"Point\", dpi = 300) p_linprob_dediff"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Lineage committment violin","title":null,"text":"","code":"# Of the possibly committed cells how much go each way in each sample p_linprob_vln <- srt_ti@meta.data %>%   arrange(desc(abs(lineage_probability2))) %>%   ggplot(aes(x = fct_reorder(sample_id, (lineage_probability2), mean), y = lineage_probability2)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\", alpha = 1) +   geom_quasirandom(size = 0.01, bandwidth = 2, aes(color = lineage_probability2)) +   guides(     x = guide_axis(angle = 90),     color = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1), labels = c(\"LUSC\", \"LUAD\", \"SCLC\")) +   # scale_color_viridis_c(option = \"turbo\", breaks = c(-1, 1), labels = c(\"LUSC\", \"SCLC\")) +   scale_color_gradient2(high = colors$histology_predominant_short[[\"SCLC\"]], low = colors$histology_predominant_short[[\"LUSC\"]], mid = colors$histology_predominant_short[[\"LUAD\"]], breaks = c(-1, -0.5, 0, 0.5, 1), limits = c(-1, 1), labels = c(\"LUSC\", \"\", \"LUAD\", \"\", \"SCLC\")) +   # colorspace::scale_color_continuous_divergingx(palette = \"roma\", breaks = c(-1, -0.5, 0, 0.5, 1), labels = c(\"LUSC\", \"\", \"LUAD\", \"\", \"SCLC\")) +   theme(     strip.background = element_blank(),     axis.line = element_blank(),     panel.border = element_rect(linewidth = 1, fill = NA, color = \"black\")   ) +   labs(x = \"Sample ID\", y = \"Lineage\\nCommitment\", color = \"Lineage\")  p_linprob_vln <- ggrastr::rasterise(p_linprob_vln, layers = \"Point\", dpi = 300) p_linprob_vln"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"Merged violin","title":null,"text":"","code":"tb_pad <- 0.25  library(ggnewscale)  samp_order <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   mutate(sample_id = fct_reorder(sample_id, lineage_probability2, mean)) %>%   pull(sample_id) %>%   levels()  anno_df <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   distinct(sample_id, mapk_alt, tp53mut, rb1mut, site_of_tissue_simple, histology_predominant_short, scrna_histology, stage_of_tissue_simple, time_point, has_impact) %>%   mutate(site_of_tissue_simple = factor(site_of_tissue_simple, levels = names(colors$site_of_tissue_simple))) %>%   mutate(has_impact = as.logical(has_impact)) anno_df$tp53mut[!anno_df$has_impact] <- \"NA\" anno_df$mapk_alt[anno_df$time_point %in% c(\"TN\", \"MRD\")] <- \"NA\" anno_df$rb1mut[!anno_df$has_impact] <- \"NA\" anno_df$mapk_alt[anno_df$sample_id == \"PD20\"] <- \"Unknown\"  p_anno <- anno_df %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_tile(aes(y = \"Clinical Histology\", fill = histology_predominant_short), color = \"black\") +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant_short,     guide = guide_legend(order = 1, keywidth = 0.4, keyheight = 0.5, ncol = 2, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"scRNA Histology\", fill = scrna_histology), color = \"black\") +   scale_fill_manual(     name = \"scRNA Histology\", values = colors$histology_predominant_short,     guide = guide_legend(order = 2, keywidth = 0.4, keyheight = 0.5, ncol = 1, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"Tumor Stage\", fill = stage_of_tissue_simple), color = \"black\") +   scale_fill_viridis_d(     name = \"Tumor Stage\",     guide = guide_legend(order = 3, keywidth = 0.4, keyheight = 0.5, ncol = 2, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"Tissue Site\", fill = site_of_tissue_simple), color = \"black\") +   scale_fill_manual(     name = \"Tissue Site\",     values = colors$site_of_tissue_simple,     guide = guide_legend(order = 4, keywidth = 0.4, keyheight = 0.5, ncol = 2, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"TP53mut\", fill = tp53mut), color = \"black\") +   scale_fill_manual(     name = \"Alterations\",     values = c(\"TRUE\" = \"black\", \"FALSE\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"TRUE\", \"FALSE\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\"),     guide = guide_legend(order = 5, keywidth = 0.4, keyheight = 0.1, ncol = 1, position = \"bottom\", title.position = \"top\")   ) +   new_scale_fill() +   geom_tile(aes(y = \"RB1mut\", fill = rb1mut), color = \"black\", show.legend = F) +   scale_fill_manual(     values = c(\"TRUE\" = \"black\", \"FALSE\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"TRUE\", \"FALSE\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\"),     guide = \"none\"   ) +   new_scale_fill() +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), color = \"black\", show.legend = F) +   scale_fill_manual(     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"TRUE\", \"FALSE\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\"),     guide = \"none\"   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   theme_minimal() +   theme(panel.background = element_blank(), panel.grid = element_blank()) +   # guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, ncol = 2)) +   theme(strip.text = element_blank(), legend.title = element_text(hjust = 0.5), axis.text.y = element_text(size = 8)) +   labs(fill = \"Tissue Site\", y = NULL) +   scale_y_discrete(limits = rev(c(     \"Clinical Histology\",     \"scRNA Histology\",     \"Tumor Stage\",     \"Tissue Site\",     \"TP53mut\",     \"RB1mut\",     \"MAPKalt\"   )))  p_prop05 <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = lineage_lean_05), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Proportion\\nLeaning\\n(>5%)\", x = NULL, fill = \"Lineage\") +   scale_y_continuous(expand = c(0, 0)) +   theme(     strip.text = element_blank(),     axis.text.x = element_blank(),     axis.line.x = element_blank(),     axis.ticks.x = element_blank(),     axis.title.y = element_text(angle = 0, vjust = 0.5)   ) +   scale_y_continuous(breaks = c(0, 0.5, 1))  p_branch_prop <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = fct_relevel(lineage_assignment, names(colors$histology_predominant_short))), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Proportion\\n(In branch)\", x = NULL, fill = \"Lineage\") +   scale_y_continuous(expand = c(0, 0)) +   theme(     strip.text = element_blank(),     axis.text.x = element_blank(),     axis.line.x = element_blank(),     axis.ticks.x = element_blank(),     axis.title.y = element_text(angle = 0, vjust = 0.5)   ) +   scale_y_continuous(breaks = c(0, 0.5, 1))  lean_prop <- 0.01  p_lean <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   mutate(lineage_lean = case_when(     abs(lineage_probability2) <= lean_prop ~ \"LUAD\",     lineage_probability2 > 0 ~ \"SCLC\",     lineage_probability2 < 0 ~ \"LUSC\",     .default = \"ERROR\"   )) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = lineage_lean), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = glue(\"Proportion\\nLeaning\"), x = NULL, fill = \"Lineage\")    p_prop20 <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = lineage_lean_20), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$histology_predominant_short) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Proportion\\nCommitted\\n(>20%)\", x = NULL, fill = \"Lineage\")  p_epi_type_prop <- srt_ti@meta.data %>%   filter(!is.na(lineage_probability2)) %>%   ggplot(aes(x = fct_relevel(sample_id, samp_order))) +   geom_bar(aes(fill = cell_type_epi), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_fill_manual(values = colors$cell_type_epi) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"both\"),     fill = guide_legend(keywidth = 0.4, keyheight = 0.4)   ) +   labs(y = \"Epithelial Type\\nProportion\", x = NULL, fill = \"Epithelial Type\")  p_prop <- free(p_branch_prop, type = \"label\", side = \"l\") + free(p_lean, type = \"label\", side = \"l\") +   free(p_epi_type_prop, type = \"label\", side = \"l\") +   plot_layout(ncol = 1, guides = \"collect\") &   theme(     strip.text = element_blank(),     axis.text.x = element_blank(),     axis.line.x = element_blank(),     axis.ticks.x = element_blank(),     axis.title.y = element_text(angle = 0, vjust = 0.5, size = 8),     axis.text.y = element_text(size = 8)   ) &   scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1))  pcomb <-   free((p_linprob_vln + labs(x = NULL) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), plot.margin = margin(t = tb_pad, b = 0, unit = \"lines\"))), type = \"label\", side = \"l\") +   free((p_linprob_dediff + labs(x = NULL) + theme(strip.text = element_blank(), strip.background = element_blank(), axis.lines = element_blank(), strip.clip = \"off\", panel.border = element_rect(fill = NA), axis.text.x = element_blank(), axis.ticks.x = element_blank(), plot.margin = margin(t = tb_pad, b = 0, unit = \"lines\"))), type = \"label\", side = \"l\") +   free((p_prop + theme(plot.margin = margin())), type = \"label\", side = \"l\") + (p_anno + labs(x = \"Sample ID\") + theme(plot.margin = margin(t = 0, b = tb_pad, unit = \"lines\")) + guides(x = guide_axis(angle = 90))) + plot_layout(ncol = 1, heights = c(1, 1, 1.3, 0.6)) ggsave(pcomb, file = here(\"plots\", \"lineage_prob_dotviolin_anno.pdf\"), width = 11, height = 8) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"TP53mut TN","title":null,"text":"","code":"p <- srt_ti@meta.data %>%   mutate(TP53mut = case_when(     has_impact == F ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   filter(time_point == \"TN\" & TP53mut != \"NA\") %>%   ggplot(aes(x = fct_rev(TP53mut), y = luad_dediff)) +   geom_violin(scale = \"width\", aes(fill = TP53mut), show.legend = F) +   scale_fill_manual(values = rev(pal_aaas()(2))) +   geom_boxplot(width = 0.2, outliers = F) +   scale_y_continuous(breaks = c(0, 0.5, 1)) +   guides(     y = guide_axis(cap = \"both\"),     x = guide_axis(cap = \"both\")   ) +   ggpubr::geom_pwc(label = \"p.signif\", tip.length = 0, vjust = 0.5) +   coord_cartesian(clip = \"off\") +   labs(x = \"Treatment Naive\", y = \"LUAD dedifferentiation\") ggsave(p, file = here(\"plots\", \"TP53mut_TN_luad_dediff.pdf\"), width = 1.75, height = 2) p srt_epi <- readRDS(here(\"paper_data\", \"egfr_epi.rds\")) srt_meta <- readRDS(here(\"paper_data\", \"egfr_cohort.rds\"))@meta.data  prop_df <- srt_meta %>%   filter(is_tumor_cell == \"TRUE\") %>%   mutate(TP53mut = case_when(     has_impact == F ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   filter(time_point == \"TN\" & TP53mut != \"NA\", is_tumor_cell == \"TRUE\") %>%   add_count(sample_id, name = \"n_samp\") %>%   add_count(sample_id, cell_type_epi, name = \"n_ct\") %>%   mutate(prop = n_ct / n_samp) %>%   distinct(sample_id, TP53mut, cell_type_epi, prop)  p <- prop_df %>%   ggplot(aes(x = fct_relevel(cell_type_epi, names(colors$cell_type_epi)), y = prop)) +   stat_summary(geom = \"bar\", fun = \"median\", aes(fill = fct_rev(TP53mut)), position = position_dodge(width = 1)) +   geom_errorbar(aes(group = fct_rev(TP53mut)),     stat = \"summary\", color = \"black\", alpha = 0.75, width = 0.5,     fun.min = function(z) {       quantile(z, 0.25)     },     fun.max = function(z) {       quantile(z, 0.75)     },     fun = median, position = position_dodge(width = 1)   ) +   guides(x = guide_axis(angle = 90)) +   scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +   labs(y = \"Median Proportion\", x = \"Epithelial Cell State\", fill = \"TP53 status\") +   scale_fill_aaas() ggsave(p, file = here(\"plots\", \"TP53mut_TN_epi_type_proportions.pdf\"), width = 6, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/23_histotime.html","id":null,"dir":"Articles","previous_headings":"","what":"MAPKalt PD","title":null,"text":"","code":"p <- srt_ti@meta.data %>%   filter(time_point == \"PD\" & mapk_alt != \"NA\") %>%   ggplot(aes(x = fct_rev(mapk_alt), y = luad_dediff)) +   geom_violin(scale = \"width\", aes(fill = mapk_alt), show.legend = F) +   scale_fill_manual(values = rev(pal_aaas()(2))) +   geom_boxplot(width = 0.2, outliers = F) +   scale_y_continuous(breaks = c(0, 0.5, 1)) +   guides(     y = guide_axis(cap = \"both\"),     x = guide_axis(cap = \"both\")   ) +   ggpubr::geom_pwc(label = \"p.signif\", tip.length = 0, vjust = 0.5) +   coord_cartesian(clip = \"off\") +   labs(x = \"Progressive Disease\", y = \"LUAD dedifferentiation\") ggsave(p, file = here(\"plots\", \"MAPKalt_PD_luad_dediff.pdf\"), width = 1.75, height = 2) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/31_impact_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Load data","title":null,"text":"","code":"onco_dat <- read_excel(here(\"paper_data\", \"supplemental_tables.xlsx\"), sheet = \"Table S2 - IMPACT Mutations\") metadata <- read_excel(here(\"paper_data\", \"supplemental_tables.xlsx\"), sheet = \"Table S1 - Cohort Metadata\") %>%   as.data.frame() metadata$facets_fga <- as.numeric(metadata$facets_fga) metadata$facets_ploidy <- as.numeric(metadata$facets_ploidy) metadata$facets_purity <- as.numeric(metadata$facets_purity) metadata$facets_frac_loh <- as.numeric(metadata$facets_frac_loh) metadata$facets_wgd <- as.logical(metadata$facets_wgd) metadata$time_point <- fct_relevel(metadata$time_point, \"TN\", \"MRD\", \"PD\")  # Missing the linker so load the metadata meta_tmp <- read.table(file = here(\"paper_data\", \"metadata_update_mar_2025.txt\"), header = T, sep = \"\\t\", quote = \"\\\"\")  impact_data <- readRDS(here(\"paper_data\", \"impact_data.rds\"))  meta_tmp$tmb <- as.numeric(impact_data$clin_dat_sample$CVR_TMB_SCORE[match(meta_tmp$dmp_sample, impact_data$clin_dat_sample$dmp_sample)])  metadata$tmb <- meta_tmp$tmb[match(metadata$sample_id_orig, meta_tmp$sample_id)]"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/31_impact_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Oncoprint","title":null,"text":"Prepare plotting Plot plot Plot save","code":"comut_mat <- onco_dat %>%   # filter(dmp_sample %in% onco_meta$dmp_sample) %>%   pivot_wider(id_cols = sample_id, names_from = gene, values_from = mutation_type_simple, values_fn = function(x) paste0(x, collapse = \";\"), values_fill = \"\") %>%   column_to_rownames(\"sample_id\") %>%   as.matrix() %>%   t()  comut_mat_final <- comut_mat  # Reorder metadata rownames(metadata) <- metadata$sample_id metadata <- metadata[colnames(comut_mat_final), ]  mut_pal <- c(   \"Missense Mutation\" = \"#1C91D4\",   \"Nonsense Mutation\" = \"#D5C711\",   \"Deep Deletion\" = \"blue\",   \"Amplification\" = \"red\",   \"Frameshift Indel\" = \"#D55E00\",   \"Inframe Indel\" = \"#CC79A7\",   \"RNA Fusion\" = \"#F0E442\",   \"Structural Variant\" = \"#56B4E9\",   \"Other\" = \"#007756\" ) alter_fun <- list(   background = alter_graphic(\"rect\", fill = \"#CCCCCC\"),   \"Amplification\" = alter_graphic(\"rect\", fill = mut_pal[\"Amplification\"]),   \"Deep Deletion\" = alter_graphic(\"rect\", fill = mut_pal[\"Deep Deletion\"]),   \"Missense Mutation\" = alter_graphic(\"rect\", height = 0.33, fill = mut_pal[\"Missense Mutation\"]),   \"Nonsense Mutation\" = alter_graphic(\"rect\", height = 0.33, fill = mut_pal[\"Nonsense Mutation\"]),   \"Frameshift Indel\" = alter_graphic(\"rect\", height = 0.33, fill = mut_pal[\"Frameshift Indel\"]),   \"Inframe Indel\" = alter_graphic(\"rect\", height = 0.33, fill = mut_pal[\"Inframe Indel\"]),   \"RNA Fusion\" = alter_graphic(\"rect\", height = 1, width = 0.33, fill = mut_pal[\"RNA Fusion\"]),   \"Structural Variant\" = alter_graphic(\"rect\", height = 0.33, fill = mut_pal[\"Structural Variant\"]),   \"Other\" = alter_graphic(\"rect\", height = 0.33, fill = mut_pal[\"Other\"]) )  anno_cols <- list(   \"timepoint\" = colors$time_point,   \"WGD\" = colors$tf,   \"FGA\" = circlize::colorRamp2(range(metadata$facets_fga, na.rm = T), hcl_palette = \"SunsetDark\", reverse = TRUE),   \"age\" = circlize::colorRamp2(range(metadata$age_at_intial_diagnosis, na.rm = T), hcl_palette = \"SunsetDark\", reverse = TRUE) )  tmb_breaks <- c(1, 10, 100)   top_anno <- HeatmapAnnotation(   na_col = colors$tf[[\"NA\"]],   annotation_name_side = \"left\",   annotation_label = c(     \"TMB\",     \"FGA\",     \"WGD\",     \"Age\",     \"Time point\"   ),   # cbar = anno_oncoprint_barplot(),   TMB = anno_barplot(     x = log10(metadata$tmb + 1),     axis_param = list(       at = log10(tmb_breaks + 1),       labels = tmb_breaks,       side = \"left\"     ),     ylim = c(log10(1), log10(100)),     border = FALSE,     baseline = 0   ),   FGA = metadata$facets_fga,   WGD = metadata$facets_wgd,   age = metadata$age_at_intial_diagnosis,   timepoint = anno_block(     gp = gpar(fill = colors$time_point),     labels = c(\"Treatment Naive\", \"MRD\", \"Progressive Disease\"),     labels_gp = gpar(col = \"white\", fontsize = 11)   ),   col = anno_cols ) min_mut_freq <- 0.05  # Get mutation frequencies mut_freq <- (apply(comut_mat_final, MARGIN = 1, function(x) sum(x != \"\")) / ncol(comut_mat_final)) %>%   sort(decreasing = T)  plot_genes <- names(which(mut_freq >= min_mut_freq)) ht <- oncoPrint(comut_mat_final[plot_genes, ],   right_annotation = rowAnnotation(     row_barplot = anno_oncoprint_barplot(show_fraction = T, border = F)   ),   top_annotation = top_anno,   column_split = metadata$time_point,   # row_names_side = \"left\",   column_title = NULL,   alter_fun = alter_fun,   col = mut_pal,   show_column_names = TRUE,   remove_empty_columns = FALSE,   # pct_side = \"right\",   column_title_rot = 0,   border = TRUE )  pdf(file = here(\"plots\", \"oncoprint.pdf\"), width = 15, height = 12) draw(ht) dev.off() png    2 suppressWarnings(ht)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/31_impact_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Summary statistics","title":null,"text":"","code":"my_comparisons <- list(c(\"TN\", \"MRD\"), c(\"TN\", \"PD\"), c(\"MRD\", \"PD\"))  mean_comp <- ggpubr::stat_compare_means(comparisons = my_comparisons, label = \"p.signif\", tip.length = 0, vjust = 0, size = 3)   p1 <- metadata %>%   ggplot(aes(x = time_point, y = tmb)) +   ggbeeswarm::geom_quasirandom(aes(color = time_point)) +   geom_boxplot(fill = NA, outlier.shape = NA, aes(color = time_point)) +   scale_y_log10(breaks = 10^(0:3)) +   theme_classic() +   mean_comp +   # stat_comp +   labs(x = \"Timepoint\", y = \"TMB (mut/Mb)\") +   scale_color_manual(values = anno_cols$timepoint) +   coord_cartesian(clip = \"off\", ylim = c(0.5, 100)) +   theme(legend.position = \"none\", plot.margin = margin(t = 2, unit = \"lines\"))  p2 <- metadata %>%   ggplot(aes(x = time_point, y = facets_fga)) +   ggbeeswarm::geom_quasirandom(aes(color = time_point)) +   geom_boxplot(fill = NA, outlier.shape = NA, aes(color = time_point)) +   # scale_y_log10(breaks = 10^(0:3), limits = c(min(onco_meta$CVR_TMB_SCORE), 100)) +   theme_classic() +   mean_comp +   labs(x = \"Timepoint\", y = \"Fraction genome altered\") +   scale_color_manual(values = anno_cols$timepoint) +   coord_cartesian(clip = \"off\", ylim = c(0, 1)) +   theme(legend.position = \"none\")  p3 <- metadata %>%   ggplot(aes(x = time_point, y = facets_ploidy)) +   ggbeeswarm::geom_quasirandom(aes(color = time_point)) +   geom_boxplot(fill = NA, outlier.shape = NA, aes(color = time_point)) +   # scale_y_continuous(trans = \"log2\") +   theme_classic() +   mean_comp +   labs(x = \"Timepoint\", y = \"Ploidy\") +   scale_color_manual(values = anno_cols$timepoint) +   coord_cartesian(clip = \"off\", ylim = c(1, 3.7)) +   theme(legend.position = \"none\")  p4 <- metadata %>%   ggplot(aes(x = time_point, y = facets_frac_loh)) +   ggbeeswarm::geom_quasirandom(aes(color = time_point)) +   geom_boxplot(fill = NA, outlier.shape = NA, aes(color = time_point)) +   # scale_y_log10(breaks = 10^(0:3), limits = c(min(onco_meta$CVR_TMB_SCORE), 100)) +   theme_classic() +   mean_comp +   labs(x = \"Timepoint\", y = \"Fraction genome LOH\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1)) +   scale_color_manual(values = anno_cols$timepoint) +   theme(legend.position = \"none\")   p5 <- metadata %>%   dplyr::count(time_point, facets_wgd) %>%   dplyr::filter(!is.na(facets_wgd)) %>%   group_by(time_point) %>%   add_tally(n) %>%   mutate(wgd_frac = n / nn) %>%   filter(facets_wgd == T) %>%   ggplot(aes(x = time_point, y = wgd_frac)) +   geom_col(aes(fill = time_point)) +   labs(y = \"Proportion of samples with WGD\", fill = \"Timepoint\") +   scale_fill_manual(values = anno_cols$timepoint) +   theme_classic()  pcomb <- (p1 | p2 | p3 | p4 | p5) + plot_layout(guides = \"collect\") & guides(x = guide_axis(angle = 0)) & labs(x = NULL) &   theme(plot.margin = margin(t = 1.5, 0.25, 0.25, 0.25, unit = \"lines\")) ggsave(pcomb, filename = here(\"plots\", \"impact_wgd.pdf\"), width = 11, height = 3) pcomb x <- (comut_mat_final != \"\") %>%   as.data.frame() %>%   rownames_to_column(var = \"Gene\") %>%   pivot_longer(cols = !Gene, names_to = \"sample_id\") %>%   left_join(metadata[, c(\"sample_id\", \"time_point\")]) %>%   group_by(Gene, time_point) %>%   mutate(     n_gene = sum(value),     n_tp = n_distinct(sample_id)   ) %>%   distinct(Gene, time_point, n_gene, n_tp) %>%   mutate(n_absent = n_tp - n_gene) %>%   filter(time_point != \"MRD\") %>%   pivot_wider(id_cols = \"Gene\", names_from = c(time_point), values_from = c(\"n_gene\", \"n_absent\"))  enrich_res <- map(c(\"TP53\", \"RB1\"), .f = function(gene) {   vals <- x[x$Gene == gene, 2:5]    mat <- matrix(c(vals[[2]], vals[[4]], vals[[1]], vals[[3]]),     nrow = 2,     dimnames = list(       PD = c(\"Mut\", \"Wt\"),       Pre = c(\"Mut\", \"Wt\")     )   )    res <- stats::fisher.test(mat) %>%     broom::tidy() %>%     mutate(Gene = gene)   return(res) }) %>%   list_rbind() %>%   arrange(p.value) %>%   rstatix::adjust_pvalue(method = \"BH\")   p <- enrich_res %>%   ggplot(aes(x = estimate, y = Gene)) +   geom_pointrange(aes(xmin = conf.low, xmax = conf.high)) +   geom_text(aes(label = glue(\"{scales::label_pvalue(accuracy = 0.0001, add_p=T)(p.value)}\")),     nudge_y = 0.35, size = 3.5   ) +   theme_classic(base_size = 16) +   scale_x_continuous(trans = \"log2\") +   labs(x = \"Odds Ratio\", title = \"Enrichment in PD\") +   geom_vline(xintercept = 1, linetype = \"22\") +   theme(panel.border = element_rect(fill = NA), axis.line = element_blank()) +   theme(plot.margin = margin(r = 1, 0.25, 0.25, 0.25, \"lines\"),         plot.title = element_text(hjust = 0.5, size = 10))  ggsave(p, file = here(\"plots\", \"egfr_prog_enrich.pdf\"), width = 2.5, height = 1.75)  p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/31_impact_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Enrichment PD vs TN","title":null,"text":"","code":"x <- (comut_mat_final != \"\") %>%   as.data.frame() %>%   rownames_to_column(var = \"Gene\") %>%   pivot_longer(cols = !Gene, names_to = \"sample_id\") %>%   left_join(metadata[, c(\"sample_id\", \"time_point\")]) %>%   group_by(Gene, time_point) %>%   mutate(     n_gene = sum(value),     n_tp = n_distinct(sample_id)   ) %>%   distinct(Gene, time_point, n_gene, n_tp) %>%   mutate(n_absent = n_tp - n_gene) %>%   filter(time_point != \"MRD\") %>%   pivot_wider(id_cols = \"Gene\", names_from = c(time_point), values_from = c(\"n_gene\", \"n_absent\"))  enrich_res <- map(c(\"TP53\", \"RB1\"), .f = function(gene) {   vals <- x[x$Gene == gene, 2:5]    mat <- matrix(c(vals[[2]], vals[[4]], vals[[1]], vals[[3]]),     nrow = 2,     dimnames = list(       PD = c(\"Mut\", \"Wt\"),       Pre = c(\"Mut\", \"Wt\")     )   )    res <- stats::fisher.test(mat) %>%     broom::tidy() %>%     mutate(Gene = gene)   return(res) }) %>%   list_rbind() %>%   arrange(p.value) %>%   rstatix::adjust_pvalue(method = \"BH\")   p <- enrich_res %>%   ggplot(aes(x = estimate, y = Gene)) +   geom_pointrange(aes(xmin = conf.low, xmax = conf.high)) +   geom_text(aes(label = glue(\"{scales::label_pvalue(accuracy = 0.0001, add_p=T)(p.value)}\")),     nudge_y = 0.35, size = 3.5   ) +   theme_classic(base_size = 16) +   scale_x_continuous(trans = \"log2\") +   labs(x = \"Odds Ratio\", title = \"Enrichment in PD\") +   geom_vline(xintercept = 1, linetype = \"22\") +   theme(panel.border = element_rect(fill = NA), axis.line = element_blank()) +   theme(plot.margin = margin(r = 1, 0.25, 0.25, 0.25, \"lines\"),         plot.title = element_text(hjust = 0.5, size = 10))  ggsave(p, file = here(\"plots\", \"egfr_prog_enrich.pdf\"), width = 2.5, height = 1.75)  p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/41_luca_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Load Data","title":null,"text":"","code":"luca <- readRDS(here(\"paper_data\", \"luca_extended.rds\"))  luca <- luca[, luca$ann_coarse == \"Epithelial cell\"]  scores <- read.table(file = here(\"paper_data\", \"luca_ucell_signatures.txt.gz\"), header = T, sep = \"\\t\") rownames(scores) <- scores$cell_id scores$cell_id <- NULL luca <- AddMetaData(luca, scores)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/41_luca_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Check Markers","title":null,"text":"","code":"p <- DotPlotter(luca, features = markers$epi_markers_final, group.by = \"ann_fine\", rotate_y_strip = T) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/41_luca_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Compute mean scores and plot","title":null,"text":"","code":"sample_df <- luca@meta.data %>%   add_count(sample, name = \"n_epi\") %>%   add_count(sample, ann_fine, name = \"n_fine\") %>%   mutate(prop_fine = n_epi / n_fine) %>%   select(study, dataset, donor_id, sample, origin, platform, n_epi, ends_with(\"_mutation\")) %>%   distinct()  mean_scores <- luca@meta.data %>%   group_by(sample) %>%   add_count(name = \"n_samp\") %>%   filter(n_samp >= 100) %>%   group_by(study, disease, dataset, donor_id, sample, origin, platform, ann_fine, tumor_stage, uicc_stage) %>%   add_count(name = \"n_fine\") %>%   filter(n_fine >= 20) %>%   summarize(across(colnames(scores), ~ mean(.x, na.rm = T))) %>%   ungroup() %>%   left_join(select(sample_df, sample, ends_with(\"_mutation\")))  mean_scores_long <- mean_scores %>%   pivot_longer(cols = colnames(scores), names_to = \"Pathway\", values_to = \"mean_exp\") df <- mean_scores %>%   filter(ann_fine == \"Cancer cells\" & disease %in% c(\"lung adenocarcinoma\"))  p1 <- df %>%   ggplot(aes(x = REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES, y = LUAD_GIRARD, color = tumor_stage)) +   geom_point() +   geom_smooth(method = \"lm\", show.legend = F, se = F) +   ggpubr::stat_cor(show.legend = F, size = 2.75, label.x.npc = 0.45, label.y.npc = 0.075) +   facet_grid(. ~ glue(\"Single Cell LuCA Atlas\\nLUAD samples ({nrow(df)})\")) +   see::scale_color_bluebrown_d(reverse = T, breaks = c(\"early\", \"advanced\"), labels = c(\"Early\", \"Advanced\")) +   theme_few() +   labs(x = \"Reactome Nuclear MAPK\", y = \"LUAD Signature\", color = \"Tumor Stage\")   df2 <- mean_scores %>%   filter(ann_fine %in% c(\"Alveolar cell type 1\", \"Alveolar cell type 2\") & origin %in% c(\"normal\"))  p2 <- df2 %>%   ggplot(aes(x = REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES, y = LUAD_GIRARD, color = ann_fine)) +   geom_point() +   geom_smooth(method = \"lm\", show.legend = F, se = F) +   ggpubr::stat_cor(show.legend = F, size = 2.75, label.x.npc = 0.4, label.y.npc = 0.9) +   facet_grid(. ~ glue(\"Single Cell LuCA Atlas\\nNormal samples ({nrow(df2)})\")) +   scale_color_manual(values = c(\"#E64B35FF\", \"#4DBBD5FF\"), breaks = c(\"Alveolar cell type 1\", \"Alveolar cell type 2\"), labels = c(\"AT1\", \"AT2\")) +   theme_few() +   labs(x = \"Reactome Nuclear MAPK\", y = \"LUAD Signature\", color = \"Cell Type\")  pcomb <- p1 | p2 ggsave(pcomb, file = here(\"plots\", \"luca_atlas_mapk_cor_plus_norm.pdf\"), width = 8, height = 3) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Introduction","title":null,"text":"","code":"library(tidyverse) library(ggthemes) library(ggsci) library(patchwork) library(glue) library(ggh4x) library(patchwork) library(Seurat) library(ggbeeswarm) library(easystats) library(tidyverse) library(readxl) library(here) theme_set(theme_classic()) devtools::load_all() colors <- load_colors() markers <- load_markers()"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"TCGA","title":null,"text":"","code":"tcga_alts <- read_excel(here(\"paper_data\", \"pancan_alteration_matrix.xlsx\"), sheet = 2)  tcga_subtypes <- read_excel(here(\"paper_data\", \"tcga_subtypes.xlsx\"), skip = 2) # For clinical outcome endpoints, we recommend the use of PFI for progression-free interval, and OS for overall survival. Both endpoints are relatively accurate. Given the relatively short follow-up time, PFI is preferred over OS. Detailed recommendations please refer to Table 3 in the accompanying paper. tcga_clin <- read_excel(here(\"paper_data/TCGA-CDR-SupplementalTableS1.xlsx\"),   sheet = \"TCGA-CDR\", )  tcga_purplo <- read.table(here(\"paper_data\", \"TCGA_mastercalls.abs_tables_JSedit.fixed.txt\"), header = T, sep = \"\\t\")  oncopaths <- c(\"Cell Cycle\", \"HIPPO\", \"MYC\", \"NOTCH\", \"NRF2\", \"PI3K\", \"TGF-Beta\", \"RTK RAS\", \"TP53\", \"WNT\")  tcga_oncopaths_1 <- read_excel(here(\"paper_data\", \"tcga_oncopaths.xlsx\"), sheet = 1, skip = 2) %>%   janitor::clean_names() %>%   select(gene, og_tsg) %>%   mutate(pathway = oncopaths[1])  tcga_oncopaths <- map(2:10, .f = function(i) {   x <- read_excel(here(\"paper_data\", \"tcga_oncopaths.xlsx\"), sheet = oncopaths[[i]]) %>%     janitor::clean_names() %>%     select(gene, og_tsg) %>%     mutate(pathway = oncopaths[[i]]) }) %>%   list_rbind()  tcga_oncopaths <- rbind(tcga_oncopaths, tcga_oncopaths_1)  impact_oncopaths <- read.table(file = here(\"paper_data\", \"impact_pathway_groups.txt\"), header = T, sep = \"\\t\")  tcga_clin <- tcga_clin %>%   mutate(tumor_stage_simple = case_when(     grepl(\"Stage IV\", ajcc_pathologic_tumor_stage) ~ \"Stage IV\",     grepl(\"Stage III\", ajcc_pathologic_tumor_stage) ~ \"Stage III\",     grepl(\"Stage II\", ajcc_pathologic_tumor_stage) ~ \"Stage II\",     grepl(\"Stage I\", ajcc_pathologic_tumor_stage) ~ \"Stage I\",     .default = \"Unknown\"   )) %>%   mutate(tumor_stage_simple = fct_relevel(tumor_stage_simple, \"Stage I\"))  gexp_data <- data.table::fread(file = here(\"paper_data\", \"EBPlusPlusAdjustPANCAN_IlluminaHiSeq_RNASeqV2.geneExp.tsv\")) gexp_data$gene <- str_split(gexp_data$gene_id, pattern = \"\\\\|\", simplify = T)[, 1] gexp_data$gene_id <- NULL gexp_data <- gexp_data[gexp_data$gene != \"?\" & gexp_data$gene != \"SLC35E2\", ] genes <- gexp_data$gene gexp_data$gene <- NULL gexp_data <- as.matrix(gexp_data) rownames(gexp_data) <- genes pathways <- read.table(here(\"paper_data\", \"egfr_pathways.txt\"), header = T, sep = \"\\t\")  pathways <- split(pathways$Gene, pathways$pathway) pathway_names <- gsub(\"_GIRARD|_CCLE\", \"\", names(pathways)) # library(UCell) # Code below to compute pathway scores # x <- apply(gexp_data, MARGIN = 2, FUN = function(x) {sum(x>100)}) # ranks_tcga <- UCell::StoreRankings_UCell(matrix = gexp_data, maxRank = 10000, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), chunk.size = 100)  # scores_tcga <- UCell::ScoreSignatures_UCell(precalc.ranks = ranks_tcga, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), features = pathways, name = \"\")  # write.table(scores_tcga %>% as.data.frame() %>% rownames_to_column(\"sample_id\"), file = gzfile(here(\"paper_data\", \"tcga_pathway_scores.txt.gz\")), quote = F, sep = \"\\t\", row.names = F, col.names = T) scores_tcga <- read.table(here(\"paper_data\", \"tcga_pathway_scores.txt.gz\"), header = T, sep = \"\\t\") scores_tcga$SAMPLE_BARCODE <- substr(scores_tcga$sample_id, 1, 15)  tcga_df <- inner_join(scores_tcga, tcga_subtypes) %>%   dplyr::rename(     \"LUAD\" = \"LUAD_GIRARD\",     \"LUSC\" = \"LUSC_GIRARD\",     \"SCLC\" = \"SCLC_CCLE\"   ) %>%   inner_join(tcga_alts) %>%   left_join(tcga_clin[, -1], by = c(\"PATIENT_BARCODE\" = \"bcr_patient_barcode\"))  tcga_df$CDKN2A <- as.numeric(tcga_df$CDKN2A) mut_genes_tcga <- tcga_df %>%   select(CCND1:WWTR1) %>%   colnames()  # Add binary pathway mutation indicator tcga_pathway_df <- tcga_df %>%   select(sample_id, mut_genes_tcga) %>%   pivot_longer(cols = mut_genes_tcga, names_to = \"gene\", values_to = \"mut\") %>%   left_join(tcga_oncopaths) %>%   group_by(sample_id, pathway) %>%   summarize(mut = sum(mut) > 0) %>%   pivot_wider(id_cols = \"sample_id\", names_from = \"pathway\", values_from = mut, values_fn = function(x) sum(x, na.rm = T), values_fill = 0, names_prefix = \"path_\") %>%   janitor::clean_names()   impact_pathway_df <- tcga_df %>%   select(sample_id, mut_genes_tcga) %>%   pivot_longer(cols = mut_genes_tcga, names_to = \"gene\", values_to = \"mut\") %>%   filter(gene %in% impact_oncopaths$Hugo_symbol) %>%   left_join(impact_oncopaths, by = c(\"gene\" = \"Hugo_symbol\")) %>%   group_by(sample_id, Pathway) %>%   summarize(mut = sum(mut) > 0) %>%   pivot_wider(id_cols = \"sample_id\", names_from = \"Pathway\", values_from = mut, values_fn = function(x) sum(x, na.rm = T), values_fill = 0, names_prefix = \"pathimpact_\") %>%   janitor::clean_names()    tcga_df <- left_join(tcga_df, tcga_pathway_df) %>%   left_join(impact_pathway_df) %>%   mutate(array = substr(sample_id, 1, 15)) %>%   left_join(tcga_purplo)  resist_muts <- markers$resistance_genes[markers$resistance_genes %in% colnames(tcga_df)]"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Load data","title":null,"text":"","code":"tcga_alts <- read_excel(here(\"paper_data\", \"pancan_alteration_matrix.xlsx\"), sheet = 2)  tcga_subtypes <- read_excel(here(\"paper_data\", \"tcga_subtypes.xlsx\"), skip = 2) # For clinical outcome endpoints, we recommend the use of PFI for progression-free interval, and OS for overall survival. Both endpoints are relatively accurate. Given the relatively short follow-up time, PFI is preferred over OS. Detailed recommendations please refer to Table 3 in the accompanying paper. tcga_clin <- read_excel(here(\"paper_data/TCGA-CDR-SupplementalTableS1.xlsx\"),   sheet = \"TCGA-CDR\", )  tcga_purplo <- read.table(here(\"paper_data\", \"TCGA_mastercalls.abs_tables_JSedit.fixed.txt\"), header = T, sep = \"\\t\")  oncopaths <- c(\"Cell Cycle\", \"HIPPO\", \"MYC\", \"NOTCH\", \"NRF2\", \"PI3K\", \"TGF-Beta\", \"RTK RAS\", \"TP53\", \"WNT\")  tcga_oncopaths_1 <- read_excel(here(\"paper_data\", \"tcga_oncopaths.xlsx\"), sheet = 1, skip = 2) %>%   janitor::clean_names() %>%   select(gene, og_tsg) %>%   mutate(pathway = oncopaths[1])  tcga_oncopaths <- map(2:10, .f = function(i) {   x <- read_excel(here(\"paper_data\", \"tcga_oncopaths.xlsx\"), sheet = oncopaths[[i]]) %>%     janitor::clean_names() %>%     select(gene, og_tsg) %>%     mutate(pathway = oncopaths[[i]]) }) %>%   list_rbind()  tcga_oncopaths <- rbind(tcga_oncopaths, tcga_oncopaths_1)  impact_oncopaths <- read.table(file = here(\"paper_data\", \"impact_pathway_groups.txt\"), header = T, sep = \"\\t\")  tcga_clin <- tcga_clin %>%   mutate(tumor_stage_simple = case_when(     grepl(\"Stage IV\", ajcc_pathologic_tumor_stage) ~ \"Stage IV\",     grepl(\"Stage III\", ajcc_pathologic_tumor_stage) ~ \"Stage III\",     grepl(\"Stage II\", ajcc_pathologic_tumor_stage) ~ \"Stage II\",     grepl(\"Stage I\", ajcc_pathologic_tumor_stage) ~ \"Stage I\",     .default = \"Unknown\"   )) %>%   mutate(tumor_stage_simple = fct_relevel(tumor_stage_simple, \"Stage I\"))  gexp_data <- data.table::fread(file = here(\"paper_data\", \"EBPlusPlusAdjustPANCAN_IlluminaHiSeq_RNASeqV2.geneExp.tsv\")) gexp_data$gene <- str_split(gexp_data$gene_id, pattern = \"\\\\|\", simplify = T)[, 1] gexp_data$gene_id <- NULL gexp_data <- gexp_data[gexp_data$gene != \"?\" & gexp_data$gene != \"SLC35E2\", ] genes <- gexp_data$gene gexp_data$gene <- NULL gexp_data <- as.matrix(gexp_data) rownames(gexp_data) <- genes pathways <- read.table(here(\"paper_data\", \"egfr_pathways.txt\"), header = T, sep = \"\\t\")  pathways <- split(pathways$Gene, pathways$pathway) pathway_names <- gsub(\"_GIRARD|_CCLE\", \"\", names(pathways))"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Score Pathways","title":null,"text":"","code":"# library(UCell) # Code below to compute pathway scores # x <- apply(gexp_data, MARGIN = 2, FUN = function(x) {sum(x>100)}) # ranks_tcga <- UCell::StoreRankings_UCell(matrix = gexp_data, maxRank = 10000, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), chunk.size = 100)  # scores_tcga <- UCell::ScoreSignatures_UCell(precalc.ranks = ranks_tcga, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), features = pathways, name = \"\")  # write.table(scores_tcga %>% as.data.frame() %>% rownames_to_column(\"sample_id\"), file = gzfile(here(\"paper_data\", \"tcga_pathway_scores.txt.gz\")), quote = F, sep = \"\\t\", row.names = F, col.names = T) scores_tcga <- read.table(here(\"paper_data\", \"tcga_pathway_scores.txt.gz\"), header = T, sep = \"\\t\") scores_tcga$SAMPLE_BARCODE <- substr(scores_tcga$sample_id, 1, 15)  tcga_df <- inner_join(scores_tcga, tcga_subtypes) %>%   dplyr::rename(     \"LUAD\" = \"LUAD_GIRARD\",     \"LUSC\" = \"LUSC_GIRARD\",     \"SCLC\" = \"SCLC_CCLE\"   ) %>%   inner_join(tcga_alts) %>%   left_join(tcga_clin[, -1], by = c(\"PATIENT_BARCODE\" = \"bcr_patient_barcode\"))  tcga_df$CDKN2A <- as.numeric(tcga_df$CDKN2A) mut_genes_tcga <- tcga_df %>%   select(CCND1:WWTR1) %>%   colnames()  # Add binary pathway mutation indicator tcga_pathway_df <- tcga_df %>%   select(sample_id, mut_genes_tcga) %>%   pivot_longer(cols = mut_genes_tcga, names_to = \"gene\", values_to = \"mut\") %>%   left_join(tcga_oncopaths) %>%   group_by(sample_id, pathway) %>%   summarize(mut = sum(mut) > 0) %>%   pivot_wider(id_cols = \"sample_id\", names_from = \"pathway\", values_from = mut, values_fn = function(x) sum(x, na.rm = T), values_fill = 0, names_prefix = \"path_\") %>%   janitor::clean_names()   impact_pathway_df <- tcga_df %>%   select(sample_id, mut_genes_tcga) %>%   pivot_longer(cols = mut_genes_tcga, names_to = \"gene\", values_to = \"mut\") %>%   filter(gene %in% impact_oncopaths$Hugo_symbol) %>%   left_join(impact_oncopaths, by = c(\"gene\" = \"Hugo_symbol\")) %>%   group_by(sample_id, Pathway) %>%   summarize(mut = sum(mut) > 0) %>%   pivot_wider(id_cols = \"sample_id\", names_from = \"Pathway\", values_from = mut, values_fn = function(x) sum(x, na.rm = T), values_fill = 0, names_prefix = \"pathimpact_\") %>%   janitor::clean_names()    tcga_df <- left_join(tcga_df, tcga_pathway_df) %>%   left_join(impact_pathway_df) %>%   mutate(array = substr(sample_id, 1, 15)) %>%   left_join(tcga_purplo)  resist_muts <- markers$resistance_genes[markers$resistance_genes %in% colnames(tcga_df)]"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"CPTAC","title":null,"text":"","code":"cp_meta <- read_excel(path = here(\"paper_data\", \"cptac_meta.xlsx\"), sheet = 2) %>%   janitor::clean_names()  cp_gexp <- read_excel(path = here(\"paper_data\", \"cptac_lung.xlsx\"), sheet = \"Table S2D\", skip = 2)  gex_mat <- cp_gexp[69:nrow(cp_gexp), 7:ncol(cp_gexp)] %>%   as.matrix() gex_mat <- apply(gex_mat, MARGIN = 2, as.numeric) rownames(gex_mat) <- cp_gexp[69:nrow(cp_gexp), 1, drop = T]  x <- colSums(apply(gex_mat, 1, is.na)) %>%   sort(decreasing = T)  gex_mat_delog <- 2^gex_mat # library(UCell)  # x <- apply(gexp_data, MARGIN = 2, FUN = function(x) {sum(x>100)}) # ranks_cptac <- UCell::StoreRankings_UCell(matrix = gex_mat_delog, maxRank = 10000, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), chunk.size = 100) # # scores_cptac <- UCell::ScoreSignatures_UCell(precalc.ranks = ranks_cptac, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), features = pathways, name = \"\") # # write.table(scores_cptac %>% as.data.frame() %>% rownames_to_column(\"sample_id\"), file = gzfile(here(\"paper_data\", \"cptac_pathway_scores.txt.gz\")), quote = F, sep = \"\\t\", row.names = F, col.names = T) scores_cptac <- read.table(file = here(\"paper_data\", \"cptac_pathway_scores.txt.gz\"), header = T, sep = \"\\t\") df_cp <- inner_join(cp_meta, scores_cptac) %>%   dplyr::rename(     \"LUAD\" = \"LUAD_GIRARD\",     \"LUSC\" = \"LUSC_GIRARD\",     \"SCLC\" = \"SCLC_CCLE\"   )  mut_genes_cp <- df_cp %>%   select(ends_with(\"mutation_status\")) %>%   colnames()  new_names <- str_to_upper(gsub(\"_mutation_status\", \"\", mut_genes_cp)) df_cp[, new_names] <- df_cp[, mut_genes_cp]  df_cp <- df_cp %>%   mutate(tumor_stage_simple = case_when(     grepl(\"^4\", stage) ~ \"Stage IV\",     grepl(\"^3\", stage) ~ \"Stage III\",     grepl(\"^2\", stage) ~ \"Stage II\",     grepl(\"^1\", stage) ~ \"Stage I\",     .default = \"Unknown\"   )) %>%   mutate(tumor_stage_simple = fct_relevel(tumor_stage_simple, \"Stage I\"))  mut_genes_cp <- new_names"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Load Data","title":null,"text":"","code":"cp_meta <- read_excel(path = here(\"paper_data\", \"cptac_meta.xlsx\"), sheet = 2) %>%   janitor::clean_names()  cp_gexp <- read_excel(path = here(\"paper_data\", \"cptac_lung.xlsx\"), sheet = \"Table S2D\", skip = 2)  gex_mat <- cp_gexp[69:nrow(cp_gexp), 7:ncol(cp_gexp)] %>%   as.matrix() gex_mat <- apply(gex_mat, MARGIN = 2, as.numeric) rownames(gex_mat) <- cp_gexp[69:nrow(cp_gexp), 1, drop = T]  x <- colSums(apply(gex_mat, 1, is.na)) %>%   sort(decreasing = T)  gex_mat_delog <- 2^gex_mat # library(UCell)  # x <- apply(gexp_data, MARGIN = 2, FUN = function(x) {sum(x>100)}) # ranks_cptac <- UCell::StoreRankings_UCell(matrix = gex_mat_delog, maxRank = 10000, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), chunk.size = 100) # # scores_cptac <- UCell::ScoreSignatures_UCell(precalc.ranks = ranks_cptac, BPPARAM = BiocParallel::MulticoreParam(workers=16, progressbar = T), features = pathways, name = \"\") # # write.table(scores_cptac %>% as.data.frame() %>% rownames_to_column(\"sample_id\"), file = gzfile(here(\"paper_data\", \"cptac_pathway_scores.txt.gz\")), quote = F, sep = \"\\t\", row.names = F, col.names = T) scores_cptac <- read.table(file = here(\"paper_data\", \"cptac_pathway_scores.txt.gz\"), header = T, sep = \"\\t\") df_cp <- inner_join(cp_meta, scores_cptac) %>%   dplyr::rename(     \"LUAD\" = \"LUAD_GIRARD\",     \"LUSC\" = \"LUSC_GIRARD\",     \"SCLC\" = \"SCLC_CCLE\"   )  mut_genes_cp <- df_cp %>%   select(ends_with(\"mutation_status\")) %>%   colnames()  new_names <- str_to_upper(gsub(\"_mutation_status\", \"\", mut_genes_cp)) df_cp[, new_names] <- df_cp[, mut_genes_cp]  df_cp <- df_cp %>%   mutate(tumor_stage_simple = case_when(     grepl(\"^4\", stage) ~ \"Stage IV\",     grepl(\"^3\", stage) ~ \"Stage III\",     grepl(\"^2\", stage) ~ \"Stage II\",     grepl(\"^1\", stage) ~ \"Stage I\",     .default = \"Unknown\"   )) %>%   mutate(tumor_stage_simple = fct_relevel(tumor_stage_simple, \"Stage I\"))  mut_genes_cp <- new_names"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/42_tcga_cptac_analysis.html","id":null,"dir":"Articles","previous_headings":"","what":"Plot","title":null,"text":"","code":"df_cp_tum <- df_cp[df_cp$type != \"NAT\", ] df_cp_tum$type <- NULL df_cp_tum$DISEASE <- \"LUAD\" df_cp_tum$cohort <- \"CPTAC\" df_cp_tum$purity <- df_cp_tum$tumor_purity_by_estimate_rn_aseq tcga_df$cohort <- \"TCGA\" colns_common <- intersect(colnames(tcga_df), colnames(df_cp_tum))  tcga_cptac_combined <- rbind(tcga_df[, colns_common], df_cp_tum[, colns_common])  mapks <- grep(\"MAPK\", colnames(tcga_cptac_combined), value = T)  p1 <- tcga_cptac_combined %>%   filter(DISEASE %in% c(\"LUAD\")) %>%   ggplot(aes(x = REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES, y = LUAD)) +   geom_point() +   geom_smooth(method = \"lm\") +   ggpubr::stat_cor(geom = \"label\", method = \"pearson\", label.x.npc = 0.05, label.y.npc = 0.05, size = 3) +   facet_grid(. ~ cohort) +   theme(aspect.ratio = 1) +   labs(x = \"Reactome Nuclear MAPK Signaling\", y = \"LUAD Signature\") +   theme_few() +   theme(aspect.ratio = 1) ggsave(p1, file = here(\"plots\", \"tcga_cptac_mapk_cors.pdf\"), width = 6, height = 3) p1"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Setup","title":null,"text":"","code":"library(tidyverse) library(here) library(ggbeeswarm) library(ggsci) library(ggthemes) library(glue) library(patchwork) library(cowplot) library(ggnewscale) library(eulerr) library(ggh4x) library(ggtext) library(ComplexHeatmap) library(tidyr) library(broom.mixed) library(scCustomize) library(SingleCellExperiment) library(Seurat) library(dittoSeq) library(scatools) raster.dpi <- c(1000, 1000)  devtools::load_all()  symnum.args <- list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, Inf), symbols = c(\"p<0.0001\", \"p<0.001\", \"p<0.01\", \"p<0.05\", \"ns\")) symnum_0.1 <- list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, Inf), symbols = c(   \"p<0.0001\",   \"p<0.001\", \"p<0.01\", \"p<0.05\", \"p<0.1\", \"ns\" )) symnum_0.1_star <- list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, Inf), symbols = c(   \"****\",   \"***\", \"**\", \"*\", \"^\", \"ns\" )) colors <- load_colors() markers <- load_markers()"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Load Data","title":null,"text":"","code":"db <- load_project() metadata <- readxl::read_excel(here(\"paper_data\", \"supplemental_tables.xlsx\"), sheet = \"Table S1 - Cohort Metadata\") %>%   as.data.frame() metadata$facets_fga <- as.numeric(metadata$facets_fga) metadata$facets_ploidy <- as.numeric(metadata$facets_ploidy) metadata$facets_purity <- as.numeric(metadata$facets_purity) metadata$facets_frac_loh <- as.numeric(metadata$facets_frac_loh) metadata$facets_wgd <- as.logical(metadata$facets_wgd) metadata$time_point <- fct_relevel(metadata$time_point, \"TN\", \"MRD\", \"PD\") metadata$mapk_alt[metadata$sample_id == \"PD20\"] <- \"Unknown\" # Need to fix this upstream - sample w/o impact but inferCNV is used for this as well and this sample was negative   # We need to load additional metadata to complete the swimmers plot addtl_meta <- read.table(file = here(\"paper_data\", \"metadata_update_mar_2025.txt\"), header = T, sep = \"\\t\", quote = \"\\\"\") addtl_meta$sample_id_orig <- addtl_meta$sample_id addtl_meta$sample_id <- addtl_meta$sample_id_new metadata <- left_join(metadata, addtl_meta[,c(\"sample_id\", setdiff(colnames(addtl_meta), colnames(metadata)))])  metadata$sample_id <- fct_relevel(metadata$sample_id, names(colors$sample_id_new))  db$metadata <- metadata  # db$metadata$time_point <- fct_relevel(db$metadata$time_point, \"TN\", \"MRD\", \"PD\")  db$impact_data <- readRDS(here(\"paper_data\", \"impact_data.rds\"))  db$srt$cell_type <- fct_relevel(db$srt$cell_type, names(colors$cell_type)) db$srt$time_point <- fct_relevel(db$srt$time_point, \"TN\", \"MRD\", \"PD\") db$srt$is_tumor_cell <- as.logical(db$srt$is_tumor_cell) db$srt$sample_id <- fct_relevel(db$srt$sample_id, names(colors$sample_id_new))  db$srt_epi$cell_type <- fct_relevel(db$srt_epi$cell_type, names(colors$cell_type)) db$srt_epi$cell_type_epi <- fct_relevel(db$srt_epi$cell_type_epi, names(colors$cell_type_epi)) db$srt_epi$time_point <- fct_relevel(db$srt_epi$time_point, \"TN\", \"MRD\", \"PD\") db$srt_epi$is_tumor_cell <- as.logical(db$srt_epi$is_tumor_cell) db$srt_epi$sample_id <- fct_relevel(db$srt_epi$sample_id, names(colors$sample_id_new))  srt <- db$srt srt_epi <- db$srt_epi  pathways <- read.table(here(\"paper_data\", \"egfr_pathways.txt\"), header = T, sep = \"\\t\")"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Plotting","title":null,"text":"grab legend      Select main   Check four          Cellularity tumor site         version proportion pts tumor cells   Single table can plot select pathways interest   Subset tumor cells   Plot main  Plot supp   Create plot mutations annotated bar side, notable genes expression box heat encoding  Psuedobulk exp heatmap   model MAPKalt vs three histologies, model mutation’s association LUSC SCLC","code":"# SETTINGS tri_stroke <- 0.25 tri_size <- 2 tri_nudge <- 0.275 ###### swimmers_df <- db$metadata %>%   mutate(dx_date = 0) %>%   select(sample_id, sample_id_orig, dmp_id, dx_date, procedure, osi_start, osi_end, osi_lot, other_treatment, other_treatment_start, other_treatment_end, other_treatment_lot, other_same_osi, radio_prog, met_date, impact, last_tp, last_followup_status, time_point, histology, has_impact) %>%   mutate(     # Category to split the timing up     t_group = ifelse(last_tp >= 60, \">5years\", \"<5years\"),     last_followup_status = fct_recode(last_followup_status,       \"Alive\" = \"ALIVE\",       \"Deceased\" = \"DECEASED\"     )   )  # Pull out treatment information into single table treatments_df <- swimmers_df %>%   mutate(treatment = \"Osimertinib\") %>%   filter(!is.na(osi_start)) %>%   select(sample_id, sample_id_orig, dmp_id, treatment, time_point, last_tp, treatment_start = osi_start, treatment_end = osi_end, lot = osi_lot)  other_treatments_df <- swimmers_df %>%   filter(other_same_osi == \"different\") %>%   select(sample_id, sample_id_orig, dmp_id, treatment = other_treatment, time_point, last_tp, treatment_start = other_treatment_start, treatment_end = other_treatment_end, lot = other_treatment_lot) %>%   # Clean up treatment name   mutate(treatment = gsub(\" |rechallenge|now with pemetrexed \\\\(for metastatic KRAS mutated LC\\\\)|Breast cancer treatment: |S\\\\/p| \\\\(peme maintenance\\\\)|\\\\(peme/bev maintenance\\\\)\", \"\", treatment)) %>%   separate_longer_delim(cols = treatment, delim = c(\"+\")) %>%   # separate_longer_delim(cols = treatment, delim = c(\"/\")) %>%   mutate(     treatment_orig = treatment,     treatment = case_when(       grepl(\"pembro\", treatment, ignore.case = T) ~ \"Chemo+IO\",       grepl(\"bev\", treatment, ignore.case = T) ~ \"Chemo+Bev\",       grepl(\"carb|peme|pacli\", treatment, ignore.case = T) ~ \"Chemo\",       grepl(\"Osi\", treatment, ignore.case = T) ~ \"Osimertinib\",       .default = treatment     ),     treatment_simple = case_when(       grepl(\"Chemo\\\\+\", treatment) ~ \"Chemo combo\",       .default = treatment     )   )  treatments_df <- plyr::rbind.fill(treatments_df, other_treatments_df)  # Bind the additional EGFR TKI data other_treatments_egfr <- read.table(file = here(\"paper_data\", \"other_tkis_update_mar_2025.txt\"), header = T, sep = \"\\t\") %>%   dplyr::rename(     sample_id_orig = sample_id,     treatment = AGENT,     treatment_start = trt_start,     treatment_end = trt_end   ) %>%   select(sample_id_orig, treatment, treatment_start, treatment_end) %>%   left_join(db$metadata[, c(\"sample_id\", \"sample_id_orig\", \"time_point\", \"last_tp\", \"dmp_id\")]) %>%   mutate(treatment_simple = treatment) treatments_df <- plyr::rbind.fill(treatments_df, other_treatments_egfr)  osi_df <- treatments_df %>%   filter(treatment == \"Osimertinib\") other_treatments_df <- treatments_df %>%   filter(treatment != \"Osimertinib\")   # Backgrounds for each timepoint facet and texts backgrounds <- map(levels(db$metadata$time_point), .f = function(tp) {   element_part_rect(side = \"r\", fill = colors$time_point[[tp]]) }) texts <- map(levels(db$metadata$time_point), .f = function(tp) {   element_text(face = \"bold\", color = \"black\") })  # Facet relabeller tp_names <- c(   \"TN\" = \"Treatment-Naive\",   \"MRD\" = \"Residual Disease\",   \"PD\" = \"Progressive Disease\" )  # TO NOTE: Some values for met date and impact are <0 by small amount. These are set to zero to allow the x axis sqrt transform. swimmers_df$met_date[swimmers_df$met_date < 0] <- 0 swimmers_df$impact[swimmers_df$impact < 0] <- 0  swimmers_plot <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   ggplot(aes(y = sample_id)) +   # LAST FOLLOWUP   geom_segment(aes(x = dx_date, xend = last_tp), linewidth = 1, color = \"black\") +   # OSI INTERVAL   geom_segment(data = osi_df, linewidth = 4, aes(x = treatment_start, xend = treatment_end, color = \"Osimertinib\"), position = position_nudge(y = 0)) +   # OTHER TREATMENTS   geom_segment(data = other_treatments_df, linewidth = 1.5, aes(x = treatment_start, xend = treatment_end, color = treatment_simple)) +   scale_color_manual(     na.translate = F,     name = \"Treatments\",     values = c(       \"Osimertinib\" = \"#a5c1f2\",       \"Erlotinib\" = \"#0072B5FF\",       \"Dacomitinib\" = \"#3B96E2\",       \"Afatinib\" = \"#8B919C\",       \"Chemo combo\" = \"#BC3C29FF\",       \"Chemo\" = \"#FFDC91FF\",       \"Crizotinib\" = \"#20854EFF\",       \"TDM1\" = \"#EE4C97FF\"     ),     limits = c(\"Osimertinib\", \"Erlotinib\", \"Dacomitinib\", \"Afatinib\", \"Chemo combo\", \"Chemo\", \"Crizotinib\", \"TDM1\"),     guide = guide_legend(order = 3)   ) +   # LAST STATUS   geom_point(aes(x = last_tp, shape = last_followup_status, fill = last_followup_status), size = 2.5, stroke = 0.2) +   scale_shape_manual(     name = \"Last followup\", values = c(\"Alive\" = 21, \"Deceased\" = 22),     guide = guide_legend(order = 4)   ) +   scale_fill_manual(     name = \"Last followup\", values = c(\"Alive\" = \"#35aaf2\", \"Deceased\" = \"#ab2230\"),     guide = guide_legend(order = 4)   ) +   new_scale_fill() +   new_scale(\"shape\") +   # EVENTS   ## MET TIMEPOINT   geom_point(aes(x = met_date, fill = \"Metastasis\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = tri_nudge), pch = 25) +   ## Date of radiographic progression   geom_point(aes(x = radio_prog, fill = \"Radiographic Progression\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = tri_nudge), pch = 25) +   scale_fill_manual(     name = \"Clinical Event\",     values = c(       \"Metastasis\" = \"red\",       \"Radiographic Progression\" = \"orange\"     ), guide = guide_legend(override.aes = list(size = 3), order = 2),     limits = c(\"Metastasis\", \"Radiographic Progression\")   ) +   new_scale_fill() +   ## IMPACT SAMPLE   geom_point(aes(x = impact, fill = \"IMPACT\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = -tri_nudge), pch = 24) +   ## Procedure sample   geom_point(aes(x = procedure, fill = \"snRNA\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = 0), pch = 23) +   scale_fill_manual(     name = \"Molecular Assay\",     values = c(       \"snRNA\" = \"#33589c\",       \"IMPACT\" = \"black\"     ), guide = guide_legend(override.aes = list(size = 3), order = 1),     limits = c(\"snRNA\", \"IMPACT\")   ) +   # AXIS LABELS   labs(x = \"Time from initial diagnosis (Years)\", y = NULL) +   scale_x_sqrt(     breaks = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),     labels = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),     sec.axis = sec_axis(~.,       name = \"Time from initial diagnosis (Years)\",       breaks = c(1e-4, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),       labels = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30)     )   ) +   facet_grid2(time_point ~ .,     scales = \"free\", space = \"free_y\", switch = \"y\",     strip = strip_themed(       background_y = backgrounds,       text_y = texts     ),     labeller = as_labeller(tp_names)   ) +   theme_clean() +   theme(     panel.border = element_part_rect(side = \"tblr\", fill = NA),     axis.line.x = element_blank(),     axis.line.y = element_blank(),     strip.background = element_part_rect(side = \"r\", fill = NA, color = \"black\", linewidth = 1, linetype = \"solid\"),     plot.background = element_blank(),     strip.placement = \"outside\",     strip.clip = \"off\",     legend.position = \"left\"   ) +   coord_cartesian(clip = \"off\")  swimmers_plot meta_plot <- db$metadata %>%   # Add WGD annotation   left_join(db$impact_data$facets_data[, c(\"dmp_pid\", \"wgd\", \"ploidy\")], by = c(\"dmp_id\" = \"dmp_pid\")) %>%   ggplot(aes(y = fct_rev(sample_id))) +   # AGE   geom_tile(aes(x = \"Age at diagnosis\", fill = age_at_intial_diagnosis), color = \"black\", linewidth = 0.5) +   scale_fill_gradientn(     name = \"Age at Diagnosis\", colours = viridis::mako(10),     guide = guide_colorbar(order = 2, position = \"bottom\", keywidth = 5, keyheight = 0.7)   ) +   new_scale_fill() +   # HISTOLOGY   geom_tile(aes(x = \"Clinical Histology\", fill = histology_predominant), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant,     breaks = c(       \"Lung Adenocarcinoma\",       \"Lung Squamous Cell Carcinoma\",       \"Small Cell Lung Cancer\",       \"Poorly Differentiated\"     ),     guide = guide_legend(order = 1, position = \"bottom\", keywidth = 0.7, keyheight = 1, ncol = 2)   ) +   new_scale_fill() +   # TUMOR STAGE   geom_tile(aes(x = \"Stage of sample\", fill = stage_of_tissue_simple), color = \"black\", linewidth = 0.5) +   geom_tile(aes(x = \"Stage at diagnosis\", fill = stage_at_initial_diagnosis_simple), color = \"black\", linewidth = 0.5) +   scale_fill_viridis_d(name = \"Tumor Stage\", guide = guide_legend(order = 4, position = \"bottom\", keywidth = 0.7, keyheight = 1, ncol = 2)) +   new_scale_fill() +   # TISSUE SITE   geom_tile(aes(x = \"Tissue Site\", fill = site_of_tissue_simple), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Tissue Site\", values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple),     guide = guide_legend(order = 3, keywidth = 0.7, keyheight = 1, ncol = 2, position = \"bottom\")   ) +   new_scale_fill() +   geom_tile(aes(x = \"Sex\", fill = sex), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Sex\", values = colors$sex, breaks = names(colors$sex), na.value = \"white\",     guide = guide_legend(order = 6, keywidth = 0.7, keyheight = 1, ncol = 1, position = \"bottom\")   ) +   new_scale_fill() +   # BINARY (IMPACT, TP53, RB1)   geom_tile(aes(x = \"IMPACT\", fill = has_impact), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"Smoking History\", fill = smoking_history_simple), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"WGD\", fill = wgd), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"TP53mut\", fill = tp53mut), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"RB1mut\", fill = rb1mut), color = \"black\", linewidth = 0.5, show.legend = F) +   scale_fill_manual(     name = \"IMPACT\", values = colors$tf, breaks = names(colors$tf), na.value = \"white\",     guide = guide_legend(order = 5)   ) +   new_scale_fill() +   facet_nested(time_point ~ ., scales = \"free\", space = \"free_y\") +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   scale_x_discrete(     expand = c(0, 0),     limits = c(\"Clinical Histology\", \"Age at diagnosis\", \"Tissue Site\", \"Stage at diagnosis\", \"Stage of sample\", \"IMPACT\", \"WGD\", \"TP53mut\", \"RB1mut\", \"Smoking History\", \"Sex\")   ) +   guides(     x = guide_axis(angle = 55),     x.sec = guide_axis(angle = 90)   ) +   labs(x = NULL, y = NULL) +   theme_clean() +   theme(     strip.text.y = element_blank(),     panel.border = element_blank(),     plot.background = element_blank(),     axis.line.x = element_blank(),     axis.line.y = element_blank(),     panel.grid.major.y = element_blank(),     legend.key.height = unit(1, \"lines\"),     legend.key.width = unit(0.6, \"lines\"),     legend.title.position = \"top\", legend.title = element_text(hjust = 0.5)   ) meta_plot egfr_hits <- read.table(file = here(\"paper_data\", \"egfr_hits_table.txt\"), header = T, sep = \"\\t\") %>%   dplyr::rename(sample_id_orig = sample_id) %>%   left_join(db$metadata) egfr_hits <- egfr_hits %>%   mutate(type_name = paste(type, egfr_cat, sep = \"_\"))  egfr_mat <- egfr_hits %>%   mutate(value = 1) %>%   pivot_wider(id_cols = c(\"sample_id\"), names_from = \"variant\", values_from = value, values_fill = 0) %>%   column_to_rownames(\"sample_id\") %>%   t() %>%   memoSort() sample_order <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   pull(sample_id) %>%   levels() %>%   as.character()  var_order <- c(   \"Primary_Exon 19\", \"Primary_L858R\", \"Secondary_Amplification\",   \"Primary_G719X\", \"Primary_T790M\", \"Secondary_C797S\", \"Primary_Other\" )  egfr_hits$sample_id_new <- fct_relevel(egfr_hits$sample_id_new, sample_order)  egfr_hit_plot <- egfr_hits %>%   # mutate(denovo = factor(ifelse(grepl(\"De novo\", type_name), \"Pre-Osi\", \"Post-Osi\"),   #   levels = c(\"Pre-Osi\", \"Post-Osi\")   # )) %>%   ggplot(aes(y = sample_id_new, x = fct_relevel(type_name, var_order))) +   geom_tile() +   facet_nested(time_point ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"x\", strip = strip_nested(clip = \"off\")) +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order), expand = c(0, 0)) +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   guides(x = guide_axis(angle = 55)) +   labs(y = \"Sample ID\", x = NULL) +   theme_clean() +   theme(axis.line.x = element_blank(), axis.line.y = element_blank(), panel.border = element_rect(fill = NA, color = \"black\"), plot.background = element_blank(), strip.placement = \"outside\", strip.background = element_part_rect(side = \"l\", color = \"black\", fill = NA, linetype = \"solid\"), strip.background.x = element_part_rect(side = \"t\", color = \"black\", fill = NA, linetype = \"solid\"))  # Instead do as proportion of the timepoints df_egfr_cat_prop <- egfr_hits %>%   add_count(time_point, type_name, name = \"n_type\") %>%   complete(time_point, type_name, fill = list(n_type = 0)) %>%   add_count(time_point, name = \"n_tp\") %>%   mutate(prop = n_type / n_tp) %>%   distinct(time_point, type_name, time_point, n_type, n_tp, prop, type) %>%   filter(!is.na(type)) %>%   mutate(time_point = fct_relevel(time_point, levels(db$metadata$time_point)))    egfr_hit_plot_top <- df_egfr_cat_prop %>%   ggplot(aes(x = (fct_relevel(type_name, var_order)))) +   geom_col(aes(fill = time_point, y = prop), position = \"dodge\") +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order)) +   scale_y_continuous(position = \"right\") +   facet_nested(. ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"y\", strip = strip_nested(clip = \"off\")) +   scale_fill_manual(values = colors$time_point) +   guides(     fill = guide_legend(keywidth = 0.7, keyheight = 1, position = \"right\"),     x = guide_axis(cap = \"both\", angle = 55),     y = guide_axis(cap = \"both\")   ) +   theme_clean() +   theme(plot.background = element_blank(), axis.line.y.right = element_line(), strip.placement = \"outside\", strip.background.x = element_part_rect(linetype = \"solid\", side = \"b\", color = \"black\", fill = NA)) +   labs(y = \"Proportion\", x = NULL, fill = \"Timepoint\") pegfr <- (egfr_hit_plot_top + theme(plot.margin = margin(r = 3, unit = \"lines\"))) + egfr_hit_plot + plot_layout(ncol = 1, heights = c(0.125, 1)) & theme(panel.spacing = unit(0.2, \"lines\")) pegfr lgds <- ggpubr::get_legend(meta_plot) lgd <- ggpubr::as_ggplot(lgds) ggsave(lgd, file = here(\"plots\", \"swimmers_anno_legend.pdf\"), width = 14, height = 2) spc <- margin(t = 0.2, r = 0.2, b = 0.2, l = 0.2, unit = \"lines\") empty_panel <- plot_spacer() + theme(plot.margin = spc) pcomb_ext <- plot_grid(   plotlist = list(     # empty_panel,     # empty_panel,     # egfr_hit_plot_top + theme(plot.margin = spc),     swimmers_plot + theme(plot.margin = spc) + coord_cartesian(clip = \"off\"),     (meta_plot + theme(       legend.position = \"none\",       plot.margin = spc,       axis.text.y.right = element_blank(),       axis.ticks.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55),       strip.clip = \"off\"     ) + coord_cartesian(clip = \"off\")),     egfr_hit_plot + theme(       plot.margin = spc, axis.ticks = element_line(color = \"black\"),       strip.background.y.right = element_blank(),       strip.text.y.right = element_blank(),       axis.title.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55)     ) + coord_cartesian(clip = \"off\")   ),   align = \"hv\",   nrow = 1,   ncol = 3,   rel_widths = c(1, 0.32, 0.3),   # rel_heights = c(0.25, 1),   axis = \"tb\" ) ggsave(pcomb_ext, file = here(\"plots\", \"swimmers_plus_annos_muts.pdf\"), width = 10, height = 14.3) pcomb_ext egfr_hit_plot_top_final <- egfr_hit_plot_top +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), strip.clip = \"off\", plot.margin = margin(t = 0.25, b = 1.5, l = 0.25, r = 0.25, unit = \"lines\"), strip.background = element_blank()) +   coord_cartesian(clip = \"off\") +   guides(x = guide_axis(angle = 35, cap = \"both\")) ggsave(egfr_hit_plot_top_final, file = here(\"plots\", \"swimmers_mut_prop_top.pdf\"), width = 3.5, height = 2.5) egfr_hit_plot_top_final # Patient p1 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"site_of_tissue_simple\") +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  p2 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   guides(color = guide_legend(ncol = 3, override.aes = list(size = 3))) +   NoAxes() +   labs(title = \"Patient\") +   theme(plot.margin = margin(8, 1, 1, 1, \"mm\"))  p3 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umapnb\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  pcomb <- p4 + p2 + p1 + p3 + plot_layout(ncol = 2) & theme(aspect.ratio = 1, legend.box.margin = margin(), legend.margin = margin()) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_nobatch.pdf\"), width = 14, height = 8) pcomb # Patient p1 <- DimPlot(srt, reduction = \"umap\", group.by = \"site_of_tissue_simple\", shuffle = T) +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\")  p2 <- DimPlot(srt, reduction = \"umap\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   NoAxes() +   labs(title = \"Patient\")  p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\")  pcomb <- wrap_plots(p4, p2, p1, p3) & theme(aspect.ratio = 1) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch.pdf\"), width = 14, height = 7) pcomb # For supplement: patient and tissue site pcomb2 <- wrap_plots(p2, p1, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) ggsave(pcomb2, file = here(\"plots\", \"cohort_umap_combined_batch_supp.pdf\"), width = 15, height = 5) pcomb2 p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"On\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type)) +   labs(title = \"Cell Type\")  cohort_umap_tumor_cells <- DimPlot(srt, group.by = \"is_tumor_cell\", cols = list(\"TRUE\" = as.character(colors$cell_type[\"Tumor Cell\"]), \"FALSE\" = \"grey90\")) +   labs(title = NULL) +   theme(aspect.ratio = 1, legend.key.spacing = unit(0.1, \"lines\")) +   umap_theme() +   NoAxes() +   NoLegend() +   labs(title = \"Tumor Cells\")  pcomb <- wrap_plots(p4, p3, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) pcomb ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch_main2.pdf\"), width = 8, height = 3) ct_markers <- markers$cell_type_markers  names(ct_markers) <- map(names(ct_markers), .f = function(ct) {   ct_col <- colors$cell_type[ct]   ct_colname <- glue(\"<b style='color:{ct_col}'>{ct}<\/b>\")   return(ct_colname) }) %>%   list_c()    srt$cell_type_col <- factor(srt$cell_type, levels = levels(srt$cell_type), labels = glue(\"<b style='color:{colors$cell_type[levels(srt$cell_type)]}'>{levels(srt$cell_type)}<\/b>\"))   pl <- DotPlotter(srt, features = ct_markers, group.by = \"cell_type_col\", cluster_groups = F, rotate_y_strip = F) +   theme(     strip.clip = \"off\",     axis.line = element_blank(),     strip.text.x = element_markdown(),     axis.text.y = element_markdown()   )  ggsave(pl, file = here(\"plots\", \"cell_type_markers_dotplot.pdf\"), width = 9, height = 3) pl cls_order <- levels(fct_reorder(db$spec$cell_type$cid2, db$spec$cell_type$cid1_purity, median))  spec_pls <- map(names(db$spec), .f = function(l) {   df <- db$spec[[l]]    p1 <- df %>%     filter(cid2 != \"Other\") %>%     ggplot(aes(x = fct_relevel(cid2, cls_order), y = cid1_purity)) +     geom_violin(scale = \"width\", aes(fill = cid2), show.legend = F) +     scale_y_continuous(breaks = seq(0, 1, by = 0.5)) +     geom_pointrange(       stat = \"summary\", fatten = 0.8,       fun.min = function(z) {         quantile(z, 0.25)       },       fun.max = function(z) {         quantile(z, 0.75)       },       fun = median     ) +     guides(       x = guide_axis(angle = 45, cap = \"both\"),       y = guide_axis(cap = \"both\")     ) +     scale_fill_manual(values = colors$cell_type) +     labs(x = \"Cell Type\", y = \"Specificity\", title = l) +     ggpubr::stat_compare_means(comparisons = list(c(\"Tumor Cell\", \"Epithelial\")), tip.length = 0.05, label.y = 1.05, method = \"wilcox\", size = 2, vjust = -0.5) +     coord_cartesian(clip = \"off\") }) names(spec_pls) <- names(db$spec)  pcomb <- wrap_plots(spec_pls, ncol = 2) &   theme(axis.title.y = element_text(hjust = 0.4)) ggsave(pcomb, file = here(\"plots\", \"all_specificity_plots.pdf\"), width = 6, height = 6) pcomb p1 <- spec_pls$cell_type + labs(title = NULL, y = \"Patient\\nspecificity\\n(uncorrected)\")  p2 <- spec_pls$timepoint_batch + labs(title = NULL, y = \"Timepoint\\nspecificity\\n(corrected)\")  pcomb <- p1 + p2 + plot_layout(ncol = 1, axes = \"collect\") & labs(x = NULL) & guides(x = guide_axis(angle = 45, cap = \"both\")) ggsave(pcomb, file = here(\"plots\", \"sample_timepoint_specificity_v2.pdf\"), width = 2.85, height = 3)  pcomb p1 <- spec_pls$cell_type_batch + labs(title = NULL, y = \"Patient\\nspecificity\\n(corrected)\")   pcomb <- p1 + labs(x = NULL) + guides(x = guide_axis(angle = 45, cap = \"both\")) ggsave(pcomb, file = here(\"plots\", \"specificity_patient_corrected_supp.pdf\"), width = 3, height = 2)  pcomb df_raw <- FetchData(srt, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\")  df <- df_raw %>%   filter(is_tumor_cell)  devtools::load_all() df <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df$time_point_col <- factor(df$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df$time_point)]}'>{levels(df$time_point)}<\/b>\") )  p <- df %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10)) +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = NULL, color = \"Tumor Cell\\nDensity\") ggsave(p, file = here(\"plots\", \"tumor_cell_density.pdf\"), width = 7, height = 3) p library(ggtext) df <- FetchData(srt_epi, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\", \"tp53mut\", \"rb1mut\", \"has_impact\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\") %>%   filter(is_tumor_cell)  # Group by timepoint and calculate scaled density per group df_dens <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df_dens$time_point_col <- factor(df_dens$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens$time_point)]}'>{levels(df_dens$time_point)}<\/b>\") )  p <- df_dens %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = \"Tumor Cell Density\") ggsave(p, file = here(\"plots\", \"tumor_cell_density_epi.pdf\"), width = 7, height = 3) p # Group by timepoint and calculate scaled density per group df_dens_tp53 <- df %>%   mutate(TP53mut = case_when(     has_impact == \"FALSE\" ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   group_by(time_point, cell_type, TP53mut) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))    df_dens_tp53$time_point_col <- factor(df_dens_tp53$time_point,   levels = levels(df_dens_tp53$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens_tp53$time_point)]}'>{levels(df_dens_tp53$time_point)}<\/b>\") ) # TN only p <- df_dens_tp53 %>%   filter(TP53mut != \"NA\", time_point == \"TN\") %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterise(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_grid(time_point_col ~ fct_rev(TP53mut)) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.y = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\") ggsave(p, file = here(\"plots\", \"TP53mut_tumor_cell_density_TNonly.pdf\"), width = 5, height = 3) p p <- srt@meta.data %>%   add_count(sample_id, name = \"sample_n\") %>%   add_count(sample_id, cell_type, name = \"cell_type_n\") %>%   mutate(prop = cell_type_n / sample_n) %>%   distinct(sample_id, cell_type, time_point, sample_n, cell_type_n, prop) %>%   filter(cell_type != \"Other\") %>%   ggplot(aes(x = cell_type, y = prop)) +   geom_boxplot(aes(fill = time_point), outlier.size = 0.25, fatten = 1.5) +   scale_fill_manual(values = colors$time_point) +   labs(x = \"Cell Type\", y = \"Proportion\", fill = \"Timepoint\") +   scale_y_continuous(breaks = seq(0, 1, by = 0.2)) +   guides(     x = guide_axis(cap = \"both\", angle = 45),     y = guide_axis(cap = \"both\")   ) +   ggpubr::geom_pwc(tip.length = 0, symnum.args = symnum_0.1_star, label = \"p.adj.signif\", aes(group = time_point), hide.ns = T, vjust = 0.5, method = \"wilcox_test\", step.increase = 0.05) +   coord_cartesian(clip = \"off\") ggsave(p, file = here(\"plots\", \"cohort_timepoint_cell_type_prop.pdf\"), width = 4.5, height = 2.5) p p1 <- srt@meta.data %>%   ggplot(aes(x = sample_id)) +   geom_bar(aes(fill = cell_type)) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   guides(x = guide_axis(angle = 90)) +   scale_fill_manual(values = colors$cell_type) +   labs(fill = \"Cell Type\", y = \"Count\", x = \"Sample\") +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.2)) +   theme_clean()  p2 <- srt@meta.data %>%   ggplot(aes(x = sample_id)) +   geom_bar(aes(fill = cell_type), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"none\")   ) +   scale_fill_manual(values = colors$cell_type) +   labs(fill = \"Cell Type\", y = \"Proportion\", x = \"Sample\") +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.2)) +   theme_clean()  # Final formatting p1 <- p1 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + labs(x = NULL) p2 <- p2 + theme(strip.text.x = element_blank())  pcomb <- p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\", ncol = 1) & theme(plot.background = element_blank()) & scale_y_continuous(expand = c(0, 0)) ggsave(pcomb, file = here(\"plots\", \"sample_cellcounts_barplot.pdf\"), width = 10, height = 4) pcomb df <- srt@meta.data %>%   add_count(sample_id, cell_type, name = \"n_ct\") %>%   add_count(sample_id, name = \"n_samp\") %>%   mutate(ct_prop = n_ct / n_samp) %>%   distinct(sample_id, cell_type, ct_prop, n_ct, n_samp, procedure_type) %>%   pivot_wider(id_cols = sample_id, names_from = cell_type, values_from = ct_prop, values_fill = 0) %>%   pivot_longer(cols = !sample_id, names_to = \"cell_type\", values_to = \"cell_type_prop\") %>%   left_join(db$metadata)  # How many samples w/no tumor tum_prop <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   pull(cell_type_prop) # sum(tum_prop == 0) # max(tum_prop) p <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_reorder(sample_id, -cell_type_prop, mean), y = cell_type_prop)) +   geom_col(aes(fill = time_point), show.legend = F) +   scale_fill_manual(values = colors$time_point) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   theme_clean() +   theme(strip.background = element_blank()) +   coord_cartesian(ylim = c(0, 1), clip = \"off\") +   scale_y_continuous(expand = c(0, 0)) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"none\")   ) +   labs(x = \"Sample\", y = \"Tumor Cell Proportion\")  p2 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = time_point, y = cell_type_prop)) +   geom_boxplot(aes(fill = time_point), show.legend = F) +   scale_fill_manual(values = colors$time_point) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 45, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Timepoint\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1)) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", symnum.args = symnum_0.1_star, hide.ns = T, vjust = 0.2) pcomb <- p + free(p2, type = \"label\", side = \"b\") + plot_layout(ncol = 2, widths = c(1, 0.1), axes = \"collect\") &   theme(plot.background = element_blank()) ggsave(pcomb, file = here(\"plots\", \"tumor_cell_proportion_barplot.pdf\"), width = 9, height = 2.5) pcomb p1 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_relevel(site_of_tissue_simple, names(colors$site_of_tissue_simple)), y = cell_type_prop)) +   geom_boxplot(aes(fill = site_of_tissue_simple), show.legend = F) +   geom_quasirandom(alpha = 0.5) +   scale_fill_manual(values = colors$site_of_tissue_simple) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 0, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Tissue Site\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1))  p2 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_relevel(procedure_type, \"Biopsy\", \"Fresh Frozen\", \"Resection\"), y = cell_type_prop)) +   geom_boxplot(aes(fill = procedure_type), show.legend = F) +   geom_quasirandom(alpha = 0.5) +   scale_fill_manual(values = dittoColors()) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 0, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Procedure Type\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1))  pcomb <- p1 + p2 + plot_layout(ncol = 2) &   theme_classic() &   ggpubr::stat_compare_means(label.x.npc = 0.1) &   guides(x = guide_axis(angle = 45)) ggsave(pcomb, file = here(\"plots\", \"tumor_cellularity_site_procedure.pdf\"), width = 7, height = 3) pcomb sce <- readRDS(here(\"paper_data\", \"egfr_cohort_cnv.rds\")) sce$sample_id <- srt$sample_id[match(colnames(sce), srt$cell_id)] sce$cell_type <- srt$cell_type[match(colnames(sce), srt$cell_id)] sce$time_point <- srt$time_point[match(colnames(sce), srt$cell_id)]  sce <- sce[, sce$sample_id %in% unique(srt$sample_id) & sce$cell_type %in% c(\"Tumor Cell\", \"Epithelial\")]  mat <- assay(sce) %>%   t() %>%   log2()  df_anno <- colData(sce) %>%   as.data.frame() %>%   select(cell_type, time_point, sample_id) %>%   arrange(time_point, sample_id, cell_type)  df_anno$cell_type <- factor(df_anno$cell_type)  mat <- mat[rownames(df_anno), ]  anno_cols <- list(   \"time_point\" = colors$time_point,   \"cell_type\" = colors$cell_type[unique(df_anno$cell_type)],   \"sample_id\" = colors$sample_id_new )  left_anno <- HeatmapAnnotation(   df = df_anno,   annotation_label = c(\"Cell Type\", \"Timepoint\", \"Sample\"),   which = \"row\", show_legend = c(T, T, T), col = anno_cols,   annotation_legend_param = list(     \"sample_id\" = list(       ncol = 3     )   ) )  # Split columns by chromosome chrs <- as.vector(gsub(\"chr\", \"\", GenomeInfoDb::seqnames(SummarizedExperiment::rowRanges(sce)))) col_split <- factor(chrs, levels = unique(gtools::mixedsort(chrs)))  ht <- Heatmap(   matrix = mat,   name = \"Log2Ratio\",   left_annotation = left_anno,   col = logr_col_fun(breaks = c(-0.05, -0.01, 0.01, 0.05), colors = c(\"blue\", \"white\", \"white\", \"red\")),   cluster_rows = F,   cluster_columns = F,   show_column_dend = F,   show_row_dend = F,   show_row_names = F,   show_column_names = F,   column_split = col_split,   row_split = df_anno$cell_type,   raster_by_magick = F, raster_device = \"CairoPNG\",   border = T,   raster_quality = 25 )  pdf(here(\"plots/cohort_cnv_heatmap.pdf\"), width = 13, height = 8) draw(ht) dev.off() png    2 suppressWarnings(draw(ht)) lab_cents <- scatools:::get_label_centers(obj = srt_epi, group_var = \"cell_type_epi\", reduced_dim = \"umap\")  df_leg <- srt_epi@meta.data %>%   add_count(cell_type_epi, name = \"epi_n\") %>%   distinct(cell_type_epi, epi_n) %>%   mutate(label = glue(\"({prettyNum(epi_n, big.mark = ',')})\"))  p1_leg <- df_leg %>%   ggplot(aes(y = fct_rev(cell_type_epi), x = epi_n)) +   geom_point(aes(x = -10000, color = cell_type_epi), size = 3.5) +   geom_col(aes(fill = cell_type_epi), width = 0.5) +   geom_text(aes(x = epi_n, label = label), size = 3, hjust = -0.1, color = \"black\") +   scale_fill_manual(values = colors$cell_type_epi) +   scale_color_manual(values = colors$cell_type_epi) +   coord_cartesian(clip = \"off\") +   theme(     strip.placement = \"outside\",     strip.background.y = element_part_rect(side = \"r\", fill = NA),     axis.ticks = element_blank(),     axis.line = element_blank(),     axis.text.x = element_blank(),     strip.text.y.left = element_text(angle = 0, hjust = 1),     plot.margin = margin(1, 4, 1, 1, unit = \"lines\")   ) +   labs(x = NULL, y = NULL) +   scale_x_continuous(expand = c(0.025, 0)) +   guides(x = guide_axis(cap = \"both\")) +   NoLegend()  p1 <- DimPlot(srt_epi, reduction = \"umap\", group.by = \"cell_type_epi\", shuffle = T, raster.dpi = c(350, 350)) +   umap_theme() +   ggrepel::geom_text_repel(     data = lab_cents, aes(x = x, y = y, label = cell_type_epi),     min.segment.length = 0,     segment.size = 0.75,     fontface = \"bold\",     force = 5,     bg.colour = \"white\",     max.iter = 1e9,     bg.r = 0.1,     position = ggpp::position_nudge_center(center_x = 2, center_y = 2, direction = \"radial\", x = 0, y = 0)   ) +   scale_color_manual(values = colors$cell_type_epi, labels = label_num_generator(srt_epi$cell_type_epi), breaks = levels(srt_epi$cell_type_epi)) +   NoAxes() +   NoLegend() +   theme(aspect.ratio = 1) +   labs(title = \"Epithelial Cells\")  layout <- c(   area(t = 10, b = 100, l = 1, r = 100),   area(t = 4, l = 88, b = 59, r = 100) ) # pcomb <- (p1 + theme(plot.margin = margin())) + free(p1_leg + theme(aspect.ratio = 1.9, plot.margin = margin())) + plot_layout(design = layout) pcomb <- (p1 + theme(plot.margin = margin())) + p1_leg + plot_layout(design = layout)   ggsave(pcomb, file = here(\"plots\", \"epi_umap.pdf\"), width = 6.75, height = 4.25) pcomb epi_dotplot <- DotPlotter(srt_epi, features = markers$epi_markers_final, group.by = \"cell_type_epi\", cluster_groups = F, rotate_y_strip = T) ggsave(epi_dotplot, file = here(\"plots\", \"epi_marker_dotplot_unfilt.pdf\"), width = 9, height = 4) epi_dotplot +   theme(axis.text.y = element_markdown()) dp <- DotPlotter(srt_epi, features = markers$epi_markers_hlca, group.by = \"cell_type_epi\", cluster_groups = F) dp_f <- dp + theme(strip.text.x = element_text(angle = 90, hjust = 0), panel.spacing = unit(1, \"mm\")) +   guides(y.sec = guide_axis()) +   labs(title = \"Human Lung Cell Atlas Epithelial Marker List\") +   theme(plot.title = element_text(hjust = 0.5)) ggsave(dp_f, file = here(\"plots\", \"hlca_marker_dotplot.pdf\"), width = 14, height = 4.5) dp_f glist <- c(\"SFTPB\", \"SFTPC\", \"SCGB3A2\", \"KRT13\", \"KRT6A\", \"DSG3\")  x <- Plot_Density_Custom(seurat_object = srt_epi, features = glist, viridis_palette = \"inferno\", joint = F, combine = F)  names(x) <- glist  res <- map(names(x), .f = function(gene) {   x[[gene]]$data %>%     mutate(!!gene := standardize(feature)) }) names(res) <- names(x)  pls <- map(names(res), .f = function(gene) {   p <- res[[gene]] %>%     arrange(.data[[gene]]) %>%     ggplot(aes(x = Xumap_1, y = Xumap_2)) +     scattermore::geom_scattermore(aes(color = .data[[gene]]), pixels = c(256, 256)) +     scale_color_viridis_c(option = \"inferno\") +     labs(title = gene, color = \"Density\") })  pcomb <- pls %>%   wrap_plots(nrow = 2, guides = \"collect\") &   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) &   umap_theme() &   NoAxes() &   theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5, face = \"bold\")) &   labs(color = \"Expression\\nDensity\") ggsave(pcomb, filename = here(\"plots\", \"epi_exp_dens.pdf\"), width = 6, height = 4) pcomb df <- FetchData(srt_epi, vars = c(\"cell_type_epi\", \"SFTPB\")) p <- df %>%   filter(grepl(\"^PDTC|^AT2\", cell_type_epi)) %>%   ggplot(aes(x = fct_reorder(cell_type_epi, -SFTPB, median), y = SFTPB)) +   geom_violin(scale = \"width\", aes(fill = cell_type_epi)) +   guides(x = guide_axis(angle = 45)) +   geom_boxplot(width = 0.1, fill = \"white\", outliers = F) +   scale_fill_manual(values = colors$cell_type_epi) +   theme_classic(base_size = 16) +   NoLegend() +   labs(x = \"Celltype\", y = \"Expression\", title = \"SFTPB\") +   theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) ggsave(p, file = here(\"plots\", \"sftpc_epi_expression.pdf\"), width = 2.5, height = 3) p p1 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = sample_id), position = \"fill\") +   scale_fill_manual(values = colors$sample_id_new) +   labs(fill = \"Patient\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 6))  p2 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = site_of_tissue_simple), position = \"fill\") +   scale_fill_manual(values = colors$site_of_tissue_simple) +   labs(fill = \"Tissue site\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 2))  p3 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = time_point), position = \"fill\") +   scale_fill_manual(values = colors$time_point) +   guides(x = guide_axis(angle = 45)) +   labs(fill = \"Timepoint\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5))  p4 <- srt_epi@meta.data %>%   add_count(cell_type_epi, cell_type, name = \"n1\") %>%   add_count(cell_type_epi, name = \"n2\") %>%   mutate(prop = n1 / n2) %>%   distinct(cell_type, cell_type_epi, prop) %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = cell_type_epi, y = prop)) +   geom_col(aes(fill = fct_rev(cell_type)), show.legend = F) +   geom_hline(yintercept = seq(0.25, 1, by = 0.25), alpha = 0.6, linetype = \"dashed\", color = \"grey50\", linewidth = 0.5) +   scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.25)) +   scale_fill_manual(values = colors$cell_type) +   labs(y = \"Proportion\\n(tumor cells)\")  p5 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = Phase), position = \"fill\") +   scale_fill_manual(values = colors$Phase) +   guides(x = guide_axis(angle = 45)) +   labs(fill = \"Cell Cycle Phase\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5))  gap_size <- 2  pcomb <- wrap_plots(   p1 + theme(plot.margin = margin(t = 4, r = 2, b = gap_size, l = 2, \"mm\")),   free(p3 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p2 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p5 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p4 + theme(plot.margin = margin(t = gap_size, r = 2, b = 2, l = 4, \"mm\")), type = \"space\", side = \"l\"),   ncol = 1, axes = \"collect_x\" ) &   guides(     x = guide_axis(angle = 65, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) &   scale_y_continuous(expand = c(0, 0)) &   labs(x = \"Epithelial cell state\") &   coord_cartesian(clip = \"off\") ggsave(pcomb, file = here(\"plots\", \"epi_type_feature_proportions.pdf\"), width = 6.75, height = 7.5) pcomb use_col <- \"cell_type_epi\"  df <- srt_epi@meta.data %>%   filter(cell_type == \"Tumor Cell\") %>%   add_count(.data[[use_col]], time_point, sample_id, name = \"epi_type_n\") %>%   add_count(sample_id, name = \"sample_n\") %>%   mutate(tum_prop = epi_type_n / sample_n) %>%   distinct(.data[[use_col]], epi_type_n, sample_n, tum_prop, sample_id, time_point)   p_df <- df %>%   group_by(.data[[use_col]]) %>%   rstatix::wilcox_test(tum_prop ~ time_point) %>%   rstatix::adjust_pvalue(method = \"BH\") %>%   rstatix::add_significance(     symbols = symnum_0.1_star$symbols,     cutpoints = symnum_0.1_star$cutpoints   ) %>%   filter(p.adj < 0.1) %>%   rstatix::add_xy_position()  pl <- df %>%   ggplot(aes(x = time_point, y = tum_prop)) +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 0.75, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3, show.legend = F) +   guides(x = guide_axis(angle = 45)) +   labs(y = \"Tumor cell proportion\", x = NULL) +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   facet_grid(. ~ .data[[use_col]], scales = \"free\", space = \"free\", switch = \"x\") +   ggprism::add_pvalue(p_df, tip.length = 0, label = \"p.adj.signif\", step.increase = -0.01, bracket.nudge.y = 0, bracket.size = 0.2, label.size = 2.5) +   scale_y_continuous(breaks = seq(0, 1, by = 0.25), expand = expansion(mult = c(0.05, 0.1))) +   theme(     axis.text.x = element_blank(),     axis.title.y = element_text(hjust = 0.2),     axis.ticks.x = element_blank(),     strip.text.x = element_markdown(angle = 90, hjust = 1, size = 8),     strip.background.x = element_part_rect(side = \"t\", linewidth = 0.5),     strip.placement = \"inside\",     panel.spacing = unit(1, \"mm\"),     strip.clip = \"off\",     legend.position = \"inside\",     legend.position.inside = c(0.8, 0.9),     legend.title.position = \"top\",     legend.title = element_text(hjust = 0.5),     legend.background = element_blank(),     axis.line.x = element_blank()   ) +   labs(fill = \"Timepoint\") +   guides(     x = guide_axis(cap = \"none\"),     y = guide_axis(cap = \"upper\"),     fill = guide_legend(nrow = 1, keywidth = 0.75, keyheight = 0.75)   ) +   coord_cartesian(clip = \"off\") ggsave(pl, file = here(\"plots\", \"epi_cluster_proportions.pdf\"), width = 5, height = 3) pl emt_paths <- grep(\"emt|HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\", ignore.case = T, colnames(srt_epi@meta.data), value = T) myc_paths <- c(grep(\"myc\", ignore.case = T, colnames(srt_epi@meta.data), value = T)) stemness <- c(\"WONG_EMBRYONIC_STEM_CELL_CORE\", \"BENPORATH_PRC2_TARGETS\") metabolic_paths <- c(\"HALLMARK_GLYCOLYSIS\", \"HALLMARK_OXIDATIVE_PHOSPHORYLATION\", \"HALLMARK_MTORC1_SIGNALING\") histological_malignant <- c(\"LUAD\", \"LUSC\", \"SCLC\") histological <- c(\"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_1_CELL\", \"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_2_CELL\", \"alveolar_malignant\", \"TRAVAGLINI_LUNG_BASAL_CELL\", \"TRAVAGLINI_LUNG_CILIATED_CELL\", \"TRAVAGLINI_LUNG_CLUB_CELL\", \"TRAVAGLINI_LUNG_NEUROENDOCRINE_CELL\", \"TRAVAGLINI_LUNG_PROLIFERATING_BASAL_CELL\", \"TRAVAGLINI_LUNG_PROXIMAL_BASAL_CELL\") cell_cycle <- c(grep(\"cycle\", colnames(srt_epi@meta.data), ignore.case = T, value = T)) mapk <- c(\"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\", \"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_SIGNALING_BY_EGFR\")   pth_list <- list(   \"EMT\" = emt_paths,   \"MYC\" = myc_paths,   \"Stem\" = stemness,   \"Metabolic\" = metabolic_paths,   \"Lung Cancer\" = histological_malignant,   \"Histological\" = histological,   \"Cell Cycle\" = cell_cycle,   \"MAPK\" = mapk )  pth_df <- DotPlotter(srt_epi, features = pth_list, cluster_groups = F, cluster_feats = F, group.by = \"cell_type_epi\")$data # Adjust names and filter pth_df <- pth_df %>%   filter(!grepl(\"_epithelial$\", features.plot)) %>%   filter(!grepl(\"TGFB\", features.plot)) %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar_malignant\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_ii_malignant\" ~ \"EMT (II)\",     features.plot == \"emt_iii_malignant\" ~ \"EMT (III)\",     features.plot == \"emt_iv_malignant\" ~ \"EMT (IV)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s_malignant\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m_malignant\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich_malignant\" ~ \"HMG Rich\",     features.plot == \"myc_malignant\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   )) %>%   mutate(     pathway_source = case_when(       grepl(\"_malignant$\", features.plot) ~ \"Malignant Metaprograms\",       grepl(\"_epithelial$\", features.plot) ~ \"Epithelial Metaprograms\",       grepl(\"^TRAVAGLINI\", features.plot) ~ \"Travaglini\",       grepl(\"^HALLMARK_\", features.plot) ~ \"Hallmark Pathways\",       features.plot %in% c(\"S.Score\", \"G2M.Score\") ~ \"Seurat\",       .default = \"Curated\"     )   ) %>%   # Remove extra myc pathways since they all show the same thing   filter(     !(grepl(\"MYC\", features.plot, ignore.case = T) & pathway_source == \"Curated\")   ) %>%   arrange(desc(pathway_source), desc(pathway))  # constructive::construct(unique(pth_df$pathway)) pth_cat_order <- c(   \"Histological\", \"Lung Cancer\", \"MAPK\", \"EMT\", \"MYC\",   \"Stem\", \"Metabolic\", \"Cell Cycle\" )  pth_order <- c(   \"G1S\", \"G2M\", \"G2M Score\", \"HMG Rich\", \"S Score\",   \"EMT (I)\", \"EMT (II)\", \"EMT (III)\", \"EMT (IV)\", \"EMT\",   \"LUAD\", \"LUSC\", \"SCLC\",   \"AT1 Cell\", \"AT2 Cell\", \"Alveolar Signature\", \"Basal Cell\", \"Proximal Basal Cell\",   \"Proliferating Basal Cell\", \"Club Cell\", \"Ciliated Cell\",   \"Neuroendocrine Cell\", \"MYC\", \"MYC Targets V1\", \"MYC Targets V2\",   \"Glycolysis\", \"Oxidative Phosphorylation\", \"MTORC1\", \"Embryonic Stem Cell (Wong)\",   \"PRC2 Targets (Ben-Porath)\",   \"MAPK (KEGG)\", \"MAPK (Biocarta)\", \"MAPK (Reactome)\", \"Nuclear MAPK (Reactome)\", \"EGFR (Reactome)\" )  pth_df <- pth_df %>%   mutate(     pathway = fct_relevel(pathway, rev(pth_order)),     feature.groups = fct_relevel(feature.groups, pth_cat_order)   )  p1 <- pth_df %>%   ggplot(aes(x = \"Pathway Source\", y = pathway)) +   geom_tile(aes(fill = pathway_source), color = \"black\") +   scale_fill_pander() +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line.x = element_blank(),     axis.line.y = element_blank(), legend.position = \"left\", strip.background = element_blank(), strip.text = element_blank()   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(keywidth = 0.5, keyheight = 0.5)   ) +   facet_grid(feature.groups ~ ., scales = \"free\", space = \"free\") +   labs(y = NULL, x = NULL, fill = \"Pathway Source\")   p2 <- pth_df %>%   ggplot(aes(x = id, y = pathway)) +   geom_tile(aes(fill = avg.exp.scaled), color = \"black\") +   scale_fill_viridis_c(option = \"inferno\") +   facet_grid(feature.groups ~ ., scales = \"free\", space = \"free\") +   guides(     x = guide_axis(angle = 90),     x.sec = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line = element_blank(), panel.border = element_blank(),     strip.background.y = element_blank(),     strip.text.y.right = element_text(angle = 0, hjust = 0)   ) +   labs(y = NULL, x = NULL, fill = \"Scaled\\nExpression\")  sig_heatplot <- (p1 + theme(plot.margin = margin(l = 0.25, r = 1, unit = \"mm\"))) + (p2 + theme(plot.margin = margin(r = 0.25, unit = \"mm\"), axis.text.y = element_blank(), axis.ticks.y = element_blank())) + plot_layout(guides = \"collect\", ncol = 2, widths = c(0.03, 1)) + plot_annotation(theme = theme(legend.position = \"bottom\")) &   theme(panel.spacing = unit(1, \"mm\"), panel.border = element_rect(fill = NA, color = \"black\", linewidth = 0.5), legend.box.margin = margin()) &   coord_cartesian(clip = \"off\") ggsave(sig_heatplot, file = here(\"plots\", \"epi_types_signature_heatmap.pdf\"), width = 5, height = 9) sig_heatplot select_paths <- unique(sig_heatplot$data$features.plot) select_paths_name <- unique(sig_heatplot$data$pathway)  all_sig_summary <- srt_epi@meta.data %>%   group_by(sample_id, time_point, is_tumor_cell) %>%   filter(is_tumor_cell) %>%   summarize(across(all_of(select_paths), ~ mean(.x, na.rm = T))) %>%   pivot_longer(cols = all_of(select_paths), names_to = \"features.plot\", values_to = \"Score\") %>%   group_by(features.plot) %>%   mutate(Score_Scaled = scale(Score)[, 1]) %>%   ungroup() %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar_malignant\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_ii_malignant\" ~ \"EMT (II)\",     features.plot == \"emt_iii_malignant\" ~ \"EMT (III)\",     features.plot == \"emt_iv_malignant\" ~ \"EMT (IV)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s_malignant\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m_malignant\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich_malignant\" ~ \"HMG Rich\",     features.plot == \"myc_malignant\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   ))  p <- all_sig_summary %>%   filter(pathway %in% select_paths_name) %>%   ggplot(aes(x = time_point, y = Score)) +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~pathway, scales = \"free\", strip.position = \"left\", ncol = 6) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.clip = \"off\", strip.placement = \"outside\") +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\") +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.1))) +   labs(x = \"Timepoint\") +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_sig_tumor_specific_boxplots_select.pdf\"), width = 8.5, height = 11) p select_paths_main <- c(\"Alveolar Signature\", \"LUAD\", \"Nuclear MAPK (Reactome)\", \"MYC\", \"Proliferating Basal Cell\", \"EMT\") p <- all_sig_summary %>%   filter(pathway %in% select_paths_main) %>%   ggplot(aes(x = time_point, y = Score)) +   # geom_violin(aes(fill = time_point), scale = \"width\") +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~ fct_relevel(pathway, select_paths_main), scales = \"free\", nrow = 1, strip.position = \"left\") +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.text.y = element_text(size = 10), strip.clip = \"off\", strip.placement = \"outside\", panel.spacing = unit(0, \"mm\")) +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\", step.increase = 0.075) +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.05))) +   labs(x = NULL, y = NULL) +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_tumor_boxplot_main.pdf\"), width = 8, height = 2.6) p srt_tum <- srt_epi[, srt_epi$is_tumor_cell] plist <- split(pathways$Gene, pathways$pathway)  meta_programs_df <- read.table(file = \"https://raw.githubusercontent.com/mjz1/meta_programs_tirosh/refs/heads/main/tirosh_mp_patched.txt\", header = T, sep = \"\\t\")  meta_programs <- split(meta_programs_df, meta_programs_df$cell_type)  meta_programs <- map(meta_programs, .f = function(x) {   res <- split(x, x$meta_program)   map(res, .f = function(y) y$Gene) })  names(meta_programs) <- janitor::make_clean_names(names(meta_programs))   plist_sel <- list(   \"Alveolar\" = meta_programs$malignant$alveolar,   \"LUAD\" = plist$LUAD_GIRARD,   \"LUSC\" = plist$LUSC_GIRARD,   \"SCLC\" = plist$SCLC_CCLE,   \"Nuclear MAPK (Reactome)\" = plist$REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES,   \"MAPK (KEGG)\" = plist$KEGG_MAPK_SIGNALING_PATHWAY,   \"MAPK (Biocarta)\" = plist$BIOCARTA_MAPK_PATHWAY )  plist_sel <- map(plist_sel, unique)  fit <- euler(plist_sel) pdf(here(\"plots\", \"mapk_path_overlaps_extended.pdf\"), width = 7, height = 7) plot(fit, quantities = TRUE, legend = F) dev.off() png    2 plot(fit, quantities = TRUE, legend = F) paths <- c(\"Nuclear MAPK (Reactome)\", \"MAPK (Biocarta)\", \"MAPK (KEGG)\") all_sig_summary_wide <- all_sig_summary %>%   pivot_wider(id_cols = c(\"sample_id\", \"time_point\"), names_from = pathway, values_from = Score)    pls <- map(paths, .f = function(pth) {   p <- all_sig_summary_wide %>%     ggplot(aes(x = .data[[pth]], y = LUAD)) +     stat_ellipse(       data = all_sig_summary_wide[all_sig_summary_wide$time_point != \"MRD\", ],       aes(fill = time_point),       type = \"t\",       geom = \"polygon\",       alpha = 0.3, show.legend = F     ) +     geom_point(aes(fill = time_point), pch = 21, stroke = 0.5, size = 2.5) +     geom_line(stat = \"smooth\", method = \"lm\", color = \"#063970\", se = F, linewidth = 1.25, alpha = 0.75) +     ggpubr::stat_cor() +     scale_fill_manual(values = colors$time_point, breaks = names(colors$time_point)) +     theme_classic() +     labs(y = \"LUAD Signature\", fill = \"Timepoint\", x = pth) +     guides(fill = guide_legend(override.aes = list(size = 3.5))) })  pcomb <- wrap_plots(pls, nrow = 1, guides = \"collect\", axes = \"collect\") & theme(panel.border = element_rect(fill = NA, color = \"black\"), axis.line = element_blank()) ggsave(pcomb, file = here(\"plots\", \"luad_mapk_select_cors.pdf\"), width = 8, height = 2.75) pcomb library(easystats) x <- srt_epi@meta.data %>%   filter(is_tumor_cell) %>%   mutate(sample_id = factor(sample_id)) %>%   add_count(sample_id, name = \"n_cells\") %>%   dplyr::group_by(sample_id) %>%   correlation::correlation(select = c(\"LUAD\", \"LUSC\", \"SCLC\"), select2 = c(\"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\"), method = \"spearman\") %>%   left_join(distinct(srt_epi@meta.data[, c(\"sample_id\", \"time_point\")]), by = c(\"Group\" = \"sample_id\")) %>%   mutate(     mapk_path = case_when(       Parameter2 == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",       Parameter2 == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",       Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",       .default = Parameter2     )   ) p <- x %>%   filter(Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_main.pdf\"), width = 6, height = 3.5) p p <- x %>%   filter(Parameter2 != \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.background.x = element_part_rect(side = \"b\", fill = NA, color = \"black\"),     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_supp.pdf\"), width = 11, height = 3.5) p df_ord <- srt_tum@meta.data %>%   group_by(sample_id) %>%   summarize(mean_LUAD = mean(LUAD),             median_LUAD = median(LUAD)) %>%   filter(grepl(\"PD\", sample_id)) %>%   arrange(median_LUAD, mean_LUAD)  samp_ord <- df_ord %>%   pull(sample_id) %>%   as.character() %>%   rev()   secondary_mapk_class <- distinct(db$metadata, sample_id, mapk_alt)  srt_tum <- update_metadata(srt_tum, secondary_mapk_class, match_by = \"sample_id\")  p1 <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord), y = LUAD)) +   # ggplot(aes(x = sample_id_new, y = LUAD)) +    geom_violin(scale = \"width\", aes(fill = time_point), show.legend = F) +   geom_pointrange(     stat = \"summary\", fatten = 0.1,     fun.min = function(z) {       quantile(z, 0.25)     },     fun.max = function(z) {       quantile(z, 0.75)     },     fun = median, position = position_dodge(width = 0.8)   ) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   guides(x = guide_axis(angle = 90)) +   labs(x = \"Sample\", y = \"LUAD score\") +   scale_fill_manual(values = colors$time_point) +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background.x = element_blank()   )  p2 <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(LUAD = mean(LUAD)) %>%   ggplot(aes(x = mapk_alt, y = LUAD)) +   geom_boxplot(outliers = F, aes(fill = time_point), show.legend = F) +   geom_quasirandom(size = 0.3, pch = 1) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.signif\") +   guides(x = guide_axis(angle = 45)) +   scale_fill_manual(values = colors$time_point) +   labs(x = NULL, y = \"LUAD score\\n(per sample means)\") +   coord_cartesian(clip = \"off\") +   theme_classic()  pcomb <- p1 + p2 + plot_layout(nrow = 1, widths = c(1, 0.1), guides = \"collect\") & theme(axis.text.x = element_text(size = 6)) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed.pdf\"), width = 5, height = 2.5) pcomb mapk_alt_df <- db$metadata[,c(\"sample_id\", \"secondary_mapk\", \"mapk_alt\")] %>%   filter(sample_id %in% unique(srt_tum$sample_id)) %>%   separate_rows(secondary_mapk, sep = \", \") %>%   separate(secondary_mapk, sep = \"_\", into = c(\"Gene\", \"Variant_Type\"), remove = F) %>%   mutate(     infercnv = grepl(\"inf\", Variant_Type),     Variant_Type = gsub(\"inf\", \"\", Variant_Type),     Gene = case_when(       grepl(\"NA\", Gene) ~ NA,       .default = Gene     )   ) %>%   tidyr::complete(nesting(sample_id, mapk_alt), Gene, fill = list(Variant_Type = \"NoAlt\")) %>%   mutate(Variant_Type = fct_recode(Variant_Type,     \"Amp\" = \"amp\",     \"Fusion\" = \"fus\"   )) %>%   filter(!grepl(\"MRD|TN\", sample_id),          !is.na(Gene))    var_order <- names(table(mapk_alt_df$Variant_Type) %>% sort(decreasing = T)) var_order <- c(var_order[-1], \"NoAlt\")  gene_ord <- mapk_alt_df[!is.na(mapk_alt_df$Gene) & mapk_alt_df$Variant_Type != \"NoAlt\", ]$Gene %>%   table() %>%   sort(decreasing = T)  p3 <- mapk_alt_df %>%   filter(!is.na(Gene)) %>%   ggplot(aes(y = fct_relevel(Gene, rev(names(gene_ord))), x = fct_relevel(sample_id, samp_ord))) +   geom_tile(aes(fill = fct_relevel(Variant_Type, var_order))) +   geom_point(     data = mapk_alt_df[mapk_alt_df$infercnv & !is.na(mapk_alt_df$infercnv), ],     aes(color = \"inferCNV\"), show.legend = F   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(order = 1, keywidth = 0.4, keyheight = 0.4, ncol = 2, theme = theme(legend.margin = margin()))   ) +   scale_fill_manual(     values = c(       \"NoAlt\" = \"white\",       \"Amp\" = \"#4477AA\",       \"Fusion\" = \"#88CCEE\",       \"C797S\" = \"#117733\",       \"Q1235*\" = \"#DDCC77\",       \"Q535*\" = \"#332288\",       \"W175*\" = \"#999933\"     ),     breaks = var_order[-length(var_order)]   ) +   scale_y_discrete(expand = c(0, 0)) +   scale_x_discrete(expand = c(0, 0)) +   scale_color_manual(values = \"black\") +   # scale_x_discrete(drop = FALSE) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   labs(x = \"Sample\", y = \"Gene\", fill = \"Variant\", color = NULL) p1 <- p1 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())  p3 <- p3 + theme_few() + theme(strip.text.x = element_blank(), strip.background.x = element_blank(), legend.background = element_blank(), plot.background = element_blank(), panel.grid = element_line(color = \"grey50\", linetype = \"solid\", linewidth = 1, colour = \"black\"))  pcomb <- (p1) + free(p2, type = \"space\", side = \"b\") + free(p3, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plus_muts_v2.pdf\"), width = 6, height = 4.25)  pcomb feats <- c(\"EGFR\", \"MET\", \"ALK\", \"BRAF\", \"ERBB2\", \"FGFR1\", \"KIT\", \"KRAS\") mapk_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\"), features = feats)  devtools::load_all() mapk_exp_df <- mapk_exp_df %>%   filter(time_point == \"PD\") %>%   mutate(across(all_of(feats), ~ standardize(.x)))   mapk_exp_df_long <- mapk_exp_df %>%   pivot_longer(cols = feats, names_to = \"Gene\", values_to = \"exp\")  p_df <- mapk_exp_df_long %>%   group_by(Gene) %>%   rstatix::wilcox_test(exp ~ mapk_alt, detailed = T) %>%   rstatix::adjust_pvalue(method = \"BH\") %>%   rstatix::add_significance(     p.col = \"p\", cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"***\", \"**\", \"*\", \"^\", \"\")   )  p4 <- mapk_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord), y = as.numeric(fct_relevel(Gene, rev(names(gene_ord)))))) +   geom_tile(aes(fill = exp), color = \"grey10\") +   scale_fill_viridis_c(option = \"rocket\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   scale_y_continuous(     expand = c(0, 0), breaks = 1:n_distinct(mapk_exp_df_long$Gene),     labels = rev(unique(mapk_exp_df_long$Gene)),     sec.axis = sec_axis(~.,       breaks = 1:n_distinct(mapk_exp_df_long$Gene),       labels = rev(p_df$p.signif[match(feats, p_df$Gene)])     )   ) +   scale_x_discrete(expand = c(0, 0)) +   theme_few() +   theme(     strip.text.x = element_blank(), strip.background.x = element_blank(), panel.border = element_blank(),     axis.ticks.y.right = element_blank(), axis.text.y.right = element_text(vjust = 0.8, hjust = 0)   ) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   labs(x = \"Sample\", y = \"Gene\", fill = \"Normalized\\nExpression\") p4 pcomb <- (p1 + theme(plot.margin = margin())) + free(p2, type = \"space\", side = \"b\") + free((p3 + theme(plot.margin = margin(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())), type = \"space\") + plot_spacer() + free(p4, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1), heights = c(1, 1, 0.6)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plusmuts_plusexp.pdf\"), width = 6, height = 5.5)  pcomb dat <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(across(c(LUAD, LUSC, SCLC), mean)) %>%   ungroup() %>%   mutate(mapk_alt = fct_relevel(mapk_alt, \"Unknown\"))  mods <- map(c(\"LUAD\", \"LUSC\", \"SCLC\"), .f = function(pth) {   mod <- lm(glue::glue(\"{pth} ~ mapk_alt\"), dat) %>%     broom::tidy(conf.int = TRUE) %>%     mutate(Signature = pth, .before = 1) %>%     filter(term == \"mapk_altMAPKalt\") }) %>%   list_rbind()  mods <- mods %>%   rstatix::add_significance(     p.col = \"p.value\",     cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"p<0.0001\", \"p<0.001\", \"p<0.01\", \"p<0.05\", \"p<0.1\", \"ns\")   ) p <- mods %>%   ggplot(., aes(x = estimate, y = fct_reorder(Signature, estimate, mean))) +   geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high), fatten = 0.4) +   geom_vline(xintercept = 0, linetype = \"11\") +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     plot.title = element_text(size = 10, hjust = 0.5),     axis.title = element_text(size = 8)   ) +   labs(y = \"Gene Signature\", x = \"Coefficient\", title = \"Secondary MAPK (PD)\") +   geom_text(data = {     filter(mods, p.value != \"ns\")   }, aes(y = Signature, x = estimate, label = p.value.signif), nudge_y = 0.325, size = 2.25) ggsave(p, file = here(\"plots\", \"acquired_mapk_lm.pdf\"), width = 2, height = 1.5) p feats <- c(\"LUAD\", \"LUSC\", \"SCLC\") sig_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\", \"histology_predominant_short\"), features = feats)  sig_exp_df <- sig_exp_df %>%   mutate(across(all_of(feats), ~ scale(.x)))   df_ord <- srt_tum@meta.data %>%   group_by(sample_id) %>%   summarize(mean_LUAD = mean(LUAD),             median_LUAD = median(LUAD)) %>%   arrange(median_LUAD, mean_LUAD)  samp_ord2 <- df_ord %>%   pull(sample_id) %>%   as.character() %>%   rev()  sig_exp_df_long <- sig_exp_df %>%   pivot_longer(cols = feats, names_to = \"Gene\", values_to = \"exp\")  p0 <- sig_exp_df %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord2))) +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), show.legend = F, color = \"black\") +   scale_fill_manual(     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\"), breaks = c(\"MAPKalt\"),     labels = c(\"Secondary MAPK\"), na.value = \"white\"   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme_few() +   labs(y = NULL, x = NULL, fill = NULL) +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  p1 <- sig_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord2), y = fct_relevel(Gene, \"SCLC\", \"LUSC\", \"LUAD\"))) +   geom_tile(aes(fill = exp), color = \"black\") +   # scale_fill_viridis_c(option = \"rocket\", oob = scales::squish, limits = c(-2, 2)) +   scale_fill_gradient2(low = scales::muted(\"blue\"), mid = \"white\", high = scales::muted(\"red\"), oob = scales::squish, limits = c(-2, 2)) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(fill = \"Normalized\\nExpression\", x = \"Sample\", y = \"Lineage\\nSignature\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   theme_few() +   theme(strip.text.x = element_blank()) p0 <- sig_exp_df %>%   mutate(mapk_alt = ifelse(time_point %in% c(\"TN\", \"MRD\"), \"NA\", mapk_alt)) %>%   ggplot(aes(x = fct_relevel(sample_id, rev(samp_ord2)))) +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), show.legend = T, color = \"black\") +   # geom_point(data = sig_exp_df[sig_exp_df$time_point != \"PD\", ], aes(y = \"MAPKalt\"), pch = 4, size = 5) +   # geom_tile_pattern(aes(y = \"MAPKalt\", fill = \"white\", pattern = \"stripe\", color = \"black\"), show.legend = F) +   scale_fill_manual(     name = \"Secondary MAPK\\nAlteration\",     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"MAPKalt\", \"Unknown\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\")   ) +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, order = 1)) +   ggnewscale::new_scale_fill() +   geom_tile(aes(y = \"Clinical Histology\", fill = histology_predominant_short), color = \"black\") +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant_short,     breaks = names(colors$histology_predominant_short)   ) +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, order = 2)) +   facet_grid(time_point ~ ., scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0), limits = c(\"MAPKalt\", \"Clinical Histology\")) +   guides(x = guide_axis(angle = 90)) +   theme_few() +   labs(y = NULL, x = NULL, fill = NULL) +   theme(     axis.text.y = element_blank(), axis.ticks.y = element_blank(),     strip.text.y.right = element_text(angle = 0, hjust = 0)   ) +   coord_flip()  p1 <- sig_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, rev(samp_ord2)), y = fct_relevel(Gene, \"LUAD\", \"LUSC\", \"SCLC\"))) +   geom_tile(aes(fill = exp), color = \"black\") +   # scale_fill_viridis_c(option = \"rocket\", oob = scales::squish, limits = c(-2, 2)) +   scale_fill_gradient2(low = scales::muted(\"blue\"), mid = \"white\", high = scales::muted(\"red\"), oob = scales::squish, limits = c(-2, 2)) +   facet_grid(time_point ~ ., scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(fill = \"Normalized\\nExpression\", x = \"Samples ranked by LUAD signature\", y = \"Lineage\\nSignature\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   theme_few() +   theme(strip.text.y = element_blank()) +   coord_flip()   pcomb <- free((p1 + theme(plot.margin = margin(4, 0, 0, 30, \"mm\"))), type = \"label\", side = \"b\") + (p0 + theme(plot.margin = margin(4, 30, 0, 0, \"mm\"))) + plot_layout(ncol = 2, widths = c(1, 0.66), guides = \"collect\") + plot_annotation(theme = theme(legend.position = \"bottom\", legend.box.margin = margin(), legend.margin = margin())) ggsave(pcomb, file = here(\"plots\", \"sig_heatmap.pdf\"), width = 4.5, height = 10)  pcomb sig_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\"), features = c(\"LUAD\", \"LUSC\", \"SCLC\"))  devtools::load_all() sig_exp_df <- sig_exp_df %>%   mutate(across(all_of(c(\"LUAD\", \"LUSC\", \"SCLC\")), ~ standardize(.x)))  sig_exp_df$mapk_alt[is.na(sig_exp_df$mapk_alt)] <- \"Unknown\"  library(ggtern)  p1 <- sig_exp_df %>%   mutate(acquired_mapk = ifelse(mapk_alt == \"MAPKalt\", \"MAPKalt\", \"Unknown\")) %>%   ggtern(aes(y = LUAD, x = LUSC, z = SCLC)) +   geom_mask() +   geom_point(aes(fill = time_point, shape = acquired_mapk), size = 3, show.legend = T) +   scale_fill_manual(values = colors$time_point) +   scale_shape_manual(values = c(21, 24)) +   theme_classic() +   Tlab(\"LUAD\") + Llab(\"LUSC\") + Rlab(\"SCLC\") +   theme_nolabels() +   # theme_nomask() +   guides(     fill = guide_legend(override.aes = list(shape = 21)),     shape = guide_legend(override.aes = list(fill = \"black\"))   ) +   labs(fill = \"Timepoint\", shape = \"Acquired MAPK\") +   theme_noticks() +   theme(panel.background = element_blank(), panel.border = element_blank()) +   # facet_grid(.~time_point, switch = \"x\") +   theme(     # axis.title = element_markdown(color = \"blue\"), # This is where to do it     strip.background = element_part_rect(side = \"\"),     legend.position = \"right\",     strip.text.x.bottom = element_text(size = 12, face = \"bold\")   ) ggsave(p1, file = here(\"plots\", \"sample_ternary_mapk.pdf\"), width = 5.4, height = 3.4) p1"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Figure 1 – Swimmers plot","title":null,"text":"grab legend","code":"# SETTINGS tri_stroke <- 0.25 tri_size <- 2 tri_nudge <- 0.275 ###### swimmers_df <- db$metadata %>%   mutate(dx_date = 0) %>%   select(sample_id, sample_id_orig, dmp_id, dx_date, procedure, osi_start, osi_end, osi_lot, other_treatment, other_treatment_start, other_treatment_end, other_treatment_lot, other_same_osi, radio_prog, met_date, impact, last_tp, last_followup_status, time_point, histology, has_impact) %>%   mutate(     # Category to split the timing up     t_group = ifelse(last_tp >= 60, \">5years\", \"<5years\"),     last_followup_status = fct_recode(last_followup_status,       \"Alive\" = \"ALIVE\",       \"Deceased\" = \"DECEASED\"     )   )  # Pull out treatment information into single table treatments_df <- swimmers_df %>%   mutate(treatment = \"Osimertinib\") %>%   filter(!is.na(osi_start)) %>%   select(sample_id, sample_id_orig, dmp_id, treatment, time_point, last_tp, treatment_start = osi_start, treatment_end = osi_end, lot = osi_lot)  other_treatments_df <- swimmers_df %>%   filter(other_same_osi == \"different\") %>%   select(sample_id, sample_id_orig, dmp_id, treatment = other_treatment, time_point, last_tp, treatment_start = other_treatment_start, treatment_end = other_treatment_end, lot = other_treatment_lot) %>%   # Clean up treatment name   mutate(treatment = gsub(\" |rechallenge|now with pemetrexed \\\\(for metastatic KRAS mutated LC\\\\)|Breast cancer treatment: |S\\\\/p| \\\\(peme maintenance\\\\)|\\\\(peme/bev maintenance\\\\)\", \"\", treatment)) %>%   separate_longer_delim(cols = treatment, delim = c(\"+\")) %>%   # separate_longer_delim(cols = treatment, delim = c(\"/\")) %>%   mutate(     treatment_orig = treatment,     treatment = case_when(       grepl(\"pembro\", treatment, ignore.case = T) ~ \"Chemo+IO\",       grepl(\"bev\", treatment, ignore.case = T) ~ \"Chemo+Bev\",       grepl(\"carb|peme|pacli\", treatment, ignore.case = T) ~ \"Chemo\",       grepl(\"Osi\", treatment, ignore.case = T) ~ \"Osimertinib\",       .default = treatment     ),     treatment_simple = case_when(       grepl(\"Chemo\\\\+\", treatment) ~ \"Chemo combo\",       .default = treatment     )   )  treatments_df <- plyr::rbind.fill(treatments_df, other_treatments_df)  # Bind the additional EGFR TKI data other_treatments_egfr <- read.table(file = here(\"paper_data\", \"other_tkis_update_mar_2025.txt\"), header = T, sep = \"\\t\") %>%   dplyr::rename(     sample_id_orig = sample_id,     treatment = AGENT,     treatment_start = trt_start,     treatment_end = trt_end   ) %>%   select(sample_id_orig, treatment, treatment_start, treatment_end) %>%   left_join(db$metadata[, c(\"sample_id\", \"sample_id_orig\", \"time_point\", \"last_tp\", \"dmp_id\")]) %>%   mutate(treatment_simple = treatment) treatments_df <- plyr::rbind.fill(treatments_df, other_treatments_egfr)  osi_df <- treatments_df %>%   filter(treatment == \"Osimertinib\") other_treatments_df <- treatments_df %>%   filter(treatment != \"Osimertinib\")   # Backgrounds for each timepoint facet and texts backgrounds <- map(levels(db$metadata$time_point), .f = function(tp) {   element_part_rect(side = \"r\", fill = colors$time_point[[tp]]) }) texts <- map(levels(db$metadata$time_point), .f = function(tp) {   element_text(face = \"bold\", color = \"black\") })  # Facet relabeller tp_names <- c(   \"TN\" = \"Treatment-Naive\",   \"MRD\" = \"Residual Disease\",   \"PD\" = \"Progressive Disease\" )  # TO NOTE: Some values for met date and impact are <0 by small amount. These are set to zero to allow the x axis sqrt transform. swimmers_df$met_date[swimmers_df$met_date < 0] <- 0 swimmers_df$impact[swimmers_df$impact < 0] <- 0  swimmers_plot <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   ggplot(aes(y = sample_id)) +   # LAST FOLLOWUP   geom_segment(aes(x = dx_date, xend = last_tp), linewidth = 1, color = \"black\") +   # OSI INTERVAL   geom_segment(data = osi_df, linewidth = 4, aes(x = treatment_start, xend = treatment_end, color = \"Osimertinib\"), position = position_nudge(y = 0)) +   # OTHER TREATMENTS   geom_segment(data = other_treatments_df, linewidth = 1.5, aes(x = treatment_start, xend = treatment_end, color = treatment_simple)) +   scale_color_manual(     na.translate = F,     name = \"Treatments\",     values = c(       \"Osimertinib\" = \"#a5c1f2\",       \"Erlotinib\" = \"#0072B5FF\",       \"Dacomitinib\" = \"#3B96E2\",       \"Afatinib\" = \"#8B919C\",       \"Chemo combo\" = \"#BC3C29FF\",       \"Chemo\" = \"#FFDC91FF\",       \"Crizotinib\" = \"#20854EFF\",       \"TDM1\" = \"#EE4C97FF\"     ),     limits = c(\"Osimertinib\", \"Erlotinib\", \"Dacomitinib\", \"Afatinib\", \"Chemo combo\", \"Chemo\", \"Crizotinib\", \"TDM1\"),     guide = guide_legend(order = 3)   ) +   # LAST STATUS   geom_point(aes(x = last_tp, shape = last_followup_status, fill = last_followup_status), size = 2.5, stroke = 0.2) +   scale_shape_manual(     name = \"Last followup\", values = c(\"Alive\" = 21, \"Deceased\" = 22),     guide = guide_legend(order = 4)   ) +   scale_fill_manual(     name = \"Last followup\", values = c(\"Alive\" = \"#35aaf2\", \"Deceased\" = \"#ab2230\"),     guide = guide_legend(order = 4)   ) +   new_scale_fill() +   new_scale(\"shape\") +   # EVENTS   ## MET TIMEPOINT   geom_point(aes(x = met_date, fill = \"Metastasis\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = tri_nudge), pch = 25) +   ## Date of radiographic progression   geom_point(aes(x = radio_prog, fill = \"Radiographic Progression\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = tri_nudge), pch = 25) +   scale_fill_manual(     name = \"Clinical Event\",     values = c(       \"Metastasis\" = \"red\",       \"Radiographic Progression\" = \"orange\"     ), guide = guide_legend(override.aes = list(size = 3), order = 2),     limits = c(\"Metastasis\", \"Radiographic Progression\")   ) +   new_scale_fill() +   ## IMPACT SAMPLE   geom_point(aes(x = impact, fill = \"IMPACT\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = -tri_nudge), pch = 24) +   ## Procedure sample   geom_point(aes(x = procedure, fill = \"snRNA\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = 0), pch = 23) +   scale_fill_manual(     name = \"Molecular Assay\",     values = c(       \"snRNA\" = \"#33589c\",       \"IMPACT\" = \"black\"     ), guide = guide_legend(override.aes = list(size = 3), order = 1),     limits = c(\"snRNA\", \"IMPACT\")   ) +   # AXIS LABELS   labs(x = \"Time from initial diagnosis (Years)\", y = NULL) +   scale_x_sqrt(     breaks = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),     labels = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),     sec.axis = sec_axis(~.,       name = \"Time from initial diagnosis (Years)\",       breaks = c(1e-4, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),       labels = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30)     )   ) +   facet_grid2(time_point ~ .,     scales = \"free\", space = \"free_y\", switch = \"y\",     strip = strip_themed(       background_y = backgrounds,       text_y = texts     ),     labeller = as_labeller(tp_names)   ) +   theme_clean() +   theme(     panel.border = element_part_rect(side = \"tblr\", fill = NA),     axis.line.x = element_blank(),     axis.line.y = element_blank(),     strip.background = element_part_rect(side = \"r\", fill = NA, color = \"black\", linewidth = 1, linetype = \"solid\"),     plot.background = element_blank(),     strip.placement = \"outside\",     strip.clip = \"off\",     legend.position = \"left\"   ) +   coord_cartesian(clip = \"off\")  swimmers_plot meta_plot <- db$metadata %>%   # Add WGD annotation   left_join(db$impact_data$facets_data[, c(\"dmp_pid\", \"wgd\", \"ploidy\")], by = c(\"dmp_id\" = \"dmp_pid\")) %>%   ggplot(aes(y = fct_rev(sample_id))) +   # AGE   geom_tile(aes(x = \"Age at diagnosis\", fill = age_at_intial_diagnosis), color = \"black\", linewidth = 0.5) +   scale_fill_gradientn(     name = \"Age at Diagnosis\", colours = viridis::mako(10),     guide = guide_colorbar(order = 2, position = \"bottom\", keywidth = 5, keyheight = 0.7)   ) +   new_scale_fill() +   # HISTOLOGY   geom_tile(aes(x = \"Clinical Histology\", fill = histology_predominant), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant,     breaks = c(       \"Lung Adenocarcinoma\",       \"Lung Squamous Cell Carcinoma\",       \"Small Cell Lung Cancer\",       \"Poorly Differentiated\"     ),     guide = guide_legend(order = 1, position = \"bottom\", keywidth = 0.7, keyheight = 1, ncol = 2)   ) +   new_scale_fill() +   # TUMOR STAGE   geom_tile(aes(x = \"Stage of sample\", fill = stage_of_tissue_simple), color = \"black\", linewidth = 0.5) +   geom_tile(aes(x = \"Stage at diagnosis\", fill = stage_at_initial_diagnosis_simple), color = \"black\", linewidth = 0.5) +   scale_fill_viridis_d(name = \"Tumor Stage\", guide = guide_legend(order = 4, position = \"bottom\", keywidth = 0.7, keyheight = 1, ncol = 2)) +   new_scale_fill() +   # TISSUE SITE   geom_tile(aes(x = \"Tissue Site\", fill = site_of_tissue_simple), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Tissue Site\", values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple),     guide = guide_legend(order = 3, keywidth = 0.7, keyheight = 1, ncol = 2, position = \"bottom\")   ) +   new_scale_fill() +   geom_tile(aes(x = \"Sex\", fill = sex), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Sex\", values = colors$sex, breaks = names(colors$sex), na.value = \"white\",     guide = guide_legend(order = 6, keywidth = 0.7, keyheight = 1, ncol = 1, position = \"bottom\")   ) +   new_scale_fill() +   # BINARY (IMPACT, TP53, RB1)   geom_tile(aes(x = \"IMPACT\", fill = has_impact), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"Smoking History\", fill = smoking_history_simple), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"WGD\", fill = wgd), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"TP53mut\", fill = tp53mut), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"RB1mut\", fill = rb1mut), color = \"black\", linewidth = 0.5, show.legend = F) +   scale_fill_manual(     name = \"IMPACT\", values = colors$tf, breaks = names(colors$tf), na.value = \"white\",     guide = guide_legend(order = 5)   ) +   new_scale_fill() +   facet_nested(time_point ~ ., scales = \"free\", space = \"free_y\") +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   scale_x_discrete(     expand = c(0, 0),     limits = c(\"Clinical Histology\", \"Age at diagnosis\", \"Tissue Site\", \"Stage at diagnosis\", \"Stage of sample\", \"IMPACT\", \"WGD\", \"TP53mut\", \"RB1mut\", \"Smoking History\", \"Sex\")   ) +   guides(     x = guide_axis(angle = 55),     x.sec = guide_axis(angle = 90)   ) +   labs(x = NULL, y = NULL) +   theme_clean() +   theme(     strip.text.y = element_blank(),     panel.border = element_blank(),     plot.background = element_blank(),     axis.line.x = element_blank(),     axis.line.y = element_blank(),     panel.grid.major.y = element_blank(),     legend.key.height = unit(1, \"lines\"),     legend.key.width = unit(0.6, \"lines\"),     legend.title.position = \"top\", legend.title = element_text(hjust = 0.5)   ) meta_plot egfr_hits <- read.table(file = here(\"paper_data\", \"egfr_hits_table.txt\"), header = T, sep = \"\\t\") %>%   dplyr::rename(sample_id_orig = sample_id) %>%   left_join(db$metadata) egfr_hits <- egfr_hits %>%   mutate(type_name = paste(type, egfr_cat, sep = \"_\"))  egfr_mat <- egfr_hits %>%   mutate(value = 1) %>%   pivot_wider(id_cols = c(\"sample_id\"), names_from = \"variant\", values_from = value, values_fill = 0) %>%   column_to_rownames(\"sample_id\") %>%   t() %>%   memoSort() sample_order <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   pull(sample_id) %>%   levels() %>%   as.character()  var_order <- c(   \"Primary_Exon 19\", \"Primary_L858R\", \"Secondary_Amplification\",   \"Primary_G719X\", \"Primary_T790M\", \"Secondary_C797S\", \"Primary_Other\" )  egfr_hits$sample_id_new <- fct_relevel(egfr_hits$sample_id_new, sample_order)  egfr_hit_plot <- egfr_hits %>%   # mutate(denovo = factor(ifelse(grepl(\"De novo\", type_name), \"Pre-Osi\", \"Post-Osi\"),   #   levels = c(\"Pre-Osi\", \"Post-Osi\")   # )) %>%   ggplot(aes(y = sample_id_new, x = fct_relevel(type_name, var_order))) +   geom_tile() +   facet_nested(time_point ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"x\", strip = strip_nested(clip = \"off\")) +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order), expand = c(0, 0)) +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   guides(x = guide_axis(angle = 55)) +   labs(y = \"Sample ID\", x = NULL) +   theme_clean() +   theme(axis.line.x = element_blank(), axis.line.y = element_blank(), panel.border = element_rect(fill = NA, color = \"black\"), plot.background = element_blank(), strip.placement = \"outside\", strip.background = element_part_rect(side = \"l\", color = \"black\", fill = NA, linetype = \"solid\"), strip.background.x = element_part_rect(side = \"t\", color = \"black\", fill = NA, linetype = \"solid\"))  # Instead do as proportion of the timepoints df_egfr_cat_prop <- egfr_hits %>%   add_count(time_point, type_name, name = \"n_type\") %>%   complete(time_point, type_name, fill = list(n_type = 0)) %>%   add_count(time_point, name = \"n_tp\") %>%   mutate(prop = n_type / n_tp) %>%   distinct(time_point, type_name, time_point, n_type, n_tp, prop, type) %>%   filter(!is.na(type)) %>%   mutate(time_point = fct_relevel(time_point, levels(db$metadata$time_point)))    egfr_hit_plot_top <- df_egfr_cat_prop %>%   ggplot(aes(x = (fct_relevel(type_name, var_order)))) +   geom_col(aes(fill = time_point, y = prop), position = \"dodge\") +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order)) +   scale_y_continuous(position = \"right\") +   facet_nested(. ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"y\", strip = strip_nested(clip = \"off\")) +   scale_fill_manual(values = colors$time_point) +   guides(     fill = guide_legend(keywidth = 0.7, keyheight = 1, position = \"right\"),     x = guide_axis(cap = \"both\", angle = 55),     y = guide_axis(cap = \"both\")   ) +   theme_clean() +   theme(plot.background = element_blank(), axis.line.y.right = element_line(), strip.placement = \"outside\", strip.background.x = element_part_rect(linetype = \"solid\", side = \"b\", color = \"black\", fill = NA)) +   labs(y = \"Proportion\", x = NULL, fill = \"Timepoint\") pegfr <- (egfr_hit_plot_top + theme(plot.margin = margin(r = 3, unit = \"lines\"))) + egfr_hit_plot + plot_layout(ncol = 1, heights = c(0.125, 1)) & theme(panel.spacing = unit(0.2, \"lines\")) pegfr lgds <- ggpubr::get_legend(meta_plot) lgd <- ggpubr::as_ggplot(lgds) ggsave(lgd, file = here(\"plots\", \"swimmers_anno_legend.pdf\"), width = 14, height = 2) spc <- margin(t = 0.2, r = 0.2, b = 0.2, l = 0.2, unit = \"lines\") empty_panel <- plot_spacer() + theme(plot.margin = spc) pcomb_ext <- plot_grid(   plotlist = list(     # empty_panel,     # empty_panel,     # egfr_hit_plot_top + theme(plot.margin = spc),     swimmers_plot + theme(plot.margin = spc) + coord_cartesian(clip = \"off\"),     (meta_plot + theme(       legend.position = \"none\",       plot.margin = spc,       axis.text.y.right = element_blank(),       axis.ticks.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55),       strip.clip = \"off\"     ) + coord_cartesian(clip = \"off\")),     egfr_hit_plot + theme(       plot.margin = spc, axis.ticks = element_line(color = \"black\"),       strip.background.y.right = element_blank(),       strip.text.y.right = element_blank(),       axis.title.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55)     ) + coord_cartesian(clip = \"off\")   ),   align = \"hv\",   nrow = 1,   ncol = 3,   rel_widths = c(1, 0.32, 0.3),   # rel_heights = c(0.25, 1),   axis = \"tb\" ) ggsave(pcomb_ext, file = here(\"plots\", \"swimmers_plus_annos_muts.pdf\"), width = 10, height = 14.3) pcomb_ext egfr_hit_plot_top_final <- egfr_hit_plot_top +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), strip.clip = \"off\", plot.margin = margin(t = 0.25, b = 1.5, l = 0.25, r = 0.25, unit = \"lines\"), strip.background = element_blank()) +   coord_cartesian(clip = \"off\") +   guides(x = guide_axis(angle = 35, cap = \"both\")) ggsave(egfr_hit_plot_top_final, file = here(\"plots\", \"swimmers_mut_prop_top.pdf\"), width = 3.5, height = 2.5) egfr_hit_plot_top_final"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Main panel","title":null,"text":"","code":"# SETTINGS tri_stroke <- 0.25 tri_size <- 2 tri_nudge <- 0.275 ###### swimmers_df <- db$metadata %>%   mutate(dx_date = 0) %>%   select(sample_id, sample_id_orig, dmp_id, dx_date, procedure, osi_start, osi_end, osi_lot, other_treatment, other_treatment_start, other_treatment_end, other_treatment_lot, other_same_osi, radio_prog, met_date, impact, last_tp, last_followup_status, time_point, histology, has_impact) %>%   mutate(     # Category to split the timing up     t_group = ifelse(last_tp >= 60, \">5years\", \"<5years\"),     last_followup_status = fct_recode(last_followup_status,       \"Alive\" = \"ALIVE\",       \"Deceased\" = \"DECEASED\"     )   )  # Pull out treatment information into single table treatments_df <- swimmers_df %>%   mutate(treatment = \"Osimertinib\") %>%   filter(!is.na(osi_start)) %>%   select(sample_id, sample_id_orig, dmp_id, treatment, time_point, last_tp, treatment_start = osi_start, treatment_end = osi_end, lot = osi_lot)  other_treatments_df <- swimmers_df %>%   filter(other_same_osi == \"different\") %>%   select(sample_id, sample_id_orig, dmp_id, treatment = other_treatment, time_point, last_tp, treatment_start = other_treatment_start, treatment_end = other_treatment_end, lot = other_treatment_lot) %>%   # Clean up treatment name   mutate(treatment = gsub(\" |rechallenge|now with pemetrexed \\\\(for metastatic KRAS mutated LC\\\\)|Breast cancer treatment: |S\\\\/p| \\\\(peme maintenance\\\\)|\\\\(peme/bev maintenance\\\\)\", \"\", treatment)) %>%   separate_longer_delim(cols = treatment, delim = c(\"+\")) %>%   # separate_longer_delim(cols = treatment, delim = c(\"/\")) %>%   mutate(     treatment_orig = treatment,     treatment = case_when(       grepl(\"pembro\", treatment, ignore.case = T) ~ \"Chemo+IO\",       grepl(\"bev\", treatment, ignore.case = T) ~ \"Chemo+Bev\",       grepl(\"carb|peme|pacli\", treatment, ignore.case = T) ~ \"Chemo\",       grepl(\"Osi\", treatment, ignore.case = T) ~ \"Osimertinib\",       .default = treatment     ),     treatment_simple = case_when(       grepl(\"Chemo\\\\+\", treatment) ~ \"Chemo combo\",       .default = treatment     )   )  treatments_df <- plyr::rbind.fill(treatments_df, other_treatments_df)  # Bind the additional EGFR TKI data other_treatments_egfr <- read.table(file = here(\"paper_data\", \"other_tkis_update_mar_2025.txt\"), header = T, sep = \"\\t\") %>%   dplyr::rename(     sample_id_orig = sample_id,     treatment = AGENT,     treatment_start = trt_start,     treatment_end = trt_end   ) %>%   select(sample_id_orig, treatment, treatment_start, treatment_end) %>%   left_join(db$metadata[, c(\"sample_id\", \"sample_id_orig\", \"time_point\", \"last_tp\", \"dmp_id\")]) %>%   mutate(treatment_simple = treatment) treatments_df <- plyr::rbind.fill(treatments_df, other_treatments_egfr)  osi_df <- treatments_df %>%   filter(treatment == \"Osimertinib\") other_treatments_df <- treatments_df %>%   filter(treatment != \"Osimertinib\")   # Backgrounds for each timepoint facet and texts backgrounds <- map(levels(db$metadata$time_point), .f = function(tp) {   element_part_rect(side = \"r\", fill = colors$time_point[[tp]]) }) texts <- map(levels(db$metadata$time_point), .f = function(tp) {   element_text(face = \"bold\", color = \"black\") })  # Facet relabeller tp_names <- c(   \"TN\" = \"Treatment-Naive\",   \"MRD\" = \"Residual Disease\",   \"PD\" = \"Progressive Disease\" )  # TO NOTE: Some values for met date and impact are <0 by small amount. These are set to zero to allow the x axis sqrt transform. swimmers_df$met_date[swimmers_df$met_date < 0] <- 0 swimmers_df$impact[swimmers_df$impact < 0] <- 0  swimmers_plot <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   ggplot(aes(y = sample_id)) +   # LAST FOLLOWUP   geom_segment(aes(x = dx_date, xend = last_tp), linewidth = 1, color = \"black\") +   # OSI INTERVAL   geom_segment(data = osi_df, linewidth = 4, aes(x = treatment_start, xend = treatment_end, color = \"Osimertinib\"), position = position_nudge(y = 0)) +   # OTHER TREATMENTS   geom_segment(data = other_treatments_df, linewidth = 1.5, aes(x = treatment_start, xend = treatment_end, color = treatment_simple)) +   scale_color_manual(     na.translate = F,     name = \"Treatments\",     values = c(       \"Osimertinib\" = \"#a5c1f2\",       \"Erlotinib\" = \"#0072B5FF\",       \"Dacomitinib\" = \"#3B96E2\",       \"Afatinib\" = \"#8B919C\",       \"Chemo combo\" = \"#BC3C29FF\",       \"Chemo\" = \"#FFDC91FF\",       \"Crizotinib\" = \"#20854EFF\",       \"TDM1\" = \"#EE4C97FF\"     ),     limits = c(\"Osimertinib\", \"Erlotinib\", \"Dacomitinib\", \"Afatinib\", \"Chemo combo\", \"Chemo\", \"Crizotinib\", \"TDM1\"),     guide = guide_legend(order = 3)   ) +   # LAST STATUS   geom_point(aes(x = last_tp, shape = last_followup_status, fill = last_followup_status), size = 2.5, stroke = 0.2) +   scale_shape_manual(     name = \"Last followup\", values = c(\"Alive\" = 21, \"Deceased\" = 22),     guide = guide_legend(order = 4)   ) +   scale_fill_manual(     name = \"Last followup\", values = c(\"Alive\" = \"#35aaf2\", \"Deceased\" = \"#ab2230\"),     guide = guide_legend(order = 4)   ) +   new_scale_fill() +   new_scale(\"shape\") +   # EVENTS   ## MET TIMEPOINT   geom_point(aes(x = met_date, fill = \"Metastasis\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = tri_nudge), pch = 25) +   ## Date of radiographic progression   geom_point(aes(x = radio_prog, fill = \"Radiographic Progression\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = tri_nudge), pch = 25) +   scale_fill_manual(     name = \"Clinical Event\",     values = c(       \"Metastasis\" = \"red\",       \"Radiographic Progression\" = \"orange\"     ), guide = guide_legend(override.aes = list(size = 3), order = 2),     limits = c(\"Metastasis\", \"Radiographic Progression\")   ) +   new_scale_fill() +   ## IMPACT SAMPLE   geom_point(aes(x = impact, fill = \"IMPACT\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = -tri_nudge), pch = 24) +   ## Procedure sample   geom_point(aes(x = procedure, fill = \"snRNA\"), size = tri_size, stroke = tri_stroke, position = position_nudge(y = 0), pch = 23) +   scale_fill_manual(     name = \"Molecular Assay\",     values = c(       \"snRNA\" = \"#33589c\",       \"IMPACT\" = \"black\"     ), guide = guide_legend(override.aes = list(size = 3), order = 1),     limits = c(\"snRNA\", \"IMPACT\")   ) +   # AXIS LABELS   labs(x = \"Time from initial diagnosis (Years)\", y = NULL) +   scale_x_sqrt(     breaks = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),     labels = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),     sec.axis = sec_axis(~.,       name = \"Time from initial diagnosis (Years)\",       breaks = c(1e-4, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30),       labels = c(0, 1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30)     )   ) +   facet_grid2(time_point ~ .,     scales = \"free\", space = \"free_y\", switch = \"y\",     strip = strip_themed(       background_y = backgrounds,       text_y = texts     ),     labeller = as_labeller(tp_names)   ) +   theme_clean() +   theme(     panel.border = element_part_rect(side = \"tblr\", fill = NA),     axis.line.x = element_blank(),     axis.line.y = element_blank(),     strip.background = element_part_rect(side = \"r\", fill = NA, color = \"black\", linewidth = 1, linetype = \"solid\"),     plot.background = element_blank(),     strip.placement = \"outside\",     strip.clip = \"off\",     legend.position = \"left\"   ) +   coord_cartesian(clip = \"off\")  swimmers_plot"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Side annotations","title":null,"text":"","code":"meta_plot <- db$metadata %>%   # Add WGD annotation   left_join(db$impact_data$facets_data[, c(\"dmp_pid\", \"wgd\", \"ploidy\")], by = c(\"dmp_id\" = \"dmp_pid\")) %>%   ggplot(aes(y = fct_rev(sample_id))) +   # AGE   geom_tile(aes(x = \"Age at diagnosis\", fill = age_at_intial_diagnosis), color = \"black\", linewidth = 0.5) +   scale_fill_gradientn(     name = \"Age at Diagnosis\", colours = viridis::mako(10),     guide = guide_colorbar(order = 2, position = \"bottom\", keywidth = 5, keyheight = 0.7)   ) +   new_scale_fill() +   # HISTOLOGY   geom_tile(aes(x = \"Clinical Histology\", fill = histology_predominant), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant,     breaks = c(       \"Lung Adenocarcinoma\",       \"Lung Squamous Cell Carcinoma\",       \"Small Cell Lung Cancer\",       \"Poorly Differentiated\"     ),     guide = guide_legend(order = 1, position = \"bottom\", keywidth = 0.7, keyheight = 1, ncol = 2)   ) +   new_scale_fill() +   # TUMOR STAGE   geom_tile(aes(x = \"Stage of sample\", fill = stage_of_tissue_simple), color = \"black\", linewidth = 0.5) +   geom_tile(aes(x = \"Stage at diagnosis\", fill = stage_at_initial_diagnosis_simple), color = \"black\", linewidth = 0.5) +   scale_fill_viridis_d(name = \"Tumor Stage\", guide = guide_legend(order = 4, position = \"bottom\", keywidth = 0.7, keyheight = 1, ncol = 2)) +   new_scale_fill() +   # TISSUE SITE   geom_tile(aes(x = \"Tissue Site\", fill = site_of_tissue_simple), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Tissue Site\", values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple),     guide = guide_legend(order = 3, keywidth = 0.7, keyheight = 1, ncol = 2, position = \"bottom\")   ) +   new_scale_fill() +   geom_tile(aes(x = \"Sex\", fill = sex), color = \"black\", linewidth = 0.5) +   scale_fill_manual(     name = \"Sex\", values = colors$sex, breaks = names(colors$sex), na.value = \"white\",     guide = guide_legend(order = 6, keywidth = 0.7, keyheight = 1, ncol = 1, position = \"bottom\")   ) +   new_scale_fill() +   # BINARY (IMPACT, TP53, RB1)   geom_tile(aes(x = \"IMPACT\", fill = has_impact), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"Smoking History\", fill = smoking_history_simple), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"WGD\", fill = wgd), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"TP53mut\", fill = tp53mut), color = \"black\", linewidth = 0.5, show.legend = F) +   geom_tile(aes(x = \"RB1mut\", fill = rb1mut), color = \"black\", linewidth = 0.5, show.legend = F) +   scale_fill_manual(     name = \"IMPACT\", values = colors$tf, breaks = names(colors$tf), na.value = \"white\",     guide = guide_legend(order = 5)   ) +   new_scale_fill() +   facet_nested(time_point ~ ., scales = \"free\", space = \"free_y\") +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   scale_x_discrete(     expand = c(0, 0),     limits = c(\"Clinical Histology\", \"Age at diagnosis\", \"Tissue Site\", \"Stage at diagnosis\", \"Stage of sample\", \"IMPACT\", \"WGD\", \"TP53mut\", \"RB1mut\", \"Smoking History\", \"Sex\")   ) +   guides(     x = guide_axis(angle = 55),     x.sec = guide_axis(angle = 90)   ) +   labs(x = NULL, y = NULL) +   theme_clean() +   theme(     strip.text.y = element_blank(),     panel.border = element_blank(),     plot.background = element_blank(),     axis.line.x = element_blank(),     axis.line.y = element_blank(),     panel.grid.major.y = element_blank(),     legend.key.height = unit(1, \"lines\"),     legend.key.width = unit(0.6, \"lines\"),     legend.title.position = \"top\", legend.title = element_text(hjust = 0.5)   ) meta_plot"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"EGFR de novo vs secondary","title":null,"text":"","code":"egfr_hits <- read.table(file = here(\"paper_data\", \"egfr_hits_table.txt\"), header = T, sep = \"\\t\") %>%   dplyr::rename(sample_id_orig = sample_id) %>%   left_join(db$metadata) egfr_hits <- egfr_hits %>%   mutate(type_name = paste(type, egfr_cat, sep = \"_\"))  egfr_mat <- egfr_hits %>%   mutate(value = 1) %>%   pivot_wider(id_cols = c(\"sample_id\"), names_from = \"variant\", values_from = value, values_fill = 0) %>%   column_to_rownames(\"sample_id\") %>%   t() %>%   memoSort() sample_order <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   pull(sample_id) %>%   levels() %>%   as.character()  var_order <- c(   \"Primary_Exon 19\", \"Primary_L858R\", \"Secondary_Amplification\",   \"Primary_G719X\", \"Primary_T790M\", \"Secondary_C797S\", \"Primary_Other\" )  egfr_hits$sample_id_new <- fct_relevel(egfr_hits$sample_id_new, sample_order)  egfr_hit_plot <- egfr_hits %>%   # mutate(denovo = factor(ifelse(grepl(\"De novo\", type_name), \"Pre-Osi\", \"Post-Osi\"),   #   levels = c(\"Pre-Osi\", \"Post-Osi\")   # )) %>%   ggplot(aes(y = sample_id_new, x = fct_relevel(type_name, var_order))) +   geom_tile() +   facet_nested(time_point ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"x\", strip = strip_nested(clip = \"off\")) +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order), expand = c(0, 0)) +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   guides(x = guide_axis(angle = 55)) +   labs(y = \"Sample ID\", x = NULL) +   theme_clean() +   theme(axis.line.x = element_blank(), axis.line.y = element_blank(), panel.border = element_rect(fill = NA, color = \"black\"), plot.background = element_blank(), strip.placement = \"outside\", strip.background = element_part_rect(side = \"l\", color = \"black\", fill = NA, linetype = \"solid\"), strip.background.x = element_part_rect(side = \"t\", color = \"black\", fill = NA, linetype = \"solid\"))  # Instead do as proportion of the timepoints df_egfr_cat_prop <- egfr_hits %>%   add_count(time_point, type_name, name = \"n_type\") %>%   complete(time_point, type_name, fill = list(n_type = 0)) %>%   add_count(time_point, name = \"n_tp\") %>%   mutate(prop = n_type / n_tp) %>%   distinct(time_point, type_name, time_point, n_type, n_tp, prop, type) %>%   filter(!is.na(type)) %>%   mutate(time_point = fct_relevel(time_point, levels(db$metadata$time_point)))    egfr_hit_plot_top <- df_egfr_cat_prop %>%   ggplot(aes(x = (fct_relevel(type_name, var_order)))) +   geom_col(aes(fill = time_point, y = prop), position = \"dodge\") +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order)) +   scale_y_continuous(position = \"right\") +   facet_nested(. ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"y\", strip = strip_nested(clip = \"off\")) +   scale_fill_manual(values = colors$time_point) +   guides(     fill = guide_legend(keywidth = 0.7, keyheight = 1, position = \"right\"),     x = guide_axis(cap = \"both\", angle = 55),     y = guide_axis(cap = \"both\")   ) +   theme_clean() +   theme(plot.background = element_blank(), axis.line.y.right = element_line(), strip.placement = \"outside\", strip.background.x = element_part_rect(linetype = \"solid\", side = \"b\", color = \"black\", fill = NA)) +   labs(y = \"Proportion\", x = NULL, fill = \"Timepoint\") pegfr <- (egfr_hit_plot_top + theme(plot.margin = margin(r = 3, unit = \"lines\"))) + egfr_hit_plot + plot_layout(ncol = 1, heights = c(0.125, 1)) & theme(panel.spacing = unit(0.2, \"lines\")) pegfr"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Vertical and aligned","title":null,"text":"","code":"sample_order <- swimmers_df %>%   mutate(sample_id = fct_reorder(sample_id, last_tp, max)) %>%   pull(sample_id) %>%   levels() %>%   as.character()  var_order <- c(   \"Primary_Exon 19\", \"Primary_L858R\", \"Secondary_Amplification\",   \"Primary_G719X\", \"Primary_T790M\", \"Secondary_C797S\", \"Primary_Other\" )  egfr_hits$sample_id_new <- fct_relevel(egfr_hits$sample_id_new, sample_order)  egfr_hit_plot <- egfr_hits %>%   # mutate(denovo = factor(ifelse(grepl(\"De novo\", type_name), \"Pre-Osi\", \"Post-Osi\"),   #   levels = c(\"Pre-Osi\", \"Post-Osi\")   # )) %>%   ggplot(aes(y = sample_id_new, x = fct_relevel(type_name, var_order))) +   geom_tile() +   facet_nested(time_point ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"x\", strip = strip_nested(clip = \"off\")) +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order), expand = c(0, 0)) +   scale_y_discrete(position = \"right\", expand = c(0, 0)) +   guides(x = guide_axis(angle = 55)) +   labs(y = \"Sample ID\", x = NULL) +   theme_clean() +   theme(axis.line.x = element_blank(), axis.line.y = element_blank(), panel.border = element_rect(fill = NA, color = \"black\"), plot.background = element_blank(), strip.placement = \"outside\", strip.background = element_part_rect(side = \"l\", color = \"black\", fill = NA, linetype = \"solid\"), strip.background.x = element_part_rect(side = \"t\", color = \"black\", fill = NA, linetype = \"solid\"))  # Instead do as proportion of the timepoints df_egfr_cat_prop <- egfr_hits %>%   add_count(time_point, type_name, name = \"n_type\") %>%   complete(time_point, type_name, fill = list(n_type = 0)) %>%   add_count(time_point, name = \"n_tp\") %>%   mutate(prop = n_type / n_tp) %>%   distinct(time_point, type_name, time_point, n_type, n_tp, prop, type) %>%   filter(!is.na(type)) %>%   mutate(time_point = fct_relevel(time_point, levels(db$metadata$time_point)))    egfr_hit_plot_top <- df_egfr_cat_prop %>%   ggplot(aes(x = (fct_relevel(type_name, var_order)))) +   geom_col(aes(fill = time_point, y = prop), position = \"dodge\") +   scale_x_discrete(breaks = var_order, labels = gsub(\"Primary_|Secondary_\", \"\", var_order)) +   scale_y_continuous(position = \"right\") +   facet_nested(. ~ \"EGFR Mutation\" + type, space = \"free\", scales = \"free\", switch = \"y\", strip = strip_nested(clip = \"off\")) +   scale_fill_manual(values = colors$time_point) +   guides(     fill = guide_legend(keywidth = 0.7, keyheight = 1, position = \"right\"),     x = guide_axis(cap = \"both\", angle = 55),     y = guide_axis(cap = \"both\")   ) +   theme_clean() +   theme(plot.background = element_blank(), axis.line.y.right = element_line(), strip.placement = \"outside\", strip.background.x = element_part_rect(linetype = \"solid\", side = \"b\", color = \"black\", fill = NA)) +   labs(y = \"Proportion\", x = NULL, fill = \"Timepoint\") pegfr <- (egfr_hit_plot_top + theme(plot.margin = margin(r = 3, unit = \"lines\"))) + egfr_hit_plot + plot_layout(ncol = 1, heights = c(0.125, 1)) & theme(panel.spacing = unit(0.2, \"lines\")) pegfr"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Combined version","title":null,"text":"grab legend","code":"lgds <- ggpubr::get_legend(meta_plot) lgd <- ggpubr::as_ggplot(lgds) ggsave(lgd, file = here(\"plots\", \"swimmers_anno_legend.pdf\"), width = 14, height = 2) spc <- margin(t = 0.2, r = 0.2, b = 0.2, l = 0.2, unit = \"lines\") empty_panel <- plot_spacer() + theme(plot.margin = spc) pcomb_ext <- plot_grid(   plotlist = list(     # empty_panel,     # empty_panel,     # egfr_hit_plot_top + theme(plot.margin = spc),     swimmers_plot + theme(plot.margin = spc) + coord_cartesian(clip = \"off\"),     (meta_plot + theme(       legend.position = \"none\",       plot.margin = spc,       axis.text.y.right = element_blank(),       axis.ticks.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55),       strip.clip = \"off\"     ) + coord_cartesian(clip = \"off\")),     egfr_hit_plot + theme(       plot.margin = spc, axis.ticks = element_line(color = \"black\"),       strip.background.y.right = element_blank(),       strip.text.y.right = element_blank(),       axis.title.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55)     ) + coord_cartesian(clip = \"off\")   ),   align = \"hv\",   nrow = 1,   ncol = 3,   rel_widths = c(1, 0.32, 0.3),   # rel_heights = c(0.25, 1),   axis = \"tb\" ) ggsave(pcomb_ext, file = here(\"plots\", \"swimmers_plus_annos_muts.pdf\"), width = 10, height = 14.3) pcomb_ext egfr_hit_plot_top_final <- egfr_hit_plot_top +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), strip.clip = \"off\", plot.margin = margin(t = 0.25, b = 1.5, l = 0.25, r = 0.25, unit = \"lines\"), strip.background = element_blank()) +   coord_cartesian(clip = \"off\") +   guides(x = guide_axis(angle = 35, cap = \"both\")) ggsave(egfr_hit_plot_top_final, file = here(\"plots\", \"swimmers_mut_prop_top.pdf\"), width = 3.5, height = 2.5) egfr_hit_plot_top_final"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Plot","title":null,"text":"","code":"spc <- margin(t = 0.2, r = 0.2, b = 0.2, l = 0.2, unit = \"lines\") empty_panel <- plot_spacer() + theme(plot.margin = spc) pcomb_ext <- plot_grid(   plotlist = list(     # empty_panel,     # empty_panel,     # egfr_hit_plot_top + theme(plot.margin = spc),     swimmers_plot + theme(plot.margin = spc) + coord_cartesian(clip = \"off\"),     (meta_plot + theme(       legend.position = \"none\",       plot.margin = spc,       axis.text.y.right = element_blank(),       axis.ticks.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55),       strip.clip = \"off\"     ) + coord_cartesian(clip = \"off\")),     egfr_hit_plot + theme(       plot.margin = spc, axis.ticks = element_line(color = \"black\"),       strip.background.y.right = element_blank(),       strip.text.y.right = element_blank(),       axis.title.y.right = element_blank(),       axis.text.x.bottom = element_text(angle = 55)     ) + coord_cartesian(clip = \"off\")   ),   align = \"hv\",   nrow = 1,   ncol = 3,   rel_widths = c(1, 0.32, 0.3),   # rel_heights = c(0.25, 1),   axis = \"tb\" ) ggsave(pcomb_ext, file = here(\"plots\", \"swimmers_plus_annos_muts.pdf\"), width = 10, height = 14.3) pcomb_ext"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Top Proportion","title":null,"text":"","code":"egfr_hit_plot_top_final <- egfr_hit_plot_top +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), strip.clip = \"off\", plot.margin = margin(t = 0.25, b = 1.5, l = 0.25, r = 0.25, unit = \"lines\"), strip.background = element_blank()) +   coord_cartesian(clip = \"off\") +   guides(x = guide_axis(angle = 35, cap = \"both\")) ggsave(egfr_hit_plot_top_final, file = here(\"plots\", \"swimmers_mut_prop_top.pdf\"), width = 3.5, height = 2.5) egfr_hit_plot_top_final"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Figure 2 – Cohort Overview","title":null,"text":"Select main   Check four          Cellularity tumor site","code":"# Patient p1 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"site_of_tissue_simple\") +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  p2 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   guides(color = guide_legend(ncol = 3, override.aes = list(size = 3))) +   NoAxes() +   labs(title = \"Patient\") +   theme(plot.margin = margin(8, 1, 1, 1, \"mm\"))  p3 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umapnb\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  pcomb <- p4 + p2 + p1 + p3 + plot_layout(ncol = 2) & theme(aspect.ratio = 1, legend.box.margin = margin(), legend.margin = margin()) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_nobatch.pdf\"), width = 14, height = 8) pcomb # Patient p1 <- DimPlot(srt, reduction = \"umap\", group.by = \"site_of_tissue_simple\", shuffle = T) +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\")  p2 <- DimPlot(srt, reduction = \"umap\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   NoAxes() +   labs(title = \"Patient\")  p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\")  pcomb <- wrap_plots(p4, p2, p1, p3) & theme(aspect.ratio = 1) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch.pdf\"), width = 14, height = 7) pcomb # For supplement: patient and tissue site pcomb2 <- wrap_plots(p2, p1, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) ggsave(pcomb2, file = here(\"plots\", \"cohort_umap_combined_batch_supp.pdf\"), width = 15, height = 5) pcomb2 p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"On\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type)) +   labs(title = \"Cell Type\")  cohort_umap_tumor_cells <- DimPlot(srt, group.by = \"is_tumor_cell\", cols = list(\"TRUE\" = as.character(colors$cell_type[\"Tumor Cell\"]), \"FALSE\" = \"grey90\")) +   labs(title = NULL) +   theme(aspect.ratio = 1, legend.key.spacing = unit(0.1, \"lines\")) +   umap_theme() +   NoAxes() +   NoLegend() +   labs(title = \"Tumor Cells\")  pcomb <- wrap_plots(p4, p3, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) pcomb ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch_main2.pdf\"), width = 8, height = 3) ct_markers <- markers$cell_type_markers  names(ct_markers) <- map(names(ct_markers), .f = function(ct) {   ct_col <- colors$cell_type[ct]   ct_colname <- glue(\"<b style='color:{ct_col}'>{ct}<\/b>\")   return(ct_colname) }) %>%   list_c()    srt$cell_type_col <- factor(srt$cell_type, levels = levels(srt$cell_type), labels = glue(\"<b style='color:{colors$cell_type[levels(srt$cell_type)]}'>{levels(srt$cell_type)}<\/b>\"))   pl <- DotPlotter(srt, features = ct_markers, group.by = \"cell_type_col\", cluster_groups = F, rotate_y_strip = F) +   theme(     strip.clip = \"off\",     axis.line = element_blank(),     strip.text.x = element_markdown(),     axis.text.y = element_markdown()   )  ggsave(pl, file = here(\"plots\", \"cell_type_markers_dotplot.pdf\"), width = 9, height = 3) pl cls_order <- levels(fct_reorder(db$spec$cell_type$cid2, db$spec$cell_type$cid1_purity, median))  spec_pls <- map(names(db$spec), .f = function(l) {   df <- db$spec[[l]]    p1 <- df %>%     filter(cid2 != \"Other\") %>%     ggplot(aes(x = fct_relevel(cid2, cls_order), y = cid1_purity)) +     geom_violin(scale = \"width\", aes(fill = cid2), show.legend = F) +     scale_y_continuous(breaks = seq(0, 1, by = 0.5)) +     geom_pointrange(       stat = \"summary\", fatten = 0.8,       fun.min = function(z) {         quantile(z, 0.25)       },       fun.max = function(z) {         quantile(z, 0.75)       },       fun = median     ) +     guides(       x = guide_axis(angle = 45, cap = \"both\"),       y = guide_axis(cap = \"both\")     ) +     scale_fill_manual(values = colors$cell_type) +     labs(x = \"Cell Type\", y = \"Specificity\", title = l) +     ggpubr::stat_compare_means(comparisons = list(c(\"Tumor Cell\", \"Epithelial\")), tip.length = 0.05, label.y = 1.05, method = \"wilcox\", size = 2, vjust = -0.5) +     coord_cartesian(clip = \"off\") }) names(spec_pls) <- names(db$spec)  pcomb <- wrap_plots(spec_pls, ncol = 2) &   theme(axis.title.y = element_text(hjust = 0.4)) ggsave(pcomb, file = here(\"plots\", \"all_specificity_plots.pdf\"), width = 6, height = 6) pcomb p1 <- spec_pls$cell_type + labs(title = NULL, y = \"Patient\\nspecificity\\n(uncorrected)\")  p2 <- spec_pls$timepoint_batch + labs(title = NULL, y = \"Timepoint\\nspecificity\\n(corrected)\")  pcomb <- p1 + p2 + plot_layout(ncol = 1, axes = \"collect\") & labs(x = NULL) & guides(x = guide_axis(angle = 45, cap = \"both\")) ggsave(pcomb, file = here(\"plots\", \"sample_timepoint_specificity_v2.pdf\"), width = 2.85, height = 3)  pcomb p1 <- spec_pls$cell_type_batch + labs(title = NULL, y = \"Patient\\nspecificity\\n(corrected)\")   pcomb <- p1 + labs(x = NULL) + guides(x = guide_axis(angle = 45, cap = \"both\")) ggsave(pcomb, file = here(\"plots\", \"specificity_patient_corrected_supp.pdf\"), width = 3, height = 2)  pcomb df_raw <- FetchData(srt, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\")  df <- df_raw %>%   filter(is_tumor_cell)  devtools::load_all() df <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df$time_point_col <- factor(df$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df$time_point)]}'>{levels(df$time_point)}<\/b>\") )  p <- df %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10)) +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = NULL, color = \"Tumor Cell\\nDensity\") ggsave(p, file = here(\"plots\", \"tumor_cell_density.pdf\"), width = 7, height = 3) p library(ggtext) df <- FetchData(srt_epi, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\", \"tp53mut\", \"rb1mut\", \"has_impact\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\") %>%   filter(is_tumor_cell)  # Group by timepoint and calculate scaled density per group df_dens <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df_dens$time_point_col <- factor(df_dens$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens$time_point)]}'>{levels(df_dens$time_point)}<\/b>\") )  p <- df_dens %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = \"Tumor Cell Density\") ggsave(p, file = here(\"plots\", \"tumor_cell_density_epi.pdf\"), width = 7, height = 3) p # Group by timepoint and calculate scaled density per group df_dens_tp53 <- df %>%   mutate(TP53mut = case_when(     has_impact == \"FALSE\" ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   group_by(time_point, cell_type, TP53mut) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))    df_dens_tp53$time_point_col <- factor(df_dens_tp53$time_point,   levels = levels(df_dens_tp53$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens_tp53$time_point)]}'>{levels(df_dens_tp53$time_point)}<\/b>\") ) # TN only p <- df_dens_tp53 %>%   filter(TP53mut != \"NA\", time_point == \"TN\") %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterise(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_grid(time_point_col ~ fct_rev(TP53mut)) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.y = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\") ggsave(p, file = here(\"plots\", \"TP53mut_tumor_cell_density_TNonly.pdf\"), width = 5, height = 3) p p <- srt@meta.data %>%   add_count(sample_id, name = \"sample_n\") %>%   add_count(sample_id, cell_type, name = \"cell_type_n\") %>%   mutate(prop = cell_type_n / sample_n) %>%   distinct(sample_id, cell_type, time_point, sample_n, cell_type_n, prop) %>%   filter(cell_type != \"Other\") %>%   ggplot(aes(x = cell_type, y = prop)) +   geom_boxplot(aes(fill = time_point), outlier.size = 0.25, fatten = 1.5) +   scale_fill_manual(values = colors$time_point) +   labs(x = \"Cell Type\", y = \"Proportion\", fill = \"Timepoint\") +   scale_y_continuous(breaks = seq(0, 1, by = 0.2)) +   guides(     x = guide_axis(cap = \"both\", angle = 45),     y = guide_axis(cap = \"both\")   ) +   ggpubr::geom_pwc(tip.length = 0, symnum.args = symnum_0.1_star, label = \"p.adj.signif\", aes(group = time_point), hide.ns = T, vjust = 0.5, method = \"wilcox_test\", step.increase = 0.05) +   coord_cartesian(clip = \"off\") ggsave(p, file = here(\"plots\", \"cohort_timepoint_cell_type_prop.pdf\"), width = 4.5, height = 2.5) p p1 <- srt@meta.data %>%   ggplot(aes(x = sample_id)) +   geom_bar(aes(fill = cell_type)) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   guides(x = guide_axis(angle = 90)) +   scale_fill_manual(values = colors$cell_type) +   labs(fill = \"Cell Type\", y = \"Count\", x = \"Sample\") +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.2)) +   theme_clean()  p2 <- srt@meta.data %>%   ggplot(aes(x = sample_id)) +   geom_bar(aes(fill = cell_type), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"none\")   ) +   scale_fill_manual(values = colors$cell_type) +   labs(fill = \"Cell Type\", y = \"Proportion\", x = \"Sample\") +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.2)) +   theme_clean()  # Final formatting p1 <- p1 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + labs(x = NULL) p2 <- p2 + theme(strip.text.x = element_blank())  pcomb <- p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\", ncol = 1) & theme(plot.background = element_blank()) & scale_y_continuous(expand = c(0, 0)) ggsave(pcomb, file = here(\"plots\", \"sample_cellcounts_barplot.pdf\"), width = 10, height = 4) pcomb df <- srt@meta.data %>%   add_count(sample_id, cell_type, name = \"n_ct\") %>%   add_count(sample_id, name = \"n_samp\") %>%   mutate(ct_prop = n_ct / n_samp) %>%   distinct(sample_id, cell_type, ct_prop, n_ct, n_samp, procedure_type) %>%   pivot_wider(id_cols = sample_id, names_from = cell_type, values_from = ct_prop, values_fill = 0) %>%   pivot_longer(cols = !sample_id, names_to = \"cell_type\", values_to = \"cell_type_prop\") %>%   left_join(db$metadata)  # How many samples w/no tumor tum_prop <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   pull(cell_type_prop) # sum(tum_prop == 0) # max(tum_prop) p <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_reorder(sample_id, -cell_type_prop, mean), y = cell_type_prop)) +   geom_col(aes(fill = time_point), show.legend = F) +   scale_fill_manual(values = colors$time_point) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   theme_clean() +   theme(strip.background = element_blank()) +   coord_cartesian(ylim = c(0, 1), clip = \"off\") +   scale_y_continuous(expand = c(0, 0)) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"none\")   ) +   labs(x = \"Sample\", y = \"Tumor Cell Proportion\")  p2 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = time_point, y = cell_type_prop)) +   geom_boxplot(aes(fill = time_point), show.legend = F) +   scale_fill_manual(values = colors$time_point) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 45, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Timepoint\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1)) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", symnum.args = symnum_0.1_star, hide.ns = T, vjust = 0.2) pcomb <- p + free(p2, type = \"label\", side = \"b\") + plot_layout(ncol = 2, widths = c(1, 0.1), axes = \"collect\") &   theme(plot.background = element_blank()) ggsave(pcomb, file = here(\"plots\", \"tumor_cell_proportion_barplot.pdf\"), width = 9, height = 2.5) pcomb p1 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_relevel(site_of_tissue_simple, names(colors$site_of_tissue_simple)), y = cell_type_prop)) +   geom_boxplot(aes(fill = site_of_tissue_simple), show.legend = F) +   geom_quasirandom(alpha = 0.5) +   scale_fill_manual(values = colors$site_of_tissue_simple) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 0, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Tissue Site\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1))  p2 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_relevel(procedure_type, \"Biopsy\", \"Fresh Frozen\", \"Resection\"), y = cell_type_prop)) +   geom_boxplot(aes(fill = procedure_type), show.legend = F) +   geom_quasirandom(alpha = 0.5) +   scale_fill_manual(values = dittoColors()) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 0, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Procedure Type\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1))  pcomb <- p1 + p2 + plot_layout(ncol = 2) &   theme_classic() &   ggpubr::stat_compare_means(label.x.npc = 0.1) &   guides(x = guide_axis(angle = 45)) ggsave(pcomb, file = here(\"plots\", \"tumor_cellularity_site_procedure.pdf\"), width = 7, height = 3) pcomb sce <- readRDS(here(\"paper_data\", \"egfr_cohort_cnv.rds\")) sce$sample_id <- srt$sample_id[match(colnames(sce), srt$cell_id)] sce$cell_type <- srt$cell_type[match(colnames(sce), srt$cell_id)] sce$time_point <- srt$time_point[match(colnames(sce), srt$cell_id)]  sce <- sce[, sce$sample_id %in% unique(srt$sample_id) & sce$cell_type %in% c(\"Tumor Cell\", \"Epithelial\")]  mat <- assay(sce) %>%   t() %>%   log2()  df_anno <- colData(sce) %>%   as.data.frame() %>%   select(cell_type, time_point, sample_id) %>%   arrange(time_point, sample_id, cell_type)  df_anno$cell_type <- factor(df_anno$cell_type)  mat <- mat[rownames(df_anno), ]  anno_cols <- list(   \"time_point\" = colors$time_point,   \"cell_type\" = colors$cell_type[unique(df_anno$cell_type)],   \"sample_id\" = colors$sample_id_new )  left_anno <- HeatmapAnnotation(   df = df_anno,   annotation_label = c(\"Cell Type\", \"Timepoint\", \"Sample\"),   which = \"row\", show_legend = c(T, T, T), col = anno_cols,   annotation_legend_param = list(     \"sample_id\" = list(       ncol = 3     )   ) )  # Split columns by chromosome chrs <- as.vector(gsub(\"chr\", \"\", GenomeInfoDb::seqnames(SummarizedExperiment::rowRanges(sce)))) col_split <- factor(chrs, levels = unique(gtools::mixedsort(chrs)))  ht <- Heatmap(   matrix = mat,   name = \"Log2Ratio\",   left_annotation = left_anno,   col = logr_col_fun(breaks = c(-0.05, -0.01, 0.01, 0.05), colors = c(\"blue\", \"white\", \"white\", \"red\")),   cluster_rows = F,   cluster_columns = F,   show_column_dend = F,   show_row_dend = F,   show_row_names = F,   show_column_names = F,   column_split = col_split,   row_split = df_anno$cell_type,   raster_by_magick = F, raster_device = \"CairoPNG\",   border = T,   raster_quality = 25 )  pdf(here(\"plots/cohort_cnv_heatmap.pdf\"), width = 13, height = 8) draw(ht) dev.off() png    2 suppressWarnings(draw(ht))"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Main Plots","title":null,"text":"Select main","code":"# Patient p1 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"site_of_tissue_simple\") +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  p2 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   guides(color = guide_legend(ncol = 3, override.aes = list(size = 3))) +   NoAxes() +   labs(title = \"Patient\") +   theme(plot.margin = margin(8, 1, 1, 1, \"mm\"))  p3 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umapnb\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  pcomb <- p4 + p2 + p1 + p3 + plot_layout(ncol = 2) & theme(aspect.ratio = 1, legend.box.margin = margin(), legend.margin = margin()) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_nobatch.pdf\"), width = 14, height = 8) pcomb # Patient p1 <- DimPlot(srt, reduction = \"umap\", group.by = \"site_of_tissue_simple\", shuffle = T) +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\")  p2 <- DimPlot(srt, reduction = \"umap\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   NoAxes() +   labs(title = \"Patient\")  p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\")  pcomb <- wrap_plots(p4, p2, p1, p3) & theme(aspect.ratio = 1) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch.pdf\"), width = 14, height = 7) pcomb # For supplement: patient and tissue site pcomb2 <- wrap_plots(p2, p1, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) ggsave(pcomb2, file = here(\"plots\", \"cohort_umap_combined_batch_supp.pdf\"), width = 15, height = 5) pcomb2 p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"On\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type)) +   labs(title = \"Cell Type\")  cohort_umap_tumor_cells <- DimPlot(srt, group.by = \"is_tumor_cell\", cols = list(\"TRUE\" = as.character(colors$cell_type[\"Tumor Cell\"]), \"FALSE\" = \"grey90\")) +   labs(title = NULL) +   theme(aspect.ratio = 1, legend.key.spacing = unit(0.1, \"lines\")) +   umap_theme() +   NoAxes() +   NoLegend() +   labs(title = \"Tumor Cells\")  pcomb <- wrap_plots(p4, p3, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) pcomb ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch_main2.pdf\"), width = 8, height = 3)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Unbatch corrected","title":null,"text":"","code":"# Patient p1 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"site_of_tissue_simple\") +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  p2 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   guides(color = guide_legend(ncol = 3, override.aes = list(size = 3))) +   NoAxes() +   labs(title = \"Patient\") +   theme(plot.margin = margin(8, 1, 1, 1, \"mm\"))  p3 <- DimPlot(srt, reduction = \"umapnb\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umapnb\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\") +   theme(plot.margin = margin(1, 1, 1, 1, \"mm\"))  pcomb <- p4 + p2 + p1 + p3 + plot_layout(ncol = 2) & theme(aspect.ratio = 1, legend.box.margin = margin(), legend.margin = margin()) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_nobatch.pdf\"), width = 14, height = 8) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Batch corrected","title":null,"text":"Select main","code":"# Patient p1 <- DimPlot(srt, reduction = \"umap\", group.by = \"site_of_tissue_simple\", shuffle = T) +   umap_theme() +   scale_color_manual(values = colors$site_of_tissue_simple, breaks = names(colors$site_of_tissue_simple), labels = label_num_generator(srt$site_of_tissue_simple)) +   NoAxes() +   labs(title = \"Tissue site\")  p2 <- DimPlot(srt, reduction = \"umap\", group.by = \"sample_id\") +   umap_theme() +   scale_color_manual(values = colors$sample_id_new, breaks = names(colors$sample_id_new), labels = label_num_generator(srt$sample_id)) +   NoAxes() +   labs(title = \"Patient\")  p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"MRD\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point), labels = label_num_generator(srt$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type), labels = label_num_generator(srt$cell_type)) +   labs(title = \"Cell Type\")  pcomb <- wrap_plots(p4, p2, p1, p3) & theme(aspect.ratio = 1) ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch.pdf\"), width = 14, height = 7) pcomb # For supplement: patient and tissue site pcomb2 <- wrap_plots(p2, p1, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) ggsave(pcomb2, file = here(\"plots\", \"cohort_umap_combined_batch_supp.pdf\"), width = 15, height = 5) pcomb2 p3 <- DimPlot(srt, reduction = \"umap\", group.by = \"time_point\", order = \"On\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$time_point, breaks = names(colors$time_point)) +   labs(title = \"Timepoint\")  # Cell types p4 <- DimPlot(srt, group.by = \"cell_type\", reduction = \"umap\") +   umap_theme() +   NoAxes() +   scale_color_manual(values = colors$cell_type, breaks = names(colors$cell_type)) +   labs(title = \"Cell Type\")  cohort_umap_tumor_cells <- DimPlot(srt, group.by = \"is_tumor_cell\", cols = list(\"TRUE\" = as.character(colors$cell_type[\"Tumor Cell\"]), \"FALSE\" = \"grey90\")) +   labs(title = NULL) +   theme(aspect.ratio = 1, legend.key.spacing = unit(0.1, \"lines\")) +   umap_theme() +   NoAxes() +   NoLegend() +   labs(title = \"Tumor Cells\")  pcomb <- wrap_plots(p4, p3, byrow = F) + plot_layout(nrow = 1) & theme(aspect.ratio = 1, plot.margin = margin(1, 1, 1, 1, \"mm\")) pcomb ggsave(pcomb, file = here(\"plots\", \"cohort_umap_combined_batch_main2.pdf\"), width = 8, height = 3)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Cell Type Markers","title":null,"text":"","code":"ct_markers <- markers$cell_type_markers  names(ct_markers) <- map(names(ct_markers), .f = function(ct) {   ct_col <- colors$cell_type[ct]   ct_colname <- glue(\"<b style='color:{ct_col}'>{ct}<\/b>\")   return(ct_colname) }) %>%   list_c()    srt$cell_type_col <- factor(srt$cell_type, levels = levels(srt$cell_type), labels = glue(\"<b style='color:{colors$cell_type[levels(srt$cell_type)]}'>{levels(srt$cell_type)}<\/b>\"))   pl <- DotPlotter(srt, features = ct_markers, group.by = \"cell_type_col\", cluster_groups = F, rotate_y_strip = F) +   theme(     strip.clip = \"off\",     axis.line = element_blank(),     strip.text.x = element_markdown(),     axis.text.y = element_markdown()   )  ggsave(pl, file = here(\"plots\", \"cell_type_markers_dotplot.pdf\"), width = 9, height = 3) pl"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Specificity plots","title":null,"text":"Check four","code":"cls_order <- levels(fct_reorder(db$spec$cell_type$cid2, db$spec$cell_type$cid1_purity, median))  spec_pls <- map(names(db$spec), .f = function(l) {   df <- db$spec[[l]]    p1 <- df %>%     filter(cid2 != \"Other\") %>%     ggplot(aes(x = fct_relevel(cid2, cls_order), y = cid1_purity)) +     geom_violin(scale = \"width\", aes(fill = cid2), show.legend = F) +     scale_y_continuous(breaks = seq(0, 1, by = 0.5)) +     geom_pointrange(       stat = \"summary\", fatten = 0.8,       fun.min = function(z) {         quantile(z, 0.25)       },       fun.max = function(z) {         quantile(z, 0.75)       },       fun = median     ) +     guides(       x = guide_axis(angle = 45, cap = \"both\"),       y = guide_axis(cap = \"both\")     ) +     scale_fill_manual(values = colors$cell_type) +     labs(x = \"Cell Type\", y = \"Specificity\", title = l) +     ggpubr::stat_compare_means(comparisons = list(c(\"Tumor Cell\", \"Epithelial\")), tip.length = 0.05, label.y = 1.05, method = \"wilcox\", size = 2, vjust = -0.5) +     coord_cartesian(clip = \"off\") }) names(spec_pls) <- names(db$spec)  pcomb <- wrap_plots(spec_pls, ncol = 2) &   theme(axis.title.y = element_text(hjust = 0.4)) ggsave(pcomb, file = here(\"plots\", \"all_specificity_plots.pdf\"), width = 6, height = 6) pcomb p1 <- spec_pls$cell_type + labs(title = NULL, y = \"Patient\\nspecificity\\n(uncorrected)\")  p2 <- spec_pls$timepoint_batch + labs(title = NULL, y = \"Timepoint\\nspecificity\\n(corrected)\")  pcomb <- p1 + p2 + plot_layout(ncol = 1, axes = \"collect\") & labs(x = NULL) & guides(x = guide_axis(angle = 45, cap = \"both\")) ggsave(pcomb, file = here(\"plots\", \"sample_timepoint_specificity_v2.pdf\"), width = 2.85, height = 3)  pcomb p1 <- spec_pls$cell_type_batch + labs(title = NULL, y = \"Patient\\nspecificity\\n(corrected)\")   pcomb <- p1 + labs(x = NULL) + guides(x = guide_axis(angle = 45, cap = \"both\")) ggsave(pcomb, file = here(\"plots\", \"specificity_patient_corrected_supp.pdf\"), width = 3, height = 2)  pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Density based tumor cells","title":null,"text":"","code":"df_raw <- FetchData(srt, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\")  df <- df_raw %>%   filter(is_tumor_cell)  devtools::load_all() df <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df$time_point_col <- factor(df$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df$time_point)]}'>{levels(df$time_point)}<\/b>\") )  p <- df %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10)) +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = NULL, color = \"Tumor Cell\\nDensity\") ggsave(p, file = here(\"plots\", \"tumor_cell_density.pdf\"), width = 7, height = 3) p library(ggtext) df <- FetchData(srt_epi, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\", \"tp53mut\", \"rb1mut\", \"has_impact\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\") %>%   filter(is_tumor_cell)  # Group by timepoint and calculate scaled density per group df_dens <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df_dens$time_point_col <- factor(df_dens$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens$time_point)]}'>{levels(df_dens$time_point)}<\/b>\") )  p <- df_dens %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = \"Tumor Cell Density\") ggsave(p, file = here(\"plots\", \"tumor_cell_density_epi.pdf\"), width = 7, height = 3) p # Group by timepoint and calculate scaled density per group df_dens_tp53 <- df %>%   mutate(TP53mut = case_when(     has_impact == \"FALSE\" ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   group_by(time_point, cell_type, TP53mut) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))    df_dens_tp53$time_point_col <- factor(df_dens_tp53$time_point,   levels = levels(df_dens_tp53$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens_tp53$time_point)]}'>{levels(df_dens_tp53$time_point)}<\/b>\") ) # TN only p <- df_dens_tp53 %>%   filter(TP53mut != \"NA\", time_point == \"TN\") %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterise(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_grid(time_point_col ~ fct_rev(TP53mut)) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.y = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\") ggsave(p, file = here(\"plots\", \"TP53mut_tumor_cell_density_TNonly.pdf\"), width = 5, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Over cohort object","title":null,"text":"","code":"df_raw <- FetchData(srt, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\")  df <- df_raw %>%   filter(is_tumor_cell)  devtools::load_all() df <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df$time_point_col <- factor(df$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df$time_point)]}'>{levels(df$time_point)}<\/b>\") )  p <- df %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10)) +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = NULL, color = \"Tumor Cell\\nDensity\") ggsave(p, file = here(\"plots\", \"tumor_cell_density.pdf\"), width = 7, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Over epithelial object","title":null,"text":"","code":"library(ggtext) df <- FetchData(srt_epi, vars = c(\"time_point\", \"is_tumor_cell\", \"cell_type\", \"Xumap_1\", \"Xumap_2\", \"tp53mut\", \"rb1mut\", \"has_impact\")) %>%   dplyr::rename(\"UMAP1\" = \"Xumap_1\", \"UMAP2\" = \"Xumap_2\") %>%   filter(is_tumor_cell)  # Group by timepoint and calculate scaled density per group df_dens <- df %>%   group_by(time_point, cell_type) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))  df_dens$time_point_col <- factor(df_dens$time_point,   levels = levels(df$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens$time_point)]}'>{levels(df_dens$time_point)}<\/b>\") )  p <- df_dens %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterize(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_wrap(~time_point_col) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.x = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\", title = \"Tumor Cell Density\") ggsave(p, file = here(\"plots\", \"tumor_cell_density_epi.pdf\"), width = 7, height = 3) p # Group by timepoint and calculate scaled density per group df_dens_tp53 <- df %>%   mutate(TP53mut = case_when(     has_impact == \"FALSE\" ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   group_by(time_point, cell_type, TP53mut) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))    df_dens_tp53$time_point_col <- factor(df_dens_tp53$time_point,   levels = levels(df_dens_tp53$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens_tp53$time_point)]}'>{levels(df_dens_tp53$time_point)}<\/b>\") ) # TN only p <- df_dens_tp53 %>%   filter(TP53mut != \"NA\", time_point == \"TN\") %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterise(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_grid(time_point_col ~ fct_rev(TP53mut)) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.y = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\") ggsave(p, file = here(\"plots\", \"TP53mut_tumor_cell_density_TNonly.pdf\"), width = 5, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"TP53mut","title":null,"text":"","code":"# Group by timepoint and calculate scaled density per group df_dens_tp53 <- df %>%   mutate(TP53mut = case_when(     has_impact == \"FALSE\" ~ \"NA\",     tp53mut == \"TRUE\" ~ \"TP53mut\",     tp53mut == \"FALSE\" ~ \"TP53wt\",     .default = \"Other\"   )) %>%   group_by(time_point, cell_type, TP53mut) %>%   mutate(density = get_density(UMAP1, UMAP2, n = 500)) %>%   mutate(density_scaled = standardize(density))    df_dens_tp53$time_point_col <- factor(df_dens_tp53$time_point,   levels = levels(df_dens_tp53$time_point),   labels = glue(\"<b style='color:{colors$time_point[levels(df_dens_tp53$time_point)]}'>{levels(df_dens_tp53$time_point)}<\/b>\") ) # TN only p <- df_dens_tp53 %>%   filter(TP53mut != \"NA\", time_point == \"TN\") %>%   ungroup() %>%   arrange((density_scaled)) %>%   ggplot(aes(x = UMAP1, y = UMAP2)) +   ggrastr::rasterise(geom_point(aes(color = density_scaled), size = 0.1), dpi = 600) +   facet_grid(time_point_col ~ fct_rev(TP53mut)) +   scale_color_gradientn(colours = viridis::turbo(10), name = \"Density\") +   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) +   theme(     strip.background = element_blank(),     strip.text.y = element_markdown(size = 16),     aspect.ratio = 1, panel.background = element_rect(fill = NA, color = \"black\"),     plot.title = element_text(hjust = 0.5, size = 18),     axis.line = element_blank(),     axis.ticks = element_blank(),     axis.text = element_blank()   ) +   labs(x = \"UMAP1\", y = \"UMAP2\") ggsave(p, file = here(\"plots\", \"TP53mut_tumor_cell_density_TNonly.pdf\"), width = 5, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Cell Type Composition","title":null,"text":"","code":"p <- srt@meta.data %>%   add_count(sample_id, name = \"sample_n\") %>%   add_count(sample_id, cell_type, name = \"cell_type_n\") %>%   mutate(prop = cell_type_n / sample_n) %>%   distinct(sample_id, cell_type, time_point, sample_n, cell_type_n, prop) %>%   filter(cell_type != \"Other\") %>%   ggplot(aes(x = cell_type, y = prop)) +   geom_boxplot(aes(fill = time_point), outlier.size = 0.25, fatten = 1.5) +   scale_fill_manual(values = colors$time_point) +   labs(x = \"Cell Type\", y = \"Proportion\", fill = \"Timepoint\") +   scale_y_continuous(breaks = seq(0, 1, by = 0.2)) +   guides(     x = guide_axis(cap = \"both\", angle = 45),     y = guide_axis(cap = \"both\")   ) +   ggpubr::geom_pwc(tip.length = 0, symnum.args = symnum_0.1_star, label = \"p.adj.signif\", aes(group = time_point), hide.ns = T, vjust = 0.5, method = \"wilcox_test\", step.increase = 0.05) +   coord_cartesian(clip = \"off\") ggsave(p, file = here(\"plots\", \"cohort_timepoint_cell_type_prop.pdf\"), width = 4.5, height = 2.5) p p1 <- srt@meta.data %>%   ggplot(aes(x = sample_id)) +   geom_bar(aes(fill = cell_type)) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   guides(x = guide_axis(angle = 90)) +   scale_fill_manual(values = colors$cell_type) +   labs(fill = \"Cell Type\", y = \"Count\", x = \"Sample\") +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.2)) +   theme_clean()  p2 <- srt@meta.data %>%   ggplot(aes(x = sample_id)) +   geom_bar(aes(fill = cell_type), position = \"fill\") +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"none\")   ) +   scale_fill_manual(values = colors$cell_type) +   labs(fill = \"Cell Type\", y = \"Proportion\", x = \"Sample\") +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.2)) +   theme_clean()  # Final formatting p1 <- p1 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + labs(x = NULL) p2 <- p2 + theme(strip.text.x = element_blank())  pcomb <- p1 + p2 + plot_layout(guides = \"collect\", axes = \"collect\", ncol = 1) & theme(plot.background = element_blank()) & scale_y_continuous(expand = c(0, 0)) ggsave(pcomb, file = here(\"plots\", \"sample_cellcounts_barplot.pdf\"), width = 10, height = 4) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Tumor cellularity","title":null,"text":"Cellularity tumor site","code":"df <- srt@meta.data %>%   add_count(sample_id, cell_type, name = \"n_ct\") %>%   add_count(sample_id, name = \"n_samp\") %>%   mutate(ct_prop = n_ct / n_samp) %>%   distinct(sample_id, cell_type, ct_prop, n_ct, n_samp, procedure_type) %>%   pivot_wider(id_cols = sample_id, names_from = cell_type, values_from = ct_prop, values_fill = 0) %>%   pivot_longer(cols = !sample_id, names_to = \"cell_type\", values_to = \"cell_type_prop\") %>%   left_join(db$metadata)  # How many samples w/no tumor tum_prop <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   pull(cell_type_prop) # sum(tum_prop == 0) # max(tum_prop) p <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_reorder(sample_id, -cell_type_prop, mean), y = cell_type_prop)) +   geom_col(aes(fill = time_point), show.legend = F) +   scale_fill_manual(values = colors$time_point) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   theme_clean() +   theme(strip.background = element_blank()) +   coord_cartesian(ylim = c(0, 1), clip = \"off\") +   scale_y_continuous(expand = c(0, 0)) +   guides(     x = guide_axis(angle = 90),     y = guide_axis(cap = \"none\")   ) +   labs(x = \"Sample\", y = \"Tumor Cell Proportion\")  p2 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = time_point, y = cell_type_prop)) +   geom_boxplot(aes(fill = time_point), show.legend = F) +   scale_fill_manual(values = colors$time_point) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 45, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Timepoint\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1)) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", symnum.args = symnum_0.1_star, hide.ns = T, vjust = 0.2) pcomb <- p + free(p2, type = \"label\", side = \"b\") + plot_layout(ncol = 2, widths = c(1, 0.1), axes = \"collect\") &   theme(plot.background = element_blank()) ggsave(pcomb, file = here(\"plots\", \"tumor_cell_proportion_barplot.pdf\"), width = 9, height = 2.5) pcomb p1 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_relevel(site_of_tissue_simple, names(colors$site_of_tissue_simple)), y = cell_type_prop)) +   geom_boxplot(aes(fill = site_of_tissue_simple), show.legend = F) +   geom_quasirandom(alpha = 0.5) +   scale_fill_manual(values = colors$site_of_tissue_simple) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 0, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Tissue Site\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1))  p2 <- df %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = fct_relevel(procedure_type, \"Biopsy\", \"Fresh Frozen\", \"Resection\"), y = cell_type_prop)) +   geom_boxplot(aes(fill = procedure_type), show.legend = F) +   geom_quasirandom(alpha = 0.5) +   scale_fill_manual(values = dittoColors()) +   theme_clean() +   scale_y_continuous(expand = c(0, 0), breaks = seq(0, 1, by = 0.25)) +   guides(     x = guide_axis(angle = 0, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) +   labs(x = \"Procedure Type\", y = \"Tumor Cell Proportion\") +   coord_cartesian(clip = \"off\", ylim = c(0, 1))  pcomb <- p1 + p2 + plot_layout(ncol = 2) &   theme_classic() &   ggpubr::stat_compare_means(label.x.npc = 0.1) &   guides(x = guide_axis(angle = 45)) ggsave(pcomb, file = here(\"plots\", \"tumor_cellularity_site_procedure.pdf\"), width = 7, height = 3) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"InferCNV plots","title":null,"text":"","code":"sce <- readRDS(here(\"paper_data\", \"egfr_cohort_cnv.rds\")) sce$sample_id <- srt$sample_id[match(colnames(sce), srt$cell_id)] sce$cell_type <- srt$cell_type[match(colnames(sce), srt$cell_id)] sce$time_point <- srt$time_point[match(colnames(sce), srt$cell_id)]  sce <- sce[, sce$sample_id %in% unique(srt$sample_id) & sce$cell_type %in% c(\"Tumor Cell\", \"Epithelial\")]  mat <- assay(sce) %>%   t() %>%   log2()  df_anno <- colData(sce) %>%   as.data.frame() %>%   select(cell_type, time_point, sample_id) %>%   arrange(time_point, sample_id, cell_type)  df_anno$cell_type <- factor(df_anno$cell_type)  mat <- mat[rownames(df_anno), ]  anno_cols <- list(   \"time_point\" = colors$time_point,   \"cell_type\" = colors$cell_type[unique(df_anno$cell_type)],   \"sample_id\" = colors$sample_id_new )  left_anno <- HeatmapAnnotation(   df = df_anno,   annotation_label = c(\"Cell Type\", \"Timepoint\", \"Sample\"),   which = \"row\", show_legend = c(T, T, T), col = anno_cols,   annotation_legend_param = list(     \"sample_id\" = list(       ncol = 3     )   ) )  # Split columns by chromosome chrs <- as.vector(gsub(\"chr\", \"\", GenomeInfoDb::seqnames(SummarizedExperiment::rowRanges(sce)))) col_split <- factor(chrs, levels = unique(gtools::mixedsort(chrs)))  ht <- Heatmap(   matrix = mat,   name = \"Log2Ratio\",   left_annotation = left_anno,   col = logr_col_fun(breaks = c(-0.05, -0.01, 0.01, 0.05), colors = c(\"blue\", \"white\", \"white\", \"red\")),   cluster_rows = F,   cluster_columns = F,   show_column_dend = F,   show_row_dend = F,   show_row_names = F,   show_column_names = F,   column_split = col_split,   row_split = df_anno$cell_type,   raster_by_magick = F, raster_device = \"CairoPNG\",   border = T,   raster_quality = 25 )  pdf(here(\"plots/cohort_cnv_heatmap.pdf\"), width = 13, height = 8) draw(ht) dev.off() png    2 suppressWarnings(draw(ht))"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Figure 3 – Epithelial Cells","title":null,"text":"version proportion pts tumor cells   Single table can plot select pathways interest","code":"lab_cents <- scatools:::get_label_centers(obj = srt_epi, group_var = \"cell_type_epi\", reduced_dim = \"umap\")  df_leg <- srt_epi@meta.data %>%   add_count(cell_type_epi, name = \"epi_n\") %>%   distinct(cell_type_epi, epi_n) %>%   mutate(label = glue(\"({prettyNum(epi_n, big.mark = ',')})\"))  p1_leg <- df_leg %>%   ggplot(aes(y = fct_rev(cell_type_epi), x = epi_n)) +   geom_point(aes(x = -10000, color = cell_type_epi), size = 3.5) +   geom_col(aes(fill = cell_type_epi), width = 0.5) +   geom_text(aes(x = epi_n, label = label), size = 3, hjust = -0.1, color = \"black\") +   scale_fill_manual(values = colors$cell_type_epi) +   scale_color_manual(values = colors$cell_type_epi) +   coord_cartesian(clip = \"off\") +   theme(     strip.placement = \"outside\",     strip.background.y = element_part_rect(side = \"r\", fill = NA),     axis.ticks = element_blank(),     axis.line = element_blank(),     axis.text.x = element_blank(),     strip.text.y.left = element_text(angle = 0, hjust = 1),     plot.margin = margin(1, 4, 1, 1, unit = \"lines\")   ) +   labs(x = NULL, y = NULL) +   scale_x_continuous(expand = c(0.025, 0)) +   guides(x = guide_axis(cap = \"both\")) +   NoLegend()  p1 <- DimPlot(srt_epi, reduction = \"umap\", group.by = \"cell_type_epi\", shuffle = T, raster.dpi = c(350, 350)) +   umap_theme() +   ggrepel::geom_text_repel(     data = lab_cents, aes(x = x, y = y, label = cell_type_epi),     min.segment.length = 0,     segment.size = 0.75,     fontface = \"bold\",     force = 5,     bg.colour = \"white\",     max.iter = 1e9,     bg.r = 0.1,     position = ggpp::position_nudge_center(center_x = 2, center_y = 2, direction = \"radial\", x = 0, y = 0)   ) +   scale_color_manual(values = colors$cell_type_epi, labels = label_num_generator(srt_epi$cell_type_epi), breaks = levels(srt_epi$cell_type_epi)) +   NoAxes() +   NoLegend() +   theme(aspect.ratio = 1) +   labs(title = \"Epithelial Cells\")  layout <- c(   area(t = 10, b = 100, l = 1, r = 100),   area(t = 4, l = 88, b = 59, r = 100) ) # pcomb <- (p1 + theme(plot.margin = margin())) + free(p1_leg + theme(aspect.ratio = 1.9, plot.margin = margin())) + plot_layout(design = layout) pcomb <- (p1 + theme(plot.margin = margin())) + p1_leg + plot_layout(design = layout)   ggsave(pcomb, file = here(\"plots\", \"epi_umap.pdf\"), width = 6.75, height = 4.25) pcomb epi_dotplot <- DotPlotter(srt_epi, features = markers$epi_markers_final, group.by = \"cell_type_epi\", cluster_groups = F, rotate_y_strip = T) ggsave(epi_dotplot, file = here(\"plots\", \"epi_marker_dotplot_unfilt.pdf\"), width = 9, height = 4) epi_dotplot +   theme(axis.text.y = element_markdown()) dp <- DotPlotter(srt_epi, features = markers$epi_markers_hlca, group.by = \"cell_type_epi\", cluster_groups = F) dp_f <- dp + theme(strip.text.x = element_text(angle = 90, hjust = 0), panel.spacing = unit(1, \"mm\")) +   guides(y.sec = guide_axis()) +   labs(title = \"Human Lung Cell Atlas Epithelial Marker List\") +   theme(plot.title = element_text(hjust = 0.5)) ggsave(dp_f, file = here(\"plots\", \"hlca_marker_dotplot.pdf\"), width = 14, height = 4.5) dp_f glist <- c(\"SFTPB\", \"SFTPC\", \"SCGB3A2\", \"KRT13\", \"KRT6A\", \"DSG3\")  x <- Plot_Density_Custom(seurat_object = srt_epi, features = glist, viridis_palette = \"inferno\", joint = F, combine = F)  names(x) <- glist  res <- map(names(x), .f = function(gene) {   x[[gene]]$data %>%     mutate(!!gene := standardize(feature)) }) names(res) <- names(x)  pls <- map(names(res), .f = function(gene) {   p <- res[[gene]] %>%     arrange(.data[[gene]]) %>%     ggplot(aes(x = Xumap_1, y = Xumap_2)) +     scattermore::geom_scattermore(aes(color = .data[[gene]]), pixels = c(256, 256)) +     scale_color_viridis_c(option = \"inferno\") +     labs(title = gene, color = \"Density\") })  pcomb <- pls %>%   wrap_plots(nrow = 2, guides = \"collect\") &   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) &   umap_theme() &   NoAxes() &   theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5, face = \"bold\")) &   labs(color = \"Expression\\nDensity\") ggsave(pcomb, filename = here(\"plots\", \"epi_exp_dens.pdf\"), width = 6, height = 4) pcomb df <- FetchData(srt_epi, vars = c(\"cell_type_epi\", \"SFTPB\")) p <- df %>%   filter(grepl(\"^PDTC|^AT2\", cell_type_epi)) %>%   ggplot(aes(x = fct_reorder(cell_type_epi, -SFTPB, median), y = SFTPB)) +   geom_violin(scale = \"width\", aes(fill = cell_type_epi)) +   guides(x = guide_axis(angle = 45)) +   geom_boxplot(width = 0.1, fill = \"white\", outliers = F) +   scale_fill_manual(values = colors$cell_type_epi) +   theme_classic(base_size = 16) +   NoLegend() +   labs(x = \"Celltype\", y = \"Expression\", title = \"SFTPB\") +   theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) ggsave(p, file = here(\"plots\", \"sftpc_epi_expression.pdf\"), width = 2.5, height = 3) p p1 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = sample_id), position = \"fill\") +   scale_fill_manual(values = colors$sample_id_new) +   labs(fill = \"Patient\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 6))  p2 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = site_of_tissue_simple), position = \"fill\") +   scale_fill_manual(values = colors$site_of_tissue_simple) +   labs(fill = \"Tissue site\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 2))  p3 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = time_point), position = \"fill\") +   scale_fill_manual(values = colors$time_point) +   guides(x = guide_axis(angle = 45)) +   labs(fill = \"Timepoint\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5))  p4 <- srt_epi@meta.data %>%   add_count(cell_type_epi, cell_type, name = \"n1\") %>%   add_count(cell_type_epi, name = \"n2\") %>%   mutate(prop = n1 / n2) %>%   distinct(cell_type, cell_type_epi, prop) %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = cell_type_epi, y = prop)) +   geom_col(aes(fill = fct_rev(cell_type)), show.legend = F) +   geom_hline(yintercept = seq(0.25, 1, by = 0.25), alpha = 0.6, linetype = \"dashed\", color = \"grey50\", linewidth = 0.5) +   scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.25)) +   scale_fill_manual(values = colors$cell_type) +   labs(y = \"Proportion\\n(tumor cells)\")  p5 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = Phase), position = \"fill\") +   scale_fill_manual(values = colors$Phase) +   guides(x = guide_axis(angle = 45)) +   labs(fill = \"Cell Cycle Phase\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5))  gap_size <- 2  pcomb <- wrap_plots(   p1 + theme(plot.margin = margin(t = 4, r = 2, b = gap_size, l = 2, \"mm\")),   free(p3 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p2 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p5 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p4 + theme(plot.margin = margin(t = gap_size, r = 2, b = 2, l = 4, \"mm\")), type = \"space\", side = \"l\"),   ncol = 1, axes = \"collect_x\" ) &   guides(     x = guide_axis(angle = 65, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) &   scale_y_continuous(expand = c(0, 0)) &   labs(x = \"Epithelial cell state\") &   coord_cartesian(clip = \"off\") ggsave(pcomb, file = here(\"plots\", \"epi_type_feature_proportions.pdf\"), width = 6.75, height = 7.5) pcomb use_col <- \"cell_type_epi\"  df <- srt_epi@meta.data %>%   filter(cell_type == \"Tumor Cell\") %>%   add_count(.data[[use_col]], time_point, sample_id, name = \"epi_type_n\") %>%   add_count(sample_id, name = \"sample_n\") %>%   mutate(tum_prop = epi_type_n / sample_n) %>%   distinct(.data[[use_col]], epi_type_n, sample_n, tum_prop, sample_id, time_point)   p_df <- df %>%   group_by(.data[[use_col]]) %>%   rstatix::wilcox_test(tum_prop ~ time_point) %>%   rstatix::adjust_pvalue(method = \"BH\") %>%   rstatix::add_significance(     symbols = symnum_0.1_star$symbols,     cutpoints = symnum_0.1_star$cutpoints   ) %>%   filter(p.adj < 0.1) %>%   rstatix::add_xy_position()  pl <- df %>%   ggplot(aes(x = time_point, y = tum_prop)) +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 0.75, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3, show.legend = F) +   guides(x = guide_axis(angle = 45)) +   labs(y = \"Tumor cell proportion\", x = NULL) +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   facet_grid(. ~ .data[[use_col]], scales = \"free\", space = \"free\", switch = \"x\") +   ggprism::add_pvalue(p_df, tip.length = 0, label = \"p.adj.signif\", step.increase = -0.01, bracket.nudge.y = 0, bracket.size = 0.2, label.size = 2.5) +   scale_y_continuous(breaks = seq(0, 1, by = 0.25), expand = expansion(mult = c(0.05, 0.1))) +   theme(     axis.text.x = element_blank(),     axis.title.y = element_text(hjust = 0.2),     axis.ticks.x = element_blank(),     strip.text.x = element_markdown(angle = 90, hjust = 1, size = 8),     strip.background.x = element_part_rect(side = \"t\", linewidth = 0.5),     strip.placement = \"inside\",     panel.spacing = unit(1, \"mm\"),     strip.clip = \"off\",     legend.position = \"inside\",     legend.position.inside = c(0.8, 0.9),     legend.title.position = \"top\",     legend.title = element_text(hjust = 0.5),     legend.background = element_blank(),     axis.line.x = element_blank()   ) +   labs(fill = \"Timepoint\") +   guides(     x = guide_axis(cap = \"none\"),     y = guide_axis(cap = \"upper\"),     fill = guide_legend(nrow = 1, keywidth = 0.75, keyheight = 0.75)   ) +   coord_cartesian(clip = \"off\") ggsave(pl, file = here(\"plots\", \"epi_cluster_proportions.pdf\"), width = 5, height = 3) pl emt_paths <- grep(\"emt|HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\", ignore.case = T, colnames(srt_epi@meta.data), value = T) myc_paths <- c(grep(\"myc\", ignore.case = T, colnames(srt_epi@meta.data), value = T)) stemness <- c(\"WONG_EMBRYONIC_STEM_CELL_CORE\", \"BENPORATH_PRC2_TARGETS\") metabolic_paths <- c(\"HALLMARK_GLYCOLYSIS\", \"HALLMARK_OXIDATIVE_PHOSPHORYLATION\", \"HALLMARK_MTORC1_SIGNALING\") histological_malignant <- c(\"LUAD\", \"LUSC\", \"SCLC\") histological <- c(\"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_1_CELL\", \"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_2_CELL\", \"alveolar_malignant\", \"TRAVAGLINI_LUNG_BASAL_CELL\", \"TRAVAGLINI_LUNG_CILIATED_CELL\", \"TRAVAGLINI_LUNG_CLUB_CELL\", \"TRAVAGLINI_LUNG_NEUROENDOCRINE_CELL\", \"TRAVAGLINI_LUNG_PROLIFERATING_BASAL_CELL\", \"TRAVAGLINI_LUNG_PROXIMAL_BASAL_CELL\") cell_cycle <- c(grep(\"cycle\", colnames(srt_epi@meta.data), ignore.case = T, value = T)) mapk <- c(\"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\", \"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_SIGNALING_BY_EGFR\")   pth_list <- list(   \"EMT\" = emt_paths,   \"MYC\" = myc_paths,   \"Stem\" = stemness,   \"Metabolic\" = metabolic_paths,   \"Lung Cancer\" = histological_malignant,   \"Histological\" = histological,   \"Cell Cycle\" = cell_cycle,   \"MAPK\" = mapk )  pth_df <- DotPlotter(srt_epi, features = pth_list, cluster_groups = F, cluster_feats = F, group.by = \"cell_type_epi\")$data # Adjust names and filter pth_df <- pth_df %>%   filter(!grepl(\"_epithelial$\", features.plot)) %>%   filter(!grepl(\"TGFB\", features.plot)) %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar_malignant\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_ii_malignant\" ~ \"EMT (II)\",     features.plot == \"emt_iii_malignant\" ~ \"EMT (III)\",     features.plot == \"emt_iv_malignant\" ~ \"EMT (IV)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s_malignant\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m_malignant\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich_malignant\" ~ \"HMG Rich\",     features.plot == \"myc_malignant\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   )) %>%   mutate(     pathway_source = case_when(       grepl(\"_malignant$\", features.plot) ~ \"Malignant Metaprograms\",       grepl(\"_epithelial$\", features.plot) ~ \"Epithelial Metaprograms\",       grepl(\"^TRAVAGLINI\", features.plot) ~ \"Travaglini\",       grepl(\"^HALLMARK_\", features.plot) ~ \"Hallmark Pathways\",       features.plot %in% c(\"S.Score\", \"G2M.Score\") ~ \"Seurat\",       .default = \"Curated\"     )   ) %>%   # Remove extra myc pathways since they all show the same thing   filter(     !(grepl(\"MYC\", features.plot, ignore.case = T) & pathway_source == \"Curated\")   ) %>%   arrange(desc(pathway_source), desc(pathway))  # constructive::construct(unique(pth_df$pathway)) pth_cat_order <- c(   \"Histological\", \"Lung Cancer\", \"MAPK\", \"EMT\", \"MYC\",   \"Stem\", \"Metabolic\", \"Cell Cycle\" )  pth_order <- c(   \"G1S\", \"G2M\", \"G2M Score\", \"HMG Rich\", \"S Score\",   \"EMT (I)\", \"EMT (II)\", \"EMT (III)\", \"EMT (IV)\", \"EMT\",   \"LUAD\", \"LUSC\", \"SCLC\",   \"AT1 Cell\", \"AT2 Cell\", \"Alveolar Signature\", \"Basal Cell\", \"Proximal Basal Cell\",   \"Proliferating Basal Cell\", \"Club Cell\", \"Ciliated Cell\",   \"Neuroendocrine Cell\", \"MYC\", \"MYC Targets V1\", \"MYC Targets V2\",   \"Glycolysis\", \"Oxidative Phosphorylation\", \"MTORC1\", \"Embryonic Stem Cell (Wong)\",   \"PRC2 Targets (Ben-Porath)\",   \"MAPK (KEGG)\", \"MAPK (Biocarta)\", \"MAPK (Reactome)\", \"Nuclear MAPK (Reactome)\", \"EGFR (Reactome)\" )  pth_df <- pth_df %>%   mutate(     pathway = fct_relevel(pathway, rev(pth_order)),     feature.groups = fct_relevel(feature.groups, pth_cat_order)   )  p1 <- pth_df %>%   ggplot(aes(x = \"Pathway Source\", y = pathway)) +   geom_tile(aes(fill = pathway_source), color = \"black\") +   scale_fill_pander() +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line.x = element_blank(),     axis.line.y = element_blank(), legend.position = \"left\", strip.background = element_blank(), strip.text = element_blank()   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(keywidth = 0.5, keyheight = 0.5)   ) +   facet_grid(feature.groups ~ ., scales = \"free\", space = \"free\") +   labs(y = NULL, x = NULL, fill = \"Pathway Source\")   p2 <- pth_df %>%   ggplot(aes(x = id, y = pathway)) +   geom_tile(aes(fill = avg.exp.scaled), color = \"black\") +   scale_fill_viridis_c(option = \"inferno\") +   facet_grid(feature.groups ~ ., scales = \"free\", space = \"free\") +   guides(     x = guide_axis(angle = 90),     x.sec = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line = element_blank(), panel.border = element_blank(),     strip.background.y = element_blank(),     strip.text.y.right = element_text(angle = 0, hjust = 0)   ) +   labs(y = NULL, x = NULL, fill = \"Scaled\\nExpression\")  sig_heatplot <- (p1 + theme(plot.margin = margin(l = 0.25, r = 1, unit = \"mm\"))) + (p2 + theme(plot.margin = margin(r = 0.25, unit = \"mm\"), axis.text.y = element_blank(), axis.ticks.y = element_blank())) + plot_layout(guides = \"collect\", ncol = 2, widths = c(0.03, 1)) + plot_annotation(theme = theme(legend.position = \"bottom\")) &   theme(panel.spacing = unit(1, \"mm\"), panel.border = element_rect(fill = NA, color = \"black\", linewidth = 0.5), legend.box.margin = margin()) &   coord_cartesian(clip = \"off\") ggsave(sig_heatplot, file = here(\"plots\", \"epi_types_signature_heatmap.pdf\"), width = 5, height = 9) sig_heatplot select_paths <- unique(sig_heatplot$data$features.plot) select_paths_name <- unique(sig_heatplot$data$pathway)  all_sig_summary <- srt_epi@meta.data %>%   group_by(sample_id, time_point, is_tumor_cell) %>%   filter(is_tumor_cell) %>%   summarize(across(all_of(select_paths), ~ mean(.x, na.rm = T))) %>%   pivot_longer(cols = all_of(select_paths), names_to = \"features.plot\", values_to = \"Score\") %>%   group_by(features.plot) %>%   mutate(Score_Scaled = scale(Score)[, 1]) %>%   ungroup() %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar_malignant\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_ii_malignant\" ~ \"EMT (II)\",     features.plot == \"emt_iii_malignant\" ~ \"EMT (III)\",     features.plot == \"emt_iv_malignant\" ~ \"EMT (IV)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s_malignant\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m_malignant\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich_malignant\" ~ \"HMG Rich\",     features.plot == \"myc_malignant\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   ))  p <- all_sig_summary %>%   filter(pathway %in% select_paths_name) %>%   ggplot(aes(x = time_point, y = Score)) +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~pathway, scales = \"free\", strip.position = \"left\", ncol = 6) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.clip = \"off\", strip.placement = \"outside\") +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\") +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.1))) +   labs(x = \"Timepoint\") +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_sig_tumor_specific_boxplots_select.pdf\"), width = 8.5, height = 11) p select_paths_main <- c(\"Alveolar Signature\", \"LUAD\", \"Nuclear MAPK (Reactome)\", \"MYC\", \"Proliferating Basal Cell\", \"EMT\") p <- all_sig_summary %>%   filter(pathway %in% select_paths_main) %>%   ggplot(aes(x = time_point, y = Score)) +   # geom_violin(aes(fill = time_point), scale = \"width\") +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~ fct_relevel(pathway, select_paths_main), scales = \"free\", nrow = 1, strip.position = \"left\") +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.text.y = element_text(size = 10), strip.clip = \"off\", strip.placement = \"outside\", panel.spacing = unit(0, \"mm\")) +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\", step.increase = 0.075) +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.05))) +   labs(x = NULL, y = NULL) +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_tumor_boxplot_main.pdf\"), width = 8, height = 2.6) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"UMAP","title":null,"text":"","code":"lab_cents <- scatools:::get_label_centers(obj = srt_epi, group_var = \"cell_type_epi\", reduced_dim = \"umap\")  df_leg <- srt_epi@meta.data %>%   add_count(cell_type_epi, name = \"epi_n\") %>%   distinct(cell_type_epi, epi_n) %>%   mutate(label = glue(\"({prettyNum(epi_n, big.mark = ',')})\"))  p1_leg <- df_leg %>%   ggplot(aes(y = fct_rev(cell_type_epi), x = epi_n)) +   geom_point(aes(x = -10000, color = cell_type_epi), size = 3.5) +   geom_col(aes(fill = cell_type_epi), width = 0.5) +   geom_text(aes(x = epi_n, label = label), size = 3, hjust = -0.1, color = \"black\") +   scale_fill_manual(values = colors$cell_type_epi) +   scale_color_manual(values = colors$cell_type_epi) +   coord_cartesian(clip = \"off\") +   theme(     strip.placement = \"outside\",     strip.background.y = element_part_rect(side = \"r\", fill = NA),     axis.ticks = element_blank(),     axis.line = element_blank(),     axis.text.x = element_blank(),     strip.text.y.left = element_text(angle = 0, hjust = 1),     plot.margin = margin(1, 4, 1, 1, unit = \"lines\")   ) +   labs(x = NULL, y = NULL) +   scale_x_continuous(expand = c(0.025, 0)) +   guides(x = guide_axis(cap = \"both\")) +   NoLegend()  p1 <- DimPlot(srt_epi, reduction = \"umap\", group.by = \"cell_type_epi\", shuffle = T, raster.dpi = c(350, 350)) +   umap_theme() +   ggrepel::geom_text_repel(     data = lab_cents, aes(x = x, y = y, label = cell_type_epi),     min.segment.length = 0,     segment.size = 0.75,     fontface = \"bold\",     force = 5,     bg.colour = \"white\",     max.iter = 1e9,     bg.r = 0.1,     position = ggpp::position_nudge_center(center_x = 2, center_y = 2, direction = \"radial\", x = 0, y = 0)   ) +   scale_color_manual(values = colors$cell_type_epi, labels = label_num_generator(srt_epi$cell_type_epi), breaks = levels(srt_epi$cell_type_epi)) +   NoAxes() +   NoLegend() +   theme(aspect.ratio = 1) +   labs(title = \"Epithelial Cells\")  layout <- c(   area(t = 10, b = 100, l = 1, r = 100),   area(t = 4, l = 88, b = 59, r = 100) ) # pcomb <- (p1 + theme(plot.margin = margin())) + free(p1_leg + theme(aspect.ratio = 1.9, plot.margin = margin())) + plot_layout(design = layout) pcomb <- (p1 + theme(plot.margin = margin())) + p1_leg + plot_layout(design = layout)   ggsave(pcomb, file = here(\"plots\", \"epi_umap.pdf\"), width = 6.75, height = 4.25) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Marker plots","title":null,"text":"","code":"epi_dotplot <- DotPlotter(srt_epi, features = markers$epi_markers_final, group.by = \"cell_type_epi\", cluster_groups = F, rotate_y_strip = T) ggsave(epi_dotplot, file = here(\"plots\", \"epi_marker_dotplot_unfilt.pdf\"), width = 9, height = 4) epi_dotplot +   theme(axis.text.y = element_markdown()) dp <- DotPlotter(srt_epi, features = markers$epi_markers_hlca, group.by = \"cell_type_epi\", cluster_groups = F) dp_f <- dp + theme(strip.text.x = element_text(angle = 90, hjust = 0), panel.spacing = unit(1, \"mm\")) +   guides(y.sec = guide_axis()) +   labs(title = \"Human Lung Cell Atlas Epithelial Marker List\") +   theme(plot.title = element_text(hjust = 0.5)) ggsave(dp_f, file = here(\"plots\", \"hlca_marker_dotplot.pdf\"), width = 14, height = 4.5) dp_f glist <- c(\"SFTPB\", \"SFTPC\", \"SCGB3A2\", \"KRT13\", \"KRT6A\", \"DSG3\")  x <- Plot_Density_Custom(seurat_object = srt_epi, features = glist, viridis_palette = \"inferno\", joint = F, combine = F)  names(x) <- glist  res <- map(names(x), .f = function(gene) {   x[[gene]]$data %>%     mutate(!!gene := standardize(feature)) }) names(res) <- names(x)  pls <- map(names(res), .f = function(gene) {   p <- res[[gene]] %>%     arrange(.data[[gene]]) %>%     ggplot(aes(x = Xumap_1, y = Xumap_2)) +     scattermore::geom_scattermore(aes(color = .data[[gene]]), pixels = c(256, 256)) +     scale_color_viridis_c(option = \"inferno\") +     labs(title = gene, color = \"Density\") })  pcomb <- pls %>%   wrap_plots(nrow = 2, guides = \"collect\") &   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) &   umap_theme() &   NoAxes() &   theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5, face = \"bold\")) &   labs(color = \"Expression\\nDensity\") ggsave(pcomb, filename = here(\"plots\", \"epi_exp_dens.pdf\"), width = 6, height = 4) pcomb df <- FetchData(srt_epi, vars = c(\"cell_type_epi\", \"SFTPB\")) p <- df %>%   filter(grepl(\"^PDTC|^AT2\", cell_type_epi)) %>%   ggplot(aes(x = fct_reorder(cell_type_epi, -SFTPB, median), y = SFTPB)) +   geom_violin(scale = \"width\", aes(fill = cell_type_epi)) +   guides(x = guide_axis(angle = 45)) +   geom_boxplot(width = 0.1, fill = \"white\", outliers = F) +   scale_fill_manual(values = colors$cell_type_epi) +   theme_classic(base_size = 16) +   NoLegend() +   labs(x = \"Celltype\", y = \"Expression\", title = \"SFTPB\") +   theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) ggsave(p, file = here(\"plots\", \"sftpc_epi_expression.pdf\"), width = 2.5, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Curated Markers","title":null,"text":"","code":"epi_dotplot <- DotPlotter(srt_epi, features = markers$epi_markers_final, group.by = \"cell_type_epi\", cluster_groups = F, rotate_y_strip = T) ggsave(epi_dotplot, file = here(\"plots\", \"epi_marker_dotplot_unfilt.pdf\"), width = 9, height = 4) epi_dotplot +   theme(axis.text.y = element_markdown())"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"HLCA marker set","title":null,"text":"","code":"dp <- DotPlotter(srt_epi, features = markers$epi_markers_hlca, group.by = \"cell_type_epi\", cluster_groups = F) dp_f <- dp + theme(strip.text.x = element_text(angle = 90, hjust = 0), panel.spacing = unit(1, \"mm\")) +   guides(y.sec = guide_axis()) +   labs(title = \"Human Lung Cell Atlas Epithelial Marker List\") +   theme(plot.title = element_text(hjust = 0.5)) ggsave(dp_f, file = here(\"plots\", \"hlca_marker_dotplot.pdf\"), width = 14, height = 4.5) dp_f"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Marker density plots","title":null,"text":"","code":"glist <- c(\"SFTPB\", \"SFTPC\", \"SCGB3A2\", \"KRT13\", \"KRT6A\", \"DSG3\")  x <- Plot_Density_Custom(seurat_object = srt_epi, features = glist, viridis_palette = \"inferno\", joint = F, combine = F)  names(x) <- glist  res <- map(names(x), .f = function(gene) {   x[[gene]]$data %>%     mutate(!!gene := standardize(feature)) }) names(res) <- names(x)  pls <- map(names(res), .f = function(gene) {   p <- res[[gene]] %>%     arrange(.data[[gene]]) %>%     ggplot(aes(x = Xumap_1, y = Xumap_2)) +     scattermore::geom_scattermore(aes(color = .data[[gene]]), pixels = c(256, 256)) +     scale_color_viridis_c(option = \"inferno\") +     labs(title = gene, color = \"Density\") })  pcomb <- pls %>%   wrap_plots(nrow = 2, guides = \"collect\") &   guides(color = guide_colorbar(keywidth = 0.5, keyheight = 3)) &   umap_theme() &   NoAxes() &   theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5, face = \"bold\")) &   labs(color = \"Expression\\nDensity\") ggsave(pcomb, filename = here(\"plots\", \"epi_exp_dens.pdf\"), width = 6, height = 4) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"SFTPB Expression","title":null,"text":"","code":"df <- FetchData(srt_epi, vars = c(\"cell_type_epi\", \"SFTPB\")) p <- df %>%   filter(grepl(\"^PDTC|^AT2\", cell_type_epi)) %>%   ggplot(aes(x = fct_reorder(cell_type_epi, -SFTPB, median), y = SFTPB)) +   geom_violin(scale = \"width\", aes(fill = cell_type_epi)) +   guides(x = guide_axis(angle = 45)) +   geom_boxplot(width = 0.1, fill = \"white\", outliers = F) +   scale_fill_manual(values = colors$cell_type_epi) +   theme_classic(base_size = 16) +   NoLegend() +   labs(x = \"Celltype\", y = \"Expression\", title = \"SFTPB\") +   theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) ggsave(p, file = here(\"plots\", \"sftpc_epi_expression.pdf\"), width = 2.5, height = 3) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Relative cluster proportions","title":null,"text":"","code":"p1 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = sample_id), position = \"fill\") +   scale_fill_manual(values = colors$sample_id_new) +   labs(fill = \"Patient\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 6))  p2 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = site_of_tissue_simple), position = \"fill\") +   scale_fill_manual(values = colors$site_of_tissue_simple) +   labs(fill = \"Tissue site\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5, ncol = 2))  p3 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = time_point), position = \"fill\") +   scale_fill_manual(values = colors$time_point) +   guides(x = guide_axis(angle = 45)) +   labs(fill = \"Timepoint\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5))  p4 <- srt_epi@meta.data %>%   add_count(cell_type_epi, cell_type, name = \"n1\") %>%   add_count(cell_type_epi, name = \"n2\") %>%   mutate(prop = n1 / n2) %>%   distinct(cell_type, cell_type_epi, prop) %>%   filter(cell_type == \"Tumor Cell\") %>%   ggplot(aes(x = cell_type_epi, y = prop)) +   geom_col(aes(fill = fct_rev(cell_type)), show.legend = F) +   geom_hline(yintercept = seq(0.25, 1, by = 0.25), alpha = 0.6, linetype = \"dashed\", color = \"grey50\", linewidth = 0.5) +   scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.25)) +   scale_fill_manual(values = colors$cell_type) +   labs(y = \"Proportion\\n(tumor cells)\")  p5 <- srt_epi@meta.data %>%   ggplot(aes(x = cell_type_epi)) +   geom_bar(aes(fill = Phase), position = \"fill\") +   scale_fill_manual(values = colors$Phase) +   guides(x = guide_axis(angle = 45)) +   labs(fill = \"Cell Cycle Phase\", y = \"Proportion\") +   guides(fill = guide_legend(keywidth = 0.5, keyheight = 0.5))  gap_size <- 2  pcomb <- wrap_plots(   p1 + theme(plot.margin = margin(t = 4, r = 2, b = gap_size, l = 2, \"mm\")),   free(p3 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p2 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p5 + theme(plot.margin = margin(t = gap_size, r = 2, b = gap_size, l = 2, \"mm\")), type = \"space\", side = \"r\"),   free(p4 + theme(plot.margin = margin(t = gap_size, r = 2, b = 2, l = 4, \"mm\")), type = \"space\", side = \"l\"),   ncol = 1, axes = \"collect_x\" ) &   guides(     x = guide_axis(angle = 65, cap = \"none\"),     y = guide_axis(cap = \"both\")   ) &   scale_y_continuous(expand = c(0, 0)) &   labs(x = \"Epithelial cell state\") &   coord_cartesian(clip = \"off\") ggsave(pcomb, file = here(\"plots\", \"epi_type_feature_proportions.pdf\"), width = 6.75, height = 7.5) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Tumor Cell State Proportions","title":null,"text":"version proportion pts tumor cells ","code":"use_col <- \"cell_type_epi\"  df <- srt_epi@meta.data %>%   filter(cell_type == \"Tumor Cell\") %>%   add_count(.data[[use_col]], time_point, sample_id, name = \"epi_type_n\") %>%   add_count(sample_id, name = \"sample_n\") %>%   mutate(tum_prop = epi_type_n / sample_n) %>%   distinct(.data[[use_col]], epi_type_n, sample_n, tum_prop, sample_id, time_point)   p_df <- df %>%   group_by(.data[[use_col]]) %>%   rstatix::wilcox_test(tum_prop ~ time_point) %>%   rstatix::adjust_pvalue(method = \"BH\") %>%   rstatix::add_significance(     symbols = symnum_0.1_star$symbols,     cutpoints = symnum_0.1_star$cutpoints   ) %>%   filter(p.adj < 0.1) %>%   rstatix::add_xy_position()  pl <- df %>%   ggplot(aes(x = time_point, y = tum_prop)) +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 0.75, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3, show.legend = F) +   guides(x = guide_axis(angle = 45)) +   labs(y = \"Tumor cell proportion\", x = NULL) +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   facet_grid(. ~ .data[[use_col]], scales = \"free\", space = \"free\", switch = \"x\") +   ggprism::add_pvalue(p_df, tip.length = 0, label = \"p.adj.signif\", step.increase = -0.01, bracket.nudge.y = 0, bracket.size = 0.2, label.size = 2.5) +   scale_y_continuous(breaks = seq(0, 1, by = 0.25), expand = expansion(mult = c(0.05, 0.1))) +   theme(     axis.text.x = element_blank(),     axis.title.y = element_text(hjust = 0.2),     axis.ticks.x = element_blank(),     strip.text.x = element_markdown(angle = 90, hjust = 1, size = 8),     strip.background.x = element_part_rect(side = \"t\", linewidth = 0.5),     strip.placement = \"inside\",     panel.spacing = unit(1, \"mm\"),     strip.clip = \"off\",     legend.position = \"inside\",     legend.position.inside = c(0.8, 0.9),     legend.title.position = \"top\",     legend.title = element_text(hjust = 0.5),     legend.background = element_blank(),     axis.line.x = element_blank()   ) +   labs(fill = \"Timepoint\") +   guides(     x = guide_axis(cap = \"none\"),     y = guide_axis(cap = \"upper\"),     fill = guide_legend(nrow = 1, keywidth = 0.75, keyheight = 0.75)   ) +   coord_cartesian(clip = \"off\") ggsave(pl, file = here(\"plots\", \"epi_cluster_proportions.pdf\"), width = 5, height = 3) pl"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Signature Heatmap","title":null,"text":"","code":"emt_paths <- grep(\"emt|HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION\", ignore.case = T, colnames(srt_epi@meta.data), value = T) myc_paths <- c(grep(\"myc\", ignore.case = T, colnames(srt_epi@meta.data), value = T)) stemness <- c(\"WONG_EMBRYONIC_STEM_CELL_CORE\", \"BENPORATH_PRC2_TARGETS\") metabolic_paths <- c(\"HALLMARK_GLYCOLYSIS\", \"HALLMARK_OXIDATIVE_PHOSPHORYLATION\", \"HALLMARK_MTORC1_SIGNALING\") histological_malignant <- c(\"LUAD\", \"LUSC\", \"SCLC\") histological <- c(\"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_1_CELL\", \"TRAVAGLINI_LUNG_ALVEOLAR_EPITHELIAL_TYPE_2_CELL\", \"alveolar_malignant\", \"TRAVAGLINI_LUNG_BASAL_CELL\", \"TRAVAGLINI_LUNG_CILIATED_CELL\", \"TRAVAGLINI_LUNG_CLUB_CELL\", \"TRAVAGLINI_LUNG_NEUROENDOCRINE_CELL\", \"TRAVAGLINI_LUNG_PROLIFERATING_BASAL_CELL\", \"TRAVAGLINI_LUNG_PROXIMAL_BASAL_CELL\") cell_cycle <- c(grep(\"cycle\", colnames(srt_epi@meta.data), ignore.case = T, value = T)) mapk <- c(\"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\", \"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_SIGNALING_BY_EGFR\")   pth_list <- list(   \"EMT\" = emt_paths,   \"MYC\" = myc_paths,   \"Stem\" = stemness,   \"Metabolic\" = metabolic_paths,   \"Lung Cancer\" = histological_malignant,   \"Histological\" = histological,   \"Cell Cycle\" = cell_cycle,   \"MAPK\" = mapk )  pth_df <- DotPlotter(srt_epi, features = pth_list, cluster_groups = F, cluster_feats = F, group.by = \"cell_type_epi\")$data # Adjust names and filter pth_df <- pth_df %>%   filter(!grepl(\"_epithelial$\", features.plot)) %>%   filter(!grepl(\"TGFB\", features.plot)) %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar_malignant\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_ii_malignant\" ~ \"EMT (II)\",     features.plot == \"emt_iii_malignant\" ~ \"EMT (III)\",     features.plot == \"emt_iv_malignant\" ~ \"EMT (IV)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s_malignant\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m_malignant\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich_malignant\" ~ \"HMG Rich\",     features.plot == \"myc_malignant\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   )) %>%   mutate(     pathway_source = case_when(       grepl(\"_malignant$\", features.plot) ~ \"Malignant Metaprograms\",       grepl(\"_epithelial$\", features.plot) ~ \"Epithelial Metaprograms\",       grepl(\"^TRAVAGLINI\", features.plot) ~ \"Travaglini\",       grepl(\"^HALLMARK_\", features.plot) ~ \"Hallmark Pathways\",       features.plot %in% c(\"S.Score\", \"G2M.Score\") ~ \"Seurat\",       .default = \"Curated\"     )   ) %>%   # Remove extra myc pathways since they all show the same thing   filter(     !(grepl(\"MYC\", features.plot, ignore.case = T) & pathway_source == \"Curated\")   ) %>%   arrange(desc(pathway_source), desc(pathway))  # constructive::construct(unique(pth_df$pathway)) pth_cat_order <- c(   \"Histological\", \"Lung Cancer\", \"MAPK\", \"EMT\", \"MYC\",   \"Stem\", \"Metabolic\", \"Cell Cycle\" )  pth_order <- c(   \"G1S\", \"G2M\", \"G2M Score\", \"HMG Rich\", \"S Score\",   \"EMT (I)\", \"EMT (II)\", \"EMT (III)\", \"EMT (IV)\", \"EMT\",   \"LUAD\", \"LUSC\", \"SCLC\",   \"AT1 Cell\", \"AT2 Cell\", \"Alveolar Signature\", \"Basal Cell\", \"Proximal Basal Cell\",   \"Proliferating Basal Cell\", \"Club Cell\", \"Ciliated Cell\",   \"Neuroendocrine Cell\", \"MYC\", \"MYC Targets V1\", \"MYC Targets V2\",   \"Glycolysis\", \"Oxidative Phosphorylation\", \"MTORC1\", \"Embryonic Stem Cell (Wong)\",   \"PRC2 Targets (Ben-Porath)\",   \"MAPK (KEGG)\", \"MAPK (Biocarta)\", \"MAPK (Reactome)\", \"Nuclear MAPK (Reactome)\", \"EGFR (Reactome)\" )  pth_df <- pth_df %>%   mutate(     pathway = fct_relevel(pathway, rev(pth_order)),     feature.groups = fct_relevel(feature.groups, pth_cat_order)   )  p1 <- pth_df %>%   ggplot(aes(x = \"Pathway Source\", y = pathway)) +   geom_tile(aes(fill = pathway_source), color = \"black\") +   scale_fill_pander() +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line.x = element_blank(),     axis.line.y = element_blank(), legend.position = \"left\", strip.background = element_blank(), strip.text = element_blank()   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(keywidth = 0.5, keyheight = 0.5)   ) +   facet_grid(feature.groups ~ ., scales = \"free\", space = \"free\") +   labs(y = NULL, x = NULL, fill = \"Pathway Source\")   p2 <- pth_df %>%   ggplot(aes(x = id, y = pathway)) +   geom_tile(aes(fill = avg.exp.scaled), color = \"black\") +   scale_fill_viridis_c(option = \"inferno\") +   facet_grid(feature.groups ~ ., scales = \"free\", space = \"free\") +   guides(     x = guide_axis(angle = 90),     x.sec = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme(     axis.line = element_blank(), panel.border = element_blank(),     strip.background.y = element_blank(),     strip.text.y.right = element_text(angle = 0, hjust = 0)   ) +   labs(y = NULL, x = NULL, fill = \"Scaled\\nExpression\")  sig_heatplot <- (p1 + theme(plot.margin = margin(l = 0.25, r = 1, unit = \"mm\"))) + (p2 + theme(plot.margin = margin(r = 0.25, unit = \"mm\"), axis.text.y = element_blank(), axis.ticks.y = element_blank())) + plot_layout(guides = \"collect\", ncol = 2, widths = c(0.03, 1)) + plot_annotation(theme = theme(legend.position = \"bottom\")) &   theme(panel.spacing = unit(1, \"mm\"), panel.border = element_rect(fill = NA, color = \"black\", linewidth = 0.5), legend.box.margin = margin()) &   coord_cartesian(clip = \"off\") ggsave(sig_heatplot, file = here(\"plots\", \"epi_types_signature_heatmap.pdf\"), width = 5, height = 9) sig_heatplot"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Signature tumor boxplots","title":null,"text":"Single table can plot select pathways interest","code":"select_paths <- unique(sig_heatplot$data$features.plot) select_paths_name <- unique(sig_heatplot$data$pathway)  all_sig_summary <- srt_epi@meta.data %>%   group_by(sample_id, time_point, is_tumor_cell) %>%   filter(is_tumor_cell) %>%   summarize(across(all_of(select_paths), ~ mean(.x, na.rm = T))) %>%   pivot_longer(cols = all_of(select_paths), names_to = \"features.plot\", values_to = \"Score\") %>%   group_by(features.plot) %>%   mutate(Score_Scaled = scale(Score)[, 1]) %>%   ungroup() %>%   mutate(pathway = case_when(     grepl(\"^TRAVAGLINI_LUNG_\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"TRAVAGLINI_LUNG_\", \"\", features.plot))),     features.plot == \"alveolar_malignant\" ~ \"Alveolar Signature\",     grepl(\"^HALLMARK\", features.plot) ~ str_to_title(gsub(\"_\", \" \", gsub(\"HALLMARK_\", \"\", features.plot))),     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_ii_malignant\" ~ \"EMT (II)\",     features.plot == \"emt_iii_malignant\" ~ \"EMT (III)\",     features.plot == \"emt_iv_malignant\" ~ \"EMT (IV)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"emt_i_malignant\" ~ \"EMT (I)\",     features.plot == \"S.Score\" ~ \"S Score\",     features.plot == \"G2M.Score\" ~ \"G2M Score\",     features.plot == \"cell_cycle_g1_s_malignant\" ~ \"G1S\",     features.plot == \"cell_cycle_g2_m_malignant\" ~ \"G2M\",     features.plot == \"cell_cycle_hmg_rich_malignant\" ~ \"HMG Rich\",     features.plot == \"myc_malignant\" ~ \"MYC\",     features.plot == \"WONG_EMBRYONIC_STEM_CELL_CORE\" ~ \"Embryonic Stem Cell (Wong)\",     features.plot == \"BENPORATH_PRC2_TARGETS\" ~ \"PRC2 Targets (Ben-Porath)\",     features.plot == \"REACTOME_MAPK_FAMILY_SIGNALING_CASCADES\" ~ \"MAPK (Reactome)\",     features.plot == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",     features.plot == \"REACTOME_ONCOGENIC_MAPK_SIGNALING\" ~ \"Oncogenic MAPK (Reactome)\",     features.plot == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",     features.plot == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",     features.plot == \"REACTOME_SIGNALING_BY_EGFR\" ~ \"EGFR (Reactome)\",     .default = features.plot   )) %>%   # Fix additional   mutate(pathway = case_when(     pathway == \"Mtorc1 Signaling\" ~ \"MTORC1\",     pathway == \"Epithelial Mesenchymal Transition\" ~ \"EMT\",     pathway == \"Alveolar Epithelial Type 2 Cell\" ~ \"AT2 Cell\",     pathway == \"Alveolar Epithelial Type 1 Cell\" ~ \"AT1 Cell\",     pathway == \"Oxidative Phosphorylation\" ~ \"OxPhos\",     grepl(\"Myc\", pathway) ~ gsub(\"Myc\", \"MYC\", pathway),     .default = pathway   ))  p <- all_sig_summary %>%   filter(pathway %in% select_paths_name) %>%   ggplot(aes(x = time_point, y = Score)) +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~pathway, scales = \"free\", strip.position = \"left\", ncol = 6) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.clip = \"off\", strip.placement = \"outside\") +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\") +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.1))) +   labs(x = \"Timepoint\") +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_sig_tumor_specific_boxplots_select.pdf\"), width = 8.5, height = 11) p select_paths_main <- c(\"Alveolar Signature\", \"LUAD\", \"Nuclear MAPK (Reactome)\", \"MYC\", \"Proliferating Basal Cell\", \"EMT\") p <- all_sig_summary %>%   filter(pathway %in% select_paths_main) %>%   ggplot(aes(x = time_point, y = Score)) +   # geom_violin(aes(fill = time_point), scale = \"width\") +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~ fct_relevel(pathway, select_paths_main), scales = \"free\", nrow = 1, strip.position = \"left\") +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.text.y = element_text(size = 10), strip.clip = \"off\", strip.placement = \"outside\", panel.spacing = unit(0, \"mm\")) +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\", step.increase = 0.075) +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.05))) +   labs(x = NULL, y = NULL) +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_tumor_boxplot_main.pdf\"), width = 8, height = 2.6) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"For Main","title":null,"text":"","code":"select_paths_main <- c(\"Alveolar Signature\", \"LUAD\", \"Nuclear MAPK (Reactome)\", \"MYC\", \"Proliferating Basal Cell\", \"EMT\") p <- all_sig_summary %>%   filter(pathway %in% select_paths_main) %>%   ggplot(aes(x = time_point, y = Score)) +   # geom_violin(aes(fill = time_point), scale = \"width\") +   geom_boxplot(outliers = F, size = 0.5, aes(fill = time_point), width = 0.9) +   geom_quasirandom(size = 1, alpha = 0.6, color = \"black\", aes(fill = time_point), stroke = 0.25, pch = 21, width = 0.3) +   facet_wrap(~ fct_relevel(pathway, select_paths_main), scales = \"free\", nrow = 1, strip.position = \"left\") +   scale_color_manual(values = colors$time_point) +   scale_fill_manual(values = colors$time_point) +   coord_cartesian(clip = \"off\") +   theme(legend.position = \"none\", strip.background = element_blank(), strip.text.y = element_text(size = 10), strip.clip = \"off\", strip.placement = \"outside\", panel.spacing = unit(0, \"mm\")) +   ggpubr::geom_pwc(tip.length = 0, method = \"t_test\", label.size = 2, label = \"p.adj.signif\", p.adjust.method = \"BH\", step.increase = 0.075) +   scale_y_continuous(expand = expansion(mult = c(0.05, 0.05))) +   labs(x = NULL, y = NULL) +   guides(x = guide_axis(angle = 45)) ggsave(p, file = here(\"plots\", \"epi_tumor_boxplot_main.pdf\"), width = 8, height = 2.6) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Figure 4 – MAPKalt","title":null,"text":"Subset tumor cells   Plot main  Plot supp   Create plot mutations annotated bar side, notable genes expression box heat encoding  Psuedobulk exp heatmap   model MAPKalt vs three histologies, model mutation’s association LUSC SCLC","code":"srt_tum <- srt_epi[, srt_epi$is_tumor_cell] plist <- split(pathways$Gene, pathways$pathway)  meta_programs_df <- read.table(file = \"https://raw.githubusercontent.com/mjz1/meta_programs_tirosh/refs/heads/main/tirosh_mp_patched.txt\", header = T, sep = \"\\t\")  meta_programs <- split(meta_programs_df, meta_programs_df$cell_type)  meta_programs <- map(meta_programs, .f = function(x) {   res <- split(x, x$meta_program)   map(res, .f = function(y) y$Gene) })  names(meta_programs) <- janitor::make_clean_names(names(meta_programs))   plist_sel <- list(   \"Alveolar\" = meta_programs$malignant$alveolar,   \"LUAD\" = plist$LUAD_GIRARD,   \"LUSC\" = plist$LUSC_GIRARD,   \"SCLC\" = plist$SCLC_CCLE,   \"Nuclear MAPK (Reactome)\" = plist$REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES,   \"MAPK (KEGG)\" = plist$KEGG_MAPK_SIGNALING_PATHWAY,   \"MAPK (Biocarta)\" = plist$BIOCARTA_MAPK_PATHWAY )  plist_sel <- map(plist_sel, unique)  fit <- euler(plist_sel) pdf(here(\"plots\", \"mapk_path_overlaps_extended.pdf\"), width = 7, height = 7) plot(fit, quantities = TRUE, legend = F) dev.off() png    2 plot(fit, quantities = TRUE, legend = F) paths <- c(\"Nuclear MAPK (Reactome)\", \"MAPK (Biocarta)\", \"MAPK (KEGG)\") all_sig_summary_wide <- all_sig_summary %>%   pivot_wider(id_cols = c(\"sample_id\", \"time_point\"), names_from = pathway, values_from = Score)    pls <- map(paths, .f = function(pth) {   p <- all_sig_summary_wide %>%     ggplot(aes(x = .data[[pth]], y = LUAD)) +     stat_ellipse(       data = all_sig_summary_wide[all_sig_summary_wide$time_point != \"MRD\", ],       aes(fill = time_point),       type = \"t\",       geom = \"polygon\",       alpha = 0.3, show.legend = F     ) +     geom_point(aes(fill = time_point), pch = 21, stroke = 0.5, size = 2.5) +     geom_line(stat = \"smooth\", method = \"lm\", color = \"#063970\", se = F, linewidth = 1.25, alpha = 0.75) +     ggpubr::stat_cor() +     scale_fill_manual(values = colors$time_point, breaks = names(colors$time_point)) +     theme_classic() +     labs(y = \"LUAD Signature\", fill = \"Timepoint\", x = pth) +     guides(fill = guide_legend(override.aes = list(size = 3.5))) })  pcomb <- wrap_plots(pls, nrow = 1, guides = \"collect\", axes = \"collect\") & theme(panel.border = element_rect(fill = NA, color = \"black\"), axis.line = element_blank()) ggsave(pcomb, file = here(\"plots\", \"luad_mapk_select_cors.pdf\"), width = 8, height = 2.75) pcomb library(easystats) x <- srt_epi@meta.data %>%   filter(is_tumor_cell) %>%   mutate(sample_id = factor(sample_id)) %>%   add_count(sample_id, name = \"n_cells\") %>%   dplyr::group_by(sample_id) %>%   correlation::correlation(select = c(\"LUAD\", \"LUSC\", \"SCLC\"), select2 = c(\"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\"), method = \"spearman\") %>%   left_join(distinct(srt_epi@meta.data[, c(\"sample_id\", \"time_point\")]), by = c(\"Group\" = \"sample_id\")) %>%   mutate(     mapk_path = case_when(       Parameter2 == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",       Parameter2 == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",       Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",       .default = Parameter2     )   ) p <- x %>%   filter(Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_main.pdf\"), width = 6, height = 3.5) p p <- x %>%   filter(Parameter2 != \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.background.x = element_part_rect(side = \"b\", fill = NA, color = \"black\"),     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_supp.pdf\"), width = 11, height = 3.5) p df_ord <- srt_tum@meta.data %>%   group_by(sample_id) %>%   summarize(mean_LUAD = mean(LUAD),             median_LUAD = median(LUAD)) %>%   filter(grepl(\"PD\", sample_id)) %>%   arrange(median_LUAD, mean_LUAD)  samp_ord <- df_ord %>%   pull(sample_id) %>%   as.character() %>%   rev()   secondary_mapk_class <- distinct(db$metadata, sample_id, mapk_alt)  srt_tum <- update_metadata(srt_tum, secondary_mapk_class, match_by = \"sample_id\")  p1 <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord), y = LUAD)) +   # ggplot(aes(x = sample_id_new, y = LUAD)) +    geom_violin(scale = \"width\", aes(fill = time_point), show.legend = F) +   geom_pointrange(     stat = \"summary\", fatten = 0.1,     fun.min = function(z) {       quantile(z, 0.25)     },     fun.max = function(z) {       quantile(z, 0.75)     },     fun = median, position = position_dodge(width = 0.8)   ) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   guides(x = guide_axis(angle = 90)) +   labs(x = \"Sample\", y = \"LUAD score\") +   scale_fill_manual(values = colors$time_point) +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background.x = element_blank()   )  p2 <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(LUAD = mean(LUAD)) %>%   ggplot(aes(x = mapk_alt, y = LUAD)) +   geom_boxplot(outliers = F, aes(fill = time_point), show.legend = F) +   geom_quasirandom(size = 0.3, pch = 1) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.signif\") +   guides(x = guide_axis(angle = 45)) +   scale_fill_manual(values = colors$time_point) +   labs(x = NULL, y = \"LUAD score\\n(per sample means)\") +   coord_cartesian(clip = \"off\") +   theme_classic()  pcomb <- p1 + p2 + plot_layout(nrow = 1, widths = c(1, 0.1), guides = \"collect\") & theme(axis.text.x = element_text(size = 6)) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed.pdf\"), width = 5, height = 2.5) pcomb mapk_alt_df <- db$metadata[,c(\"sample_id\", \"secondary_mapk\", \"mapk_alt\")] %>%   filter(sample_id %in% unique(srt_tum$sample_id)) %>%   separate_rows(secondary_mapk, sep = \", \") %>%   separate(secondary_mapk, sep = \"_\", into = c(\"Gene\", \"Variant_Type\"), remove = F) %>%   mutate(     infercnv = grepl(\"inf\", Variant_Type),     Variant_Type = gsub(\"inf\", \"\", Variant_Type),     Gene = case_when(       grepl(\"NA\", Gene) ~ NA,       .default = Gene     )   ) %>%   tidyr::complete(nesting(sample_id, mapk_alt), Gene, fill = list(Variant_Type = \"NoAlt\")) %>%   mutate(Variant_Type = fct_recode(Variant_Type,     \"Amp\" = \"amp\",     \"Fusion\" = \"fus\"   )) %>%   filter(!grepl(\"MRD|TN\", sample_id),          !is.na(Gene))    var_order <- names(table(mapk_alt_df$Variant_Type) %>% sort(decreasing = T)) var_order <- c(var_order[-1], \"NoAlt\")  gene_ord <- mapk_alt_df[!is.na(mapk_alt_df$Gene) & mapk_alt_df$Variant_Type != \"NoAlt\", ]$Gene %>%   table() %>%   sort(decreasing = T)  p3 <- mapk_alt_df %>%   filter(!is.na(Gene)) %>%   ggplot(aes(y = fct_relevel(Gene, rev(names(gene_ord))), x = fct_relevel(sample_id, samp_ord))) +   geom_tile(aes(fill = fct_relevel(Variant_Type, var_order))) +   geom_point(     data = mapk_alt_df[mapk_alt_df$infercnv & !is.na(mapk_alt_df$infercnv), ],     aes(color = \"inferCNV\"), show.legend = F   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(order = 1, keywidth = 0.4, keyheight = 0.4, ncol = 2, theme = theme(legend.margin = margin()))   ) +   scale_fill_manual(     values = c(       \"NoAlt\" = \"white\",       \"Amp\" = \"#4477AA\",       \"Fusion\" = \"#88CCEE\",       \"C797S\" = \"#117733\",       \"Q1235*\" = \"#DDCC77\",       \"Q535*\" = \"#332288\",       \"W175*\" = \"#999933\"     ),     breaks = var_order[-length(var_order)]   ) +   scale_y_discrete(expand = c(0, 0)) +   scale_x_discrete(expand = c(0, 0)) +   scale_color_manual(values = \"black\") +   # scale_x_discrete(drop = FALSE) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   labs(x = \"Sample\", y = \"Gene\", fill = \"Variant\", color = NULL) p1 <- p1 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())  p3 <- p3 + theme_few() + theme(strip.text.x = element_blank(), strip.background.x = element_blank(), legend.background = element_blank(), plot.background = element_blank(), panel.grid = element_line(color = \"grey50\", linetype = \"solid\", linewidth = 1, colour = \"black\"))  pcomb <- (p1) + free(p2, type = \"space\", side = \"b\") + free(p3, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plus_muts_v2.pdf\"), width = 6, height = 4.25)  pcomb feats <- c(\"EGFR\", \"MET\", \"ALK\", \"BRAF\", \"ERBB2\", \"FGFR1\", \"KIT\", \"KRAS\") mapk_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\"), features = feats)  devtools::load_all() mapk_exp_df <- mapk_exp_df %>%   filter(time_point == \"PD\") %>%   mutate(across(all_of(feats), ~ standardize(.x)))   mapk_exp_df_long <- mapk_exp_df %>%   pivot_longer(cols = feats, names_to = \"Gene\", values_to = \"exp\")  p_df <- mapk_exp_df_long %>%   group_by(Gene) %>%   rstatix::wilcox_test(exp ~ mapk_alt, detailed = T) %>%   rstatix::adjust_pvalue(method = \"BH\") %>%   rstatix::add_significance(     p.col = \"p\", cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"***\", \"**\", \"*\", \"^\", \"\")   )  p4 <- mapk_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord), y = as.numeric(fct_relevel(Gene, rev(names(gene_ord)))))) +   geom_tile(aes(fill = exp), color = \"grey10\") +   scale_fill_viridis_c(option = \"rocket\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   scale_y_continuous(     expand = c(0, 0), breaks = 1:n_distinct(mapk_exp_df_long$Gene),     labels = rev(unique(mapk_exp_df_long$Gene)),     sec.axis = sec_axis(~.,       breaks = 1:n_distinct(mapk_exp_df_long$Gene),       labels = rev(p_df$p.signif[match(feats, p_df$Gene)])     )   ) +   scale_x_discrete(expand = c(0, 0)) +   theme_few() +   theme(     strip.text.x = element_blank(), strip.background.x = element_blank(), panel.border = element_blank(),     axis.ticks.y.right = element_blank(), axis.text.y.right = element_text(vjust = 0.8, hjust = 0)   ) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   labs(x = \"Sample\", y = \"Gene\", fill = \"Normalized\\nExpression\") p4 pcomb <- (p1 + theme(plot.margin = margin())) + free(p2, type = \"space\", side = \"b\") + free((p3 + theme(plot.margin = margin(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())), type = \"space\") + plot_spacer() + free(p4, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1), heights = c(1, 1, 0.6)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plusmuts_plusexp.pdf\"), width = 6, height = 5.5)  pcomb dat <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(across(c(LUAD, LUSC, SCLC), mean)) %>%   ungroup() %>%   mutate(mapk_alt = fct_relevel(mapk_alt, \"Unknown\"))  mods <- map(c(\"LUAD\", \"LUSC\", \"SCLC\"), .f = function(pth) {   mod <- lm(glue::glue(\"{pth} ~ mapk_alt\"), dat) %>%     broom::tidy(conf.int = TRUE) %>%     mutate(Signature = pth, .before = 1) %>%     filter(term == \"mapk_altMAPKalt\") }) %>%   list_rbind()  mods <- mods %>%   rstatix::add_significance(     p.col = \"p.value\",     cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"p<0.0001\", \"p<0.001\", \"p<0.01\", \"p<0.05\", \"p<0.1\", \"ns\")   ) p <- mods %>%   ggplot(., aes(x = estimate, y = fct_reorder(Signature, estimate, mean))) +   geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high), fatten = 0.4) +   geom_vline(xintercept = 0, linetype = \"11\") +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     plot.title = element_text(size = 10, hjust = 0.5),     axis.title = element_text(size = 8)   ) +   labs(y = \"Gene Signature\", x = \"Coefficient\", title = \"Secondary MAPK (PD)\") +   geom_text(data = {     filter(mods, p.value != \"ns\")   }, aes(y = Signature, x = estimate, label = p.value.signif), nudge_y = 0.325, size = 2.25) ggsave(p, file = here(\"plots\", \"acquired_mapk_lm.pdf\"), width = 2, height = 1.5) p feats <- c(\"LUAD\", \"LUSC\", \"SCLC\") sig_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\", \"histology_predominant_short\"), features = feats)  sig_exp_df <- sig_exp_df %>%   mutate(across(all_of(feats), ~ scale(.x)))   df_ord <- srt_tum@meta.data %>%   group_by(sample_id) %>%   summarize(mean_LUAD = mean(LUAD),             median_LUAD = median(LUAD)) %>%   arrange(median_LUAD, mean_LUAD)  samp_ord2 <- df_ord %>%   pull(sample_id) %>%   as.character() %>%   rev()  sig_exp_df_long <- sig_exp_df %>%   pivot_longer(cols = feats, names_to = \"Gene\", values_to = \"exp\")  p0 <- sig_exp_df %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord2))) +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), show.legend = F, color = \"black\") +   scale_fill_manual(     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\"), breaks = c(\"MAPKalt\"),     labels = c(\"Secondary MAPK\"), na.value = \"white\"   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme_few() +   labs(y = NULL, x = NULL, fill = NULL) +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  p1 <- sig_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord2), y = fct_relevel(Gene, \"SCLC\", \"LUSC\", \"LUAD\"))) +   geom_tile(aes(fill = exp), color = \"black\") +   # scale_fill_viridis_c(option = \"rocket\", oob = scales::squish, limits = c(-2, 2)) +   scale_fill_gradient2(low = scales::muted(\"blue\"), mid = \"white\", high = scales::muted(\"red\"), oob = scales::squish, limits = c(-2, 2)) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(fill = \"Normalized\\nExpression\", x = \"Sample\", y = \"Lineage\\nSignature\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   theme_few() +   theme(strip.text.x = element_blank()) p0 <- sig_exp_df %>%   mutate(mapk_alt = ifelse(time_point %in% c(\"TN\", \"MRD\"), \"NA\", mapk_alt)) %>%   ggplot(aes(x = fct_relevel(sample_id, rev(samp_ord2)))) +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), show.legend = T, color = \"black\") +   # geom_point(data = sig_exp_df[sig_exp_df$time_point != \"PD\", ], aes(y = \"MAPKalt\"), pch = 4, size = 5) +   # geom_tile_pattern(aes(y = \"MAPKalt\", fill = \"white\", pattern = \"stripe\", color = \"black\"), show.legend = F) +   scale_fill_manual(     name = \"Secondary MAPK\\nAlteration\",     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"MAPKalt\", \"Unknown\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\")   ) +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, order = 1)) +   ggnewscale::new_scale_fill() +   geom_tile(aes(y = \"Clinical Histology\", fill = histology_predominant_short), color = \"black\") +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant_short,     breaks = names(colors$histology_predominant_short)   ) +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, order = 2)) +   facet_grid(time_point ~ ., scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0), limits = c(\"MAPKalt\", \"Clinical Histology\")) +   guides(x = guide_axis(angle = 90)) +   theme_few() +   labs(y = NULL, x = NULL, fill = NULL) +   theme(     axis.text.y = element_blank(), axis.ticks.y = element_blank(),     strip.text.y.right = element_text(angle = 0, hjust = 0)   ) +   coord_flip()  p1 <- sig_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, rev(samp_ord2)), y = fct_relevel(Gene, \"LUAD\", \"LUSC\", \"SCLC\"))) +   geom_tile(aes(fill = exp), color = \"black\") +   # scale_fill_viridis_c(option = \"rocket\", oob = scales::squish, limits = c(-2, 2)) +   scale_fill_gradient2(low = scales::muted(\"blue\"), mid = \"white\", high = scales::muted(\"red\"), oob = scales::squish, limits = c(-2, 2)) +   facet_grid(time_point ~ ., scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(fill = \"Normalized\\nExpression\", x = \"Samples ranked by LUAD signature\", y = \"Lineage\\nSignature\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   theme_few() +   theme(strip.text.y = element_blank()) +   coord_flip()   pcomb <- free((p1 + theme(plot.margin = margin(4, 0, 0, 30, \"mm\"))), type = \"label\", side = \"b\") + (p0 + theme(plot.margin = margin(4, 30, 0, 0, \"mm\"))) + plot_layout(ncol = 2, widths = c(1, 0.66), guides = \"collect\") + plot_annotation(theme = theme(legend.position = \"bottom\", legend.box.margin = margin(), legend.margin = margin())) ggsave(pcomb, file = here(\"plots\", \"sig_heatmap.pdf\"), width = 4.5, height = 10)  pcomb sig_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\"), features = c(\"LUAD\", \"LUSC\", \"SCLC\"))  devtools::load_all() sig_exp_df <- sig_exp_df %>%   mutate(across(all_of(c(\"LUAD\", \"LUSC\", \"SCLC\")), ~ standardize(.x)))  sig_exp_df$mapk_alt[is.na(sig_exp_df$mapk_alt)] <- \"Unknown\"  library(ggtern)  p1 <- sig_exp_df %>%   mutate(acquired_mapk = ifelse(mapk_alt == \"MAPKalt\", \"MAPKalt\", \"Unknown\")) %>%   ggtern(aes(y = LUAD, x = LUSC, z = SCLC)) +   geom_mask() +   geom_point(aes(fill = time_point, shape = acquired_mapk), size = 3, show.legend = T) +   scale_fill_manual(values = colors$time_point) +   scale_shape_manual(values = c(21, 24)) +   theme_classic() +   Tlab(\"LUAD\") + Llab(\"LUSC\") + Rlab(\"SCLC\") +   theme_nolabels() +   # theme_nomask() +   guides(     fill = guide_legend(override.aes = list(shape = 21)),     shape = guide_legend(override.aes = list(fill = \"black\"))   ) +   labs(fill = \"Timepoint\", shape = \"Acquired MAPK\") +   theme_noticks() +   theme(panel.background = element_blank(), panel.border = element_blank()) +   # facet_grid(.~time_point, switch = \"x\") +   theme(     # axis.title = element_markdown(color = \"blue\"), # This is where to do it     strip.background = element_part_rect(side = \"\"),     legend.position = \"right\",     strip.text.x.bottom = element_text(size = 12, face = \"bold\")   ) ggsave(p1, file = here(\"plots\", \"sample_ternary_mapk.pdf\"), width = 5.4, height = 3.4) p1"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Pathway overlaps","title":null,"text":"","code":"plist <- split(pathways$Gene, pathways$pathway)  meta_programs_df <- read.table(file = \"https://raw.githubusercontent.com/mjz1/meta_programs_tirosh/refs/heads/main/tirosh_mp_patched.txt\", header = T, sep = \"\\t\")  meta_programs <- split(meta_programs_df, meta_programs_df$cell_type)  meta_programs <- map(meta_programs, .f = function(x) {   res <- split(x, x$meta_program)   map(res, .f = function(y) y$Gene) })  names(meta_programs) <- janitor::make_clean_names(names(meta_programs))   plist_sel <- list(   \"Alveolar\" = meta_programs$malignant$alveolar,   \"LUAD\" = plist$LUAD_GIRARD,   \"LUSC\" = plist$LUSC_GIRARD,   \"SCLC\" = plist$SCLC_CCLE,   \"Nuclear MAPK (Reactome)\" = plist$REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES,   \"MAPK (KEGG)\" = plist$KEGG_MAPK_SIGNALING_PATHWAY,   \"MAPK (Biocarta)\" = plist$BIOCARTA_MAPK_PATHWAY )  plist_sel <- map(plist_sel, unique)  fit <- euler(plist_sel) pdf(here(\"plots\", \"mapk_path_overlaps_extended.pdf\"), width = 7, height = 7) plot(fit, quantities = TRUE, legend = F) dev.off() png    2 plot(fit, quantities = TRUE, legend = F)"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"MAPK correlations","title":null,"text":"Plot main  Plot supp","code":"paths <- c(\"Nuclear MAPK (Reactome)\", \"MAPK (Biocarta)\", \"MAPK (KEGG)\") all_sig_summary_wide <- all_sig_summary %>%   pivot_wider(id_cols = c(\"sample_id\", \"time_point\"), names_from = pathway, values_from = Score)    pls <- map(paths, .f = function(pth) {   p <- all_sig_summary_wide %>%     ggplot(aes(x = .data[[pth]], y = LUAD)) +     stat_ellipse(       data = all_sig_summary_wide[all_sig_summary_wide$time_point != \"MRD\", ],       aes(fill = time_point),       type = \"t\",       geom = \"polygon\",       alpha = 0.3, show.legend = F     ) +     geom_point(aes(fill = time_point), pch = 21, stroke = 0.5, size = 2.5) +     geom_line(stat = \"smooth\", method = \"lm\", color = \"#063970\", se = F, linewidth = 1.25, alpha = 0.75) +     ggpubr::stat_cor() +     scale_fill_manual(values = colors$time_point, breaks = names(colors$time_point)) +     theme_classic() +     labs(y = \"LUAD Signature\", fill = \"Timepoint\", x = pth) +     guides(fill = guide_legend(override.aes = list(size = 3.5))) })  pcomb <- wrap_plots(pls, nrow = 1, guides = \"collect\", axes = \"collect\") & theme(panel.border = element_rect(fill = NA, color = \"black\"), axis.line = element_blank()) ggsave(pcomb, file = here(\"plots\", \"luad_mapk_select_cors.pdf\"), width = 8, height = 2.75) pcomb library(easystats) x <- srt_epi@meta.data %>%   filter(is_tumor_cell) %>%   mutate(sample_id = factor(sample_id)) %>%   add_count(sample_id, name = \"n_cells\") %>%   dplyr::group_by(sample_id) %>%   correlation::correlation(select = c(\"LUAD\", \"LUSC\", \"SCLC\"), select2 = c(\"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\"), method = \"spearman\") %>%   left_join(distinct(srt_epi@meta.data[, c(\"sample_id\", \"time_point\")]), by = c(\"Group\" = \"sample_id\")) %>%   mutate(     mapk_path = case_when(       Parameter2 == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",       Parameter2 == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",       Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",       .default = Parameter2     )   ) p <- x %>%   filter(Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_main.pdf\"), width = 6, height = 3.5) p p <- x %>%   filter(Parameter2 != \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.background.x = element_part_rect(side = \"b\", fill = NA, color = \"black\"),     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_supp.pdf\"), width = 11, height = 3.5) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Psuedobulked","title":null,"text":"","code":"paths <- c(\"Nuclear MAPK (Reactome)\", \"MAPK (Biocarta)\", \"MAPK (KEGG)\") all_sig_summary_wide <- all_sig_summary %>%   pivot_wider(id_cols = c(\"sample_id\", \"time_point\"), names_from = pathway, values_from = Score)    pls <- map(paths, .f = function(pth) {   p <- all_sig_summary_wide %>%     ggplot(aes(x = .data[[pth]], y = LUAD)) +     stat_ellipse(       data = all_sig_summary_wide[all_sig_summary_wide$time_point != \"MRD\", ],       aes(fill = time_point),       type = \"t\",       geom = \"polygon\",       alpha = 0.3, show.legend = F     ) +     geom_point(aes(fill = time_point), pch = 21, stroke = 0.5, size = 2.5) +     geom_line(stat = \"smooth\", method = \"lm\", color = \"#063970\", se = F, linewidth = 1.25, alpha = 0.75) +     ggpubr::stat_cor() +     scale_fill_manual(values = colors$time_point, breaks = names(colors$time_point)) +     theme_classic() +     labs(y = \"LUAD Signature\", fill = \"Timepoint\", x = pth) +     guides(fill = guide_legend(override.aes = list(size = 3.5))) })  pcomb <- wrap_plots(pls, nrow = 1, guides = \"collect\", axes = \"collect\") & theme(panel.border = element_rect(fill = NA, color = \"black\"), axis.line = element_blank()) ggsave(pcomb, file = here(\"plots\", \"luad_mapk_select_cors.pdf\"), width = 8, height = 2.75) pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Within sample correlations","title":null,"text":"Plot main  Plot supp","code":"library(easystats) x <- srt_epi@meta.data %>%   filter(is_tumor_cell) %>%   mutate(sample_id = factor(sample_id)) %>%   add_count(sample_id, name = \"n_cells\") %>%   dplyr::group_by(sample_id) %>%   correlation::correlation(select = c(\"LUAD\", \"LUSC\", \"SCLC\"), select2 = c(\"BIOCARTA_MAPK_PATHWAY\", \"KEGG_MAPK_SIGNALING_PATHWAY\", \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\"), method = \"spearman\") %>%   left_join(distinct(srt_epi@meta.data[, c(\"sample_id\", \"time_point\")]), by = c(\"Group\" = \"sample_id\")) %>%   mutate(     mapk_path = case_when(       Parameter2 == \"BIOCARTA_MAPK_PATHWAY\" ~ \"MAPK (Biocarta)\",       Parameter2 == \"KEGG_MAPK_SIGNALING_PATHWAY\" ~ \"MAPK (KEGG)\",       Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\" ~ \"Nuclear MAPK (Reactome)\",       .default = Parameter2     )   ) p <- x %>%   filter(Parameter2 == \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_main.pdf\"), width = 6, height = 3.5) p p <- x %>%   filter(Parameter2 != \"REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES\") %>%   arrange(desc(p)) %>%   ggplot(aes(x = Parameter1, y = rho)) +   geom_hline(yintercept = 0, linetype = \"dashed\") +   gghalves::geom_half_boxplot(outliers = F, aes(fill = Parameter1), errorbar.draw = T) +   gghalves::geom_half_point_panel(aes(size = -log10(p), fill = Parameter1, alpha = n_Obs), pch = 21) +   facet_nested(\"Within sample correlations\" ~ mapk_path + time_point) +   scale_fill_manual(values = colors$histology_predominant_short) +   scale_alpha_continuous(trans = \"log10\", breaks = scales::breaks_log(), labels = scales::label_number(big.mark = \",\")) +   guides(     fill = \"none\",     x = guide_axis(angle = 0),     size = guide_legend(override.aes = list(pch = 19)),     alpha = guide_legend(override.aes = list(pch = 16, size = 3))   ) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.adj.signif\", step.increase = 0.05, vjust = 0.5, hide.ns = T, bracket.nudge.y = 0.075) +   theme_few() +   theme(     strip.background.x = element_part_rect(side = \"b\", fill = NA, color = \"black\"),     strip.clip = \"off\",     plot.title = element_text(hjust = 0.5, size = 12), plot.title.position = \"panel\",     axis.text = element_text(color = \"black\"),     axis.text.x = element_text(size = 8)   ) +   labs(x = \"Lineage Signature\", y = bquote(\"Spearman's\" ~ rho), size = bquote(\"-log10\"[Padj]), alpha = \"No. cells\") ggsave(p, file = here(\"plots\", \"per_sample_mapk_cor_supp.pdf\"), width = 11, height = 3.5) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"MAPK Genomic Alterations","title":null,"text":"Create plot mutations annotated bar side, notable genes expression box heat encoding  Psuedobulk exp heatmap   model MAPKalt vs three histologies, model mutation’s association LUSC SCLC","code":"df_ord <- srt_tum@meta.data %>%   group_by(sample_id) %>%   summarize(mean_LUAD = mean(LUAD),             median_LUAD = median(LUAD)) %>%   filter(grepl(\"PD\", sample_id)) %>%   arrange(median_LUAD, mean_LUAD)  samp_ord <- df_ord %>%   pull(sample_id) %>%   as.character() %>%   rev()   secondary_mapk_class <- distinct(db$metadata, sample_id, mapk_alt)  srt_tum <- update_metadata(srt_tum, secondary_mapk_class, match_by = \"sample_id\")  p1 <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord), y = LUAD)) +   # ggplot(aes(x = sample_id_new, y = LUAD)) +    geom_violin(scale = \"width\", aes(fill = time_point), show.legend = F) +   geom_pointrange(     stat = \"summary\", fatten = 0.1,     fun.min = function(z) {       quantile(z, 0.25)     },     fun.max = function(z) {       quantile(z, 0.75)     },     fun = median, position = position_dodge(width = 0.8)   ) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   guides(x = guide_axis(angle = 90)) +   labs(x = \"Sample\", y = \"LUAD score\") +   scale_fill_manual(values = colors$time_point) +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background.x = element_blank()   )  p2 <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(LUAD = mean(LUAD)) %>%   ggplot(aes(x = mapk_alt, y = LUAD)) +   geom_boxplot(outliers = F, aes(fill = time_point), show.legend = F) +   geom_quasirandom(size = 0.3, pch = 1) +   ggpubr::geom_pwc(tip.length = 0, label = \"p.signif\") +   guides(x = guide_axis(angle = 45)) +   scale_fill_manual(values = colors$time_point) +   labs(x = NULL, y = \"LUAD score\\n(per sample means)\") +   coord_cartesian(clip = \"off\") +   theme_classic()  pcomb <- p1 + p2 + plot_layout(nrow = 1, widths = c(1, 0.1), guides = \"collect\") & theme(axis.text.x = element_text(size = 6)) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed.pdf\"), width = 5, height = 2.5) pcomb mapk_alt_df <- db$metadata[,c(\"sample_id\", \"secondary_mapk\", \"mapk_alt\")] %>%   filter(sample_id %in% unique(srt_tum$sample_id)) %>%   separate_rows(secondary_mapk, sep = \", \") %>%   separate(secondary_mapk, sep = \"_\", into = c(\"Gene\", \"Variant_Type\"), remove = F) %>%   mutate(     infercnv = grepl(\"inf\", Variant_Type),     Variant_Type = gsub(\"inf\", \"\", Variant_Type),     Gene = case_when(       grepl(\"NA\", Gene) ~ NA,       .default = Gene     )   ) %>%   tidyr::complete(nesting(sample_id, mapk_alt), Gene, fill = list(Variant_Type = \"NoAlt\")) %>%   mutate(Variant_Type = fct_recode(Variant_Type,     \"Amp\" = \"amp\",     \"Fusion\" = \"fus\"   )) %>%   filter(!grepl(\"MRD|TN\", sample_id),          !is.na(Gene))    var_order <- names(table(mapk_alt_df$Variant_Type) %>% sort(decreasing = T)) var_order <- c(var_order[-1], \"NoAlt\")  gene_ord <- mapk_alt_df[!is.na(mapk_alt_df$Gene) & mapk_alt_df$Variant_Type != \"NoAlt\", ]$Gene %>%   table() %>%   sort(decreasing = T)  p3 <- mapk_alt_df %>%   filter(!is.na(Gene)) %>%   ggplot(aes(y = fct_relevel(Gene, rev(names(gene_ord))), x = fct_relevel(sample_id, samp_ord))) +   geom_tile(aes(fill = fct_relevel(Variant_Type, var_order))) +   geom_point(     data = mapk_alt_df[mapk_alt_df$infercnv & !is.na(mapk_alt_df$infercnv), ],     aes(color = \"inferCNV\"), show.legend = F   ) +   guides(     x = guide_axis(angle = 90),     fill = guide_legend(order = 1, keywidth = 0.4, keyheight = 0.4, ncol = 2, theme = theme(legend.margin = margin()))   ) +   scale_fill_manual(     values = c(       \"NoAlt\" = \"white\",       \"Amp\" = \"#4477AA\",       \"Fusion\" = \"#88CCEE\",       \"C797S\" = \"#117733\",       \"Q1235*\" = \"#DDCC77\",       \"Q535*\" = \"#332288\",       \"W175*\" = \"#999933\"     ),     breaks = var_order[-length(var_order)]   ) +   scale_y_discrete(expand = c(0, 0)) +   scale_x_discrete(expand = c(0, 0)) +   scale_color_manual(values = \"black\") +   # scale_x_discrete(drop = FALSE) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   labs(x = \"Sample\", y = \"Gene\", fill = \"Variant\", color = NULL) p1 <- p1 + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())  p3 <- p3 + theme_few() + theme(strip.text.x = element_blank(), strip.background.x = element_blank(), legend.background = element_blank(), plot.background = element_blank(), panel.grid = element_line(color = \"grey50\", linetype = \"solid\", linewidth = 1, colour = \"black\"))  pcomb <- (p1) + free(p2, type = \"space\", side = \"b\") + free(p3, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plus_muts_v2.pdf\"), width = 6, height = 4.25)  pcomb feats <- c(\"EGFR\", \"MET\", \"ALK\", \"BRAF\", \"ERBB2\", \"FGFR1\", \"KIT\", \"KRAS\") mapk_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\"), features = feats)  devtools::load_all() mapk_exp_df <- mapk_exp_df %>%   filter(time_point == \"PD\") %>%   mutate(across(all_of(feats), ~ standardize(.x)))   mapk_exp_df_long <- mapk_exp_df %>%   pivot_longer(cols = feats, names_to = \"Gene\", values_to = \"exp\")  p_df <- mapk_exp_df_long %>%   group_by(Gene) %>%   rstatix::wilcox_test(exp ~ mapk_alt, detailed = T) %>%   rstatix::adjust_pvalue(method = \"BH\") %>%   rstatix::add_significance(     p.col = \"p\", cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"***\", \"**\", \"*\", \"^\", \"\")   )  p4 <- mapk_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord), y = as.numeric(fct_relevel(Gene, rev(names(gene_ord)))))) +   geom_tile(aes(fill = exp), color = \"grey10\") +   scale_fill_viridis_c(option = \"rocket\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   scale_y_continuous(     expand = c(0, 0), breaks = 1:n_distinct(mapk_exp_df_long$Gene),     labels = rev(unique(mapk_exp_df_long$Gene)),     sec.axis = sec_axis(~.,       breaks = 1:n_distinct(mapk_exp_df_long$Gene),       labels = rev(p_df$p.signif[match(feats, p_df$Gene)])     )   ) +   scale_x_discrete(expand = c(0, 0)) +   theme_few() +   theme(     strip.text.x = element_blank(), strip.background.x = element_blank(), panel.border = element_blank(),     axis.ticks.y.right = element_blank(), axis.text.y.right = element_text(vjust = 0.8, hjust = 0)   ) +   facet_grid(. ~ mapk_alt, scales = \"free\", space = \"free\") +   labs(x = \"Sample\", y = \"Gene\", fill = \"Normalized\\nExpression\") p4 pcomb <- (p1 + theme(plot.margin = margin())) + free(p2, type = \"space\", side = \"b\") + free((p3 + theme(plot.margin = margin(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())), type = \"space\") + plot_spacer() + free(p4, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1), heights = c(1, 1, 0.6)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plusmuts_plusexp.pdf\"), width = 6, height = 5.5)  pcomb dat <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(across(c(LUAD, LUSC, SCLC), mean)) %>%   ungroup() %>%   mutate(mapk_alt = fct_relevel(mapk_alt, \"Unknown\"))  mods <- map(c(\"LUAD\", \"LUSC\", \"SCLC\"), .f = function(pth) {   mod <- lm(glue::glue(\"{pth} ~ mapk_alt\"), dat) %>%     broom::tidy(conf.int = TRUE) %>%     mutate(Signature = pth, .before = 1) %>%     filter(term == \"mapk_altMAPKalt\") }) %>%   list_rbind()  mods <- mods %>%   rstatix::add_significance(     p.col = \"p.value\",     cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"p<0.0001\", \"p<0.001\", \"p<0.01\", \"p<0.05\", \"p<0.1\", \"ns\")   ) p <- mods %>%   ggplot(., aes(x = estimate, y = fct_reorder(Signature, estimate, mean))) +   geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high), fatten = 0.4) +   geom_vline(xintercept = 0, linetype = \"11\") +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     plot.title = element_text(size = 10, hjust = 0.5),     axis.title = element_text(size = 8)   ) +   labs(y = \"Gene Signature\", x = \"Coefficient\", title = \"Secondary MAPK (PD)\") +   geom_text(data = {     filter(mods, p.value != \"ns\")   }, aes(y = Signature, x = estimate, label = p.value.signif), nudge_y = 0.325, size = 2.25) ggsave(p, file = here(\"plots\", \"acquired_mapk_lm.pdf\"), width = 2, height = 1.5) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Merged plot","title":null,"text":"","code":"pcomb <- (p1 + theme(plot.margin = margin())) + free(p2, type = \"space\", side = \"b\") + free((p3 + theme(plot.margin = margin(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())), type = \"space\") + plot_spacer() + free(p4, type = \"space\") + plot_spacer() + plot_layout(ncol = 2, widths = c(1, 0.1), heights = c(1, 1, 0.6)) +   plot_annotation(theme = theme(plot.margin = margin(3, 8, 15, 12, unit = \"mm\"))) ggsave(pcomb, file = here(\"plots\", \"mapk_alt_luad_sig_relapsed_plusmuts_plusexp.pdf\"), width = 6, height = 5.5)  pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Model lineage associations","title":null,"text":"model MAPKalt vs three histologies, model mutation’s association LUSC SCLC","code":"dat <- srt_tum@meta.data %>%   filter(time_point == \"PD\") %>%   group_by(sample_id, mapk_alt, time_point) %>%   summarize(across(c(LUAD, LUSC, SCLC), mean)) %>%   ungroup() %>%   mutate(mapk_alt = fct_relevel(mapk_alt, \"Unknown\"))  mods <- map(c(\"LUAD\", \"LUSC\", \"SCLC\"), .f = function(pth) {   mod <- lm(glue::glue(\"{pth} ~ mapk_alt\"), dat) %>%     broom::tidy(conf.int = TRUE) %>%     mutate(Signature = pth, .before = 1) %>%     filter(term == \"mapk_altMAPKalt\") }) %>%   list_rbind()  mods <- mods %>%   rstatix::add_significance(     p.col = \"p.value\",     cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 0.1, 1),     symbols = c(\"p<0.0001\", \"p<0.001\", \"p<0.01\", \"p<0.05\", \"p<0.1\", \"ns\")   ) p <- mods %>%   ggplot(., aes(x = estimate, y = fct_reorder(Signature, estimate, mean))) +   geom_pointrange(aes(x = estimate, xmin = conf.low, xmax = conf.high), fatten = 0.4) +   geom_vline(xintercept = 0, linetype = \"11\") +   theme_few() +   theme(     axis.line = element_blank(),     panel.border = element_rect(fill = NA, color = \"black\"),     strip.background = element_blank(),     plot.title = element_text(size = 10, hjust = 0.5),     axis.title = element_text(size = 8)   ) +   labs(y = \"Gene Signature\", x = \"Coefficient\", title = \"Secondary MAPK (PD)\") +   geom_text(data = {     filter(mods, p.value != \"ns\")   }, aes(y = Signature, x = estimate, label = p.value.signif), nudge_y = 0.325, size = 2.25) ggsave(p, file = here(\"plots\", \"acquired_mapk_lm.pdf\"), width = 2, height = 1.5) p"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Lineage Signature Heatmap","title":null,"text":"","code":"feats <- c(\"LUAD\", \"LUSC\", \"SCLC\") sig_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\", \"histology_predominant_short\"), features = feats)  sig_exp_df <- sig_exp_df %>%   mutate(across(all_of(feats), ~ scale(.x)))   df_ord <- srt_tum@meta.data %>%   group_by(sample_id) %>%   summarize(mean_LUAD = mean(LUAD),             median_LUAD = median(LUAD)) %>%   arrange(median_LUAD, mean_LUAD)  samp_ord2 <- df_ord %>%   pull(sample_id) %>%   as.character() %>%   rev()  sig_exp_df_long <- sig_exp_df %>%   pivot_longer(cols = feats, names_to = \"Gene\", values_to = \"exp\")  p0 <- sig_exp_df %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord2))) +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), show.legend = F, color = \"black\") +   scale_fill_manual(     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\"), breaks = c(\"MAPKalt\"),     labels = c(\"Secondary MAPK\"), na.value = \"white\"   ) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   theme_few() +   labs(y = NULL, x = NULL, fill = NULL) +   theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())  p1 <- sig_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, samp_ord2), y = fct_relevel(Gene, \"SCLC\", \"LUSC\", \"LUAD\"))) +   geom_tile(aes(fill = exp), color = \"black\") +   # scale_fill_viridis_c(option = \"rocket\", oob = scales::squish, limits = c(-2, 2)) +   scale_fill_gradient2(low = scales::muted(\"blue\"), mid = \"white\", high = scales::muted(\"red\"), oob = scales::squish, limits = c(-2, 2)) +   facet_grid(. ~ time_point, scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(fill = \"Normalized\\nExpression\", x = \"Sample\", y = \"Lineage\\nSignature\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   theme_few() +   theme(strip.text.x = element_blank()) p0 <- sig_exp_df %>%   mutate(mapk_alt = ifelse(time_point %in% c(\"TN\", \"MRD\"), \"NA\", mapk_alt)) %>%   ggplot(aes(x = fct_relevel(sample_id, rev(samp_ord2)))) +   geom_tile(aes(y = \"MAPKalt\", fill = mapk_alt), show.legend = T, color = \"black\") +   # geom_point(data = sig_exp_df[sig_exp_df$time_point != \"PD\", ], aes(y = \"MAPKalt\"), pch = 4, size = 5) +   # geom_tile_pattern(aes(y = \"MAPKalt\", fill = \"white\", pattern = \"stripe\", color = \"black\"), show.legend = F) +   scale_fill_manual(     name = \"Secondary MAPK\\nAlteration\",     values = c(\"MAPKalt\" = \"black\", \"Unknown\" = \"white\", \"NA\" = \"grey60\"), breaks = c(\"MAPKalt\", \"Unknown\", \"NA\"),     labels = c(\"Detected\", \"Undetected\", \"Not applicable\")   ) +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, order = 1)) +   ggnewscale::new_scale_fill() +   geom_tile(aes(y = \"Clinical Histology\", fill = histology_predominant_short), color = \"black\") +   scale_fill_manual(     name = \"Clinical Histology\", values = colors$histology_predominant_short,     breaks = names(colors$histology_predominant_short)   ) +   guides(fill = guide_legend(keywidth = 0.4, keyheight = 0.5, order = 2)) +   facet_grid(time_point ~ ., scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0), limits = c(\"MAPKalt\", \"Clinical Histology\")) +   guides(x = guide_axis(angle = 90)) +   theme_few() +   labs(y = NULL, x = NULL, fill = NULL) +   theme(     axis.text.y = element_blank(), axis.ticks.y = element_blank(),     strip.text.y.right = element_text(angle = 0, hjust = 0)   ) +   coord_flip()  p1 <- sig_exp_df_long %>%   ggplot(aes(x = fct_relevel(sample_id, rev(samp_ord2)), y = fct_relevel(Gene, \"LUAD\", \"LUSC\", \"SCLC\"))) +   geom_tile(aes(fill = exp), color = \"black\") +   # scale_fill_viridis_c(option = \"rocket\", oob = scales::squish, limits = c(-2, 2)) +   scale_fill_gradient2(low = scales::muted(\"blue\"), mid = \"white\", high = scales::muted(\"red\"), oob = scales::squish, limits = c(-2, 2)) +   facet_grid(time_point ~ ., scales = \"free\", space = \"free\") +   scale_x_discrete(expand = c(0, 0)) +   scale_y_discrete(expand = c(0, 0)) +   labs(fill = \"Normalized\\nExpression\", x = \"Samples ranked by LUAD signature\", y = \"Lineage\\nSignature\") +   guides(     x = guide_axis(angle = 90),     fill = guide_colorbar(keywidth = 0.4, keyheight = 3)   ) +   theme_few() +   theme(strip.text.y = element_blank()) +   coord_flip()   pcomb <- free((p1 + theme(plot.margin = margin(4, 0, 0, 30, \"mm\"))), type = \"label\", side = \"b\") + (p0 + theme(plot.margin = margin(4, 30, 0, 0, \"mm\"))) + plot_layout(ncol = 2, widths = c(1, 0.66), guides = \"collect\") + plot_annotation(theme = theme(legend.position = \"bottom\", legend.box.margin = margin(), legend.margin = margin())) ggsave(pcomb, file = here(\"plots\", \"sig_heatmap.pdf\"), width = 4.5, height = 10)  pcomb"},{"path":"https://shahcompbio.github.io/egfr_nucseq/articles/99_plots.html","id":null,"dir":"Articles","previous_headings":"","what":"Ternary diagram","title":null,"text":"","code":"sig_exp_df <- bulk_exp(srt_tum, cell_type_col = \"is_tumor_cell\", sample_id_col = \"sample_id\", meta_cols = c(\"time_point\", \"mapk_alt\"), features = c(\"LUAD\", \"LUSC\", \"SCLC\"))  devtools::load_all() sig_exp_df <- sig_exp_df %>%   mutate(across(all_of(c(\"LUAD\", \"LUSC\", \"SCLC\")), ~ standardize(.x)))  sig_exp_df$mapk_alt[is.na(sig_exp_df$mapk_alt)] <- \"Unknown\"  library(ggtern)  p1 <- sig_exp_df %>%   mutate(acquired_mapk = ifelse(mapk_alt == \"MAPKalt\", \"MAPKalt\", \"Unknown\")) %>%   ggtern(aes(y = LUAD, x = LUSC, z = SCLC)) +   geom_mask() +   geom_point(aes(fill = time_point, shape = acquired_mapk), size = 3, show.legend = T) +   scale_fill_manual(values = colors$time_point) +   scale_shape_manual(values = c(21, 24)) +   theme_classic() +   Tlab(\"LUAD\") + Llab(\"LUSC\") + Rlab(\"SCLC\") +   theme_nolabels() +   # theme_nomask() +   guides(     fill = guide_legend(override.aes = list(shape = 21)),     shape = guide_legend(override.aes = list(fill = \"black\"))   ) +   labs(fill = \"Timepoint\", shape = \"Acquired MAPK\") +   theme_noticks() +   theme(panel.background = element_blank(), panel.border = element_blank()) +   # facet_grid(.~time_point, switch = \"x\") +   theme(     # axis.title = element_markdown(color = \"blue\"), # This is where to do it     strip.background = element_part_rect(side = \"\"),     legend.position = \"right\",     strip.text.x.bottom = element_text(size = 12, face = \"bold\")   ) ggsave(p1, file = here(\"plots\", \"sample_ternary_mapk.pdf\"), width = 5.4, height = 3.4) p1"},{"path":"https://shahcompbio.github.io/egfr_nucseq/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Zatzman. Author, maintainer.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zatzman M (2025). egfrnucseq: Complementary modes resistance EGFR TKI lung adenocarcinoma MAPK activation cellular plasticity. R package version 1.0, https://shahcompbio.github.io/egfr_nucseq/, https://github.com/shahcompbio/egfr_nucseq.","code":"@Manual{,   title = {egfrnucseq: Complementary modes of resistance to EGFR TKI in lung adenocarcinoma through MAPK activation and cellular plasticity},   author = {Matthew Zatzman},   year = {2025},   note = {R package version 1.0, https://shahcompbio.github.io/egfr_nucseq/},   url = {https://github.com/shahcompbio/egfr_nucseq}, }"},{"path":"https://shahcompbio.github.io/egfr_nucseq/index.html","id":"complementary-modes-of-resistance-to-egfr-tki-in-lung-adenocarcinoma-through-mapk-activation-and-cellular-plasticity","dir":"","previous_headings":"","what":"Complementary modes of resistance to EGFR TKI in lung adenocarcinoma through MAPK activation and cellular plasticity","title":"Complementary modes of resistance to EGFR TKI in lung adenocarcinoma through MAPK activation and cellular plasticity","text":"repository contains code related manuscript: Zatzman, M., Quintanal-Villalonga, . et al, Complementary modes resistance EGFR TKI lung adenocarcinoma MAPK activation cellular plasticity","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Complementary modes of resistance to EGFR TKI in lung adenocarcinoma through MAPK activation and cellular plasticity","text":"repository structured installable R package. R folder contains functions related data processing, visualization, helper functions. code folder contains notebooks related analysis steps, readme detailing script’s purpose. Vignettes detailing figure generation can found , following links: Main Plotting Code: Contains plotting code manuscript. Histotime Analysis: Contains code related histotime analysis Figure 5 IMPACT Analysis: Contains code related MSK-IMPACT bulk DNA panel sequencing Lung Cancer Cell Atlas Analysis: Contains code related lung cancer cell atlas dataset analysis TCGA/CPTAC Analysis: Contains code related bulk RNA LUAD datasets TCGA CPTAC","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/load_impact.html","id":null,"dir":"Reference","previous_headings":"","what":"Load IMPACT Data — load_impact","title":"Load IMPACT Data — load_impact","text":"Load IMPACT Data","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/load_impact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load IMPACT Data — load_impact","text":"","code":"load_impact(   dmp_ids,   impact_dir = \"/data1/shahs3/users/zatzmanm/work/repos/shared/msk-impact/\",   onckb_dir =     \"/data1/shahs3/users/zatzmanm/work/repos/shared/oncokb-annotated-msk-impact\",   facets_data = NULL,   save_to = NULL )"},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/load_impact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load IMPACT Data — load_impact","text":"dmp_ids Vector DMP IDs (e.g. 'P-0035733-T02-IM6') impact_dir IMPACT directory location save_to Optional. Path save impact object rds (e.g. 'data/impact_data.rds')","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/load_impact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load IMPACT Data — load_impact","text":"list containing: clin_dat_patient, clin_dat_sample, onco_meta, segments, data_cna, mutations, sv, onco_dat_full","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://shahcompbio.github.io/egfr_nucseq/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
